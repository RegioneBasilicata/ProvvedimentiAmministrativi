Imports iTextSharp.text
Imports iTextSharp.text.pdf
Imports DllSistemaNet.ClSistema  ' DllSistema.ClSistemaClass
Imports DAO.DBEngineClass
Imports DllGestDBNET  'DllGestDB
Imports System.IO
Imports System.Text
Imports System.Xml
Imports System.Xml.Schema
Imports System.Xml.XmlReader
Imports DataTypes.DetermineWs
Imports System.Data.SqlClient
Imports Intema.DBUtility
Imports System.Configuration
Imports System.Net.Mail
Imports DllDocumentale.Model
Imports System.ServiceModel
Imports System.Collections.Generic
Imports System.Web
Imports System.Data.SqlTypes
Imports DllAmbiente
Imports System.Runtime.Remoting.Contexts
Imports System.Threading

Public Class svrDocumenti

    Public Enum Stato_Notifica
        Creato = 0
        Archiviato = 1
        Modificato = 2
        Rigetto_Ragioneria = 3
        Annullato = 99
    End Enum


    Friend Errore As Integer
    Friend ErrDesc As String
    Friend pIdIstanzaWFE As String
    Friend pIdDocumento As String
    Friend pTipoDocumento As Integer
    Friend pTipoAllDocumento As Integer
    Friend pTipoAllDocumentoFirmato As Integer
    Friend pNodoFlussoDetermina As String
    Friend pNodoFlussoUfficio As String
    Friend pAttore As String
    Friend pDescrizioneAttore As String
    Friend pNote As String
    Friend pDirD As String
    Friend pDirU As String
    Friend pProssimoAttore As String
    Friend pDestinatarioInoltro As Integer
    Friend pDescrizioneProssimoAttore As String
    Friend pAttivita As Object
    Friend nAttivita As Integer
    Friend pParametriAttivita As String
    Friend pDescrizioneUfficioCompetenza As String
    Public oOperatore As New DllAmbiente.Operatore


    Public GDB As DllGestDBNET.clGestDB
    Public SISTEMA As DllSistemaNet.ClSistema

    Public objDocumento As DllDocumentale.Model.DocumentoInfo

    Friend azione As String
    Friend Shared Log As log4net.ILog = log4net.LogManager.GetLogger(GetType(svrDocumenti))


    Friend Property descrizioneUfficioCompetenza() As String
        Get
            Return pDescrizioneUfficioCompetenza
        End Get
        Set(ByVal Value As String)
            pDescrizioneUfficioCompetenza = Value
        End Set
    End Property

    Friend Property idDocumento() As String
        Get
            Return pIdDocumento
        End Get
        Set(ByVal Value As String)
            If Trim(Value) <> "" And (objDocumento Is Nothing OrElse objDocumento.Doc_id <> Value) Then
                pIdDocumento = Value
                Dim vparm(1) As Object
                vparm(0) = Value
                objDocumento = FO_Leggi_Documento_Object(vparm)
            End If
        End Set
    End Property
    Public Property ErrDescrizione() As String
        Get
            Return ErrDesc
        End Get
        Set(ByVal Value As String)
            ErrDesc = Value
        End Set
    End Property
    Friend ReadOnly Property tipoAllegatoDocumento() As Integer
        Get
            If pTipoAllDocumento < 0 Then
                Call LeggiInfoDocumento()
            End If
            Return pTipoAllDocumento
        End Get
    End Property

    Friend ReadOnly Property tipoAllegatoDocumentoFirmato() As Integer
        Get
            If pTipoAllDocumentoFirmato < 0 Then
                Call LeggiInfoDocumento()
            End If
            Return pTipoAllDocumentoFirmato
        End Get
    End Property

    Friend Property tipoDocumento() As String
        Get
            If pTipoDocumento < 0 Then
                Call LeggiInfoDocumento()
            End If
            Return pTipoDocumento
        End Get
        Set(ByVal Value As String)
            pTipoDocumento = Value
        End Set
    End Property

    Friend Property idIstanzaWFE() As String
        Get
            Return pIdIstanzaWFE
        End Get
        Set(ByVal Value As String)
            pIdIstanzaWFE = Value
        End Set
    End Property

    Friend Property Attivita() As Object
        Get
            Return Nothing
        End Get
        Set(ByVal Value As Object)
            pAttivita = Value
            nAttivita = UBound(pAttivita, 2)
        End Set
    End Property

    Friend Property prossimoAttore() As String
        Get
            Return pProssimoAttore
        End Get
        Set(ByVal Value As String)
            pProssimoAttore = Value
        End Set
    End Property
    'inserita nuova proprietà per specificare il destinatario dell'inoltro, sulla base dell'input utente
    Friend Property destinInoltro() As Integer
        Get
            Return pDestinatarioInoltro
        End Get
        Set(ByVal Value As Integer)
            pDestinatarioInoltro = Value
        End Set
    End Property

    Friend Property nodoFlussoDetermina() As String
        Get
            Return pNodoFlussoDetermina
        End Get
        Set(ByVal Value As String)
            pNodoFlussoDetermina = Value
        End Set
    End Property

    Friend Property nodoFlussoUfficio() As String
        Get
            Return pNodoFlussoUfficio
        End Get
        Set(ByVal Value As String)
            pNodoFlussoUfficio = Value
        End Set
    End Property

    Friend Property attore() As String
        Get
            Return pAttore
        End Get
        Set(ByVal Value As String)
            pAttore = Value
        End Set
    End Property

    Friend Property note() As String
        Get
            Return pNote
        End Get
        Set(ByVal Value As String)
            pNote = Value
        End Set
    End Property

    Friend Function Parametri_Completi() As Boolean
        Dim bParametriCompleti As Boolean
        bParametriCompleti = (pIdIstanzaWFE <> "" _
                   And pNodoFlussoDetermina <> "" _
                   And pNodoFlussoUfficio <> "" _
                   And pAttore <> "")
        If bParametriCompleti Then
            Errore = "0"
            ErrDesc = ""
        Else
            Errore = "1"
            ErrDesc = "Parametri incompleti"
        End If
        Return bParametriCompleti
    End Function
    Friend Sub LeggiInfoDocumento()
        Const SFunzione As String = "LeggiInfoDocumento"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object
        Dim RS As Object
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        Dim codMessaggio As Integer
        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Sqlq = "SELECT      isnull(Doc_numero,Doc_numeroProvvisorio), Doc_Cod_Uff_Prop, Doc_Data , Doc_Tipo ,Doc_utenteCreazione , " & _
               "            Ttd_codDocAllegato, Ttd_docDocAllegatoFirmato ,   Struttura.Str_descrBreve,Doc_numeroProvvisorio, dbo.fn_ReplaceCaratteriSpeciali(Documento.Doc_Oggetto) as Doc_Oggetto      " & _
               "  FROM         Documento " & _
               "               INNER JOIN Tab_Tipo_Documenti ON Doc_Tipo = Ttd_idTipoDocumento " & _
               "  INNER JOIN   Struttura ON Documento.Doc_Cod_Uff_Prop = Struttura.Str_id " & _
               " WHERE Doc_Id = '" & idDocumento & "' "

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)

        If vR(0) <> 0 Then
            GoTo FineSub
        End If

        'addXmlDati("numerodetermina", vR(1)(0, 0) & "")
        'Dim linkDetermina As String
        'linkDetermina = " <a href=""AggiungiAllAlberoAction.aspx?key=" & idDocumento & """> " & vR(1)(0, 0) & " </a>  "
        'addXmlDati("linkdetermina", linkDetermina)
        'addXmlDati("codufficioproponenete", vR(1)(1, 0) & "")
        'addXmlDati("datacreazione", vR(1)(2, 0) & "")
        'addXmlDati("utentecreazione", vR(1)(4, 0) & "")
        'addXmlDati("ufficiodescrizione", vR(1)(7, 0) & "")
        'addXmlDati("numeroprovvisorio", vR(1)(8, 0) & "")
        pTipoDocumento = Trim(vR(1)(3, 0) & "")
        'addXmlDati("TipoDocumento", pTipoDocumento)
        'Select Case pTipoDocumento
        '    Case 0
        '        addXmlDati("descTipoDocumento", " la determina ")
        '    Case 1
        '        addXmlDati("descTipoDocumento", " la delibera ")
        '    Case 2
        '        addXmlDati("descTipoDocumento", " la disposizione ")
        'End Select
        pTipoAllDocumento = vR(1)(5, 0) & ""
        pTipoAllDocumentoFirmato = vR(1)(6, 0) & ""
        'addXmlDati("oggetto", vR(1)(9, 0) & "")

        vRitPar(0) = 0
        vRitPar(1) = ""

FineSub:
        On Error Resume Next
        If Not DB Is Nothing Then
            If DB.stato <> 3 Then
                Call DB.ChiudiDB()
                DB = Nothing
            End If
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Sub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo FineSub
        ' Resume
    End Sub
    Public Sub New(ByVal op As DllAmbiente.Operatore)

        pIdIstanzaWFE = ""
        pNodoFlussoDetermina = ""
        pNodoFlussoUfficio = ""
        pAttore = ""
        pDirD = ""
        pDirU = ""
        pProssimoAttore = ""
        pTipoDocumento = -1
        pTipoAllDocumento = -1
        pTipoAllDocumentoFirmato = -1
        oOperatore = op

        Try

            SISTEMA = New DllSistemaNet.ClSistema 'New DllSistema.ClSistemaClass


            STRUMENTI_Chiamate = New DllStrumenti.Chiamate

            'Dim DBEngine As New DAO.DBEngine
            sAppPath = "C:\ProdIntema\Moduli"

            'Nome = App.ProductName & "V" & App.Major & "." & App.Minor & "." & App.Revision & " - " & App.Path
            SISTEMA.bLOG = True
            SISTEMA.bTRACE = False
            'errore = 0
            SISTEMA.sLOGPATH = sAppPath & "\temp\"
            '

            If Not Leggi_Var_Syst(SISTEMA.GetFileIni("", sAppPath & "\OleServer.ini")) Then
                Errore = 999001
                ErrDesc = "File Ini non trovato: " & sAppPath & "\OleServer.ini"
                SISTEMA.Registra_Log(ErrDesc)
                Exit Sub
            End If

            SISTEMA.sLOGFILE = SISTEMA.sLOGPATH & "Log_dllAttiDigitaliNET.D" & Format((Now), "dd")
            SISTEMA.sTRACEFILE = SISTEMA.sLOGPATH & "Trc_dllAttiDigitaliNET.D" & Format((Now), "dd")

            'On Error Resume Next
            If Not SISTEMA.VerDataFile(SISTEMA.sLOGFILE, Now) Then
                Kill(SISTEMA.sLOGFILE)
                Kill(SISTEMA.sTRACEFILE)
            End If

            'On Error GoTo ErrPwd


            If Trim$(SysMda) <> "" Then
                uu = SISTEMA.Cripta(False, "ametni", "080311110308", True)
                pp = SISTEMA.Cripta(False, "ametni", "150808155B595055", True)
                'DBEngine.SystemDB = (SysMda)
                'DBEngine.DefaultUser = uu
                'DBEngine.DefaultPassword = pp

                'WS = DBEngine.CreateWorkspace("test", uu, pp)
            Else
                Errore = 999002
                ErrDesc = "File di SysMda non trovato: " & SysMda
                Call SISTEMA.Registra_Log(ErrDesc)
                Exit Sub
            End If

            GDB = New clGestDB
            GDB.SISTEMA = SISTEMA
            NOME_ENTE_INSTALLAZIONE = ConfigurationManager.AppSettings("NOME_ENTE_INSTALLAZIONE")

            Dim obj As Object
            '   Call Carica_vTabDB
            For Each obj In SISTEMA.PROCDB
                If obj.Tipo = dbjet Then
                    'If SISTEMA.PROCDB(i) = dbjet Then
                    obj.WSCL = WS
                End If
                obj.timeOut = SISTEMA.LOCKTIMEOUT
            Next

FineSub:
            Exit Sub


        Catch ex As Exception
            Call SISTEMA.Registra_Log(ex.Message & "")
            Exit Sub
        End Try
    End Sub

    Overridable Function Elabora(ByVal cFunzione As Integer, ByVal vparm As Object, Optional ByVal controllo As Integer = 0, Optional ByVal FlagChiudiTutte As Boolean = True, Optional ByVal destinatarioInoltro As Integer = -1) As Object
        Dim Ritorno As Integer

        Log.Info("***INIZIO Elabora - Codice svrDocumenti " & cFunzione)


        SISTEMA.Client_Funzione = cFunzione
        SISTEMA.Client_Operatore = vparm(0)(2)
        SISTEMA.Client_Procedura = vparm(0)(3)
        SISTEMA.Client_Terminale = vparm(0)(0)

        If oOperatore Is Nothing Then
            Log.Error("Operatore Nothing")
            oOperatore = New DllAmbiente.Operatore
            oOperatore.Codice = vparm(0)(2)
        End If
        'oOperatore.Codice = SISTEMA.Client_Operatore
        'mod Lu 20-03-08
        'If oOperatore.Codice <> SISTEMA.Client_Operatore Then
        '    oOperatore = New DllAmbiente.Operatore
        'End If
        'oOperatore.Codice = vparm(0)(2)' SISTEMA.Client_Operatore


        '        utente.Codice = oOperatore.Codice

        If UBound(vparm) > 1 Then
            Ritorno = vparm(2)
        Else
            Ritorno = 0
        End If

        Select Case cFunzione

            Case Dic_FODocumentale.cfo_Registra_Attivita          '14
                Elabora = FO_Registra_Attivita(vparm(1))
            Case Dic_FODocumentale.cfo_Elenco_Documenti           '11
                Elabora = FO_Elenco_Documenti(vparm(1))
            Case Dic_FODocumentale.cfo_Registra_Documento         '16
                Elabora = FO_Registra_Documento(vparm(1))
            Case Dic_FODocumentale.cfo_Leggi_Documento            '17
                Elabora = FO_Leggi_Documento(vparm(1))
            Case Dic_FODocumentale.cfo_Elenco_Monitor             '12
                Elabora = FO_Elenco_Monitor(vparm(1))
            Case Dic_FODocumentale.cfo_Storico_Documento          '13
                Elabora = FO_Storico_Documento(vparm(1))
            Case Dic_FODocumentale.cfo_Elenco_Messaggi            ' 18
                Elabora = FO_Elenco_Messaggi(vparm(1))
            Case Dic_FODocumentale.cfo_Leggi_Messaggio            ' 19
                Elabora = FO_Leggi_Messaggio(vparm(1))
            Case Dic_FODocumentale.cfo_Cancella_Messaggio         ' 20
                Elabora = FO_Cancella_Messaggio(vparm(1))
            Case Dic_FODocumentale.cfo_Elenco_Allegati            ' 21
                Elabora = FO_Elenco_Allegati(vparm(1))
            Case Dic_FODocumentale.cfo_Leggi_Allegato             ' 22
                Elabora = FO_Leggi_Allegato(vparm(1))
            Case Dic_FODocumentale.cfo_Registra_Allegato          ' 23
                Elabora = FO_Registra_Allegato(vparm(1))
            Case Dic_FODocumentale.cfo_Registra_Allegato_Ex      ' 120
                Elabora = FO_Registra_Allegato_Ex(vparm(1))
            Case Dic_FODocumentale.cfo_Verifica_Prima_Apertura    ' 25      ' 23
                Elabora = FO_Verifica_Prima_Apertura(vparm(1))
            Case Dic_FODocumentale.cfo_Elenco_DocumentiUfficio ' 24
                Elabora = FO_Elenco_DocumentiUfficio(vparm(1))
            Case Dic_FODocumentale.cfo_Elenco_Lettere ' 24
                Elabora = FO_Elenco_Lettere(vparm(1))
            Case Dic_FODocumentale.cfo_Cancella_Allegato ' 24
                Elabora = FO_Cancella_Allegato(vparm(1))
            Case Dic_FODocumentale.cfo_Registra_Lettera
                Elabora = FO_Registra_Lettera(vparm(1))
            Case Dic_FODocumentale.cfo_Aggiorna_Stato_Lettera '33
                Elabora = FO_Aggiorna_Stato_Lettera(vparm(1))
            Case Dic_FODocumentale.cfo_Info_HomePage '36
                Elabora = FO_Info_HomePage(vparm(1))
            Case Dic_FODocumentale.cfo_Elenco_Compiti_Documento
                Elabora = FO_Elenco_Compiti_Documento(vparm(1))
                'modgg 10-06 3
            Case Dic_FODocumentale.cfo_Aggiorna_Documento
                Elabora = FO_Aggiorna_Documento(vparm(1))

            Case Dic_FODocumentale.cfo_Registra_Compito '27
                Elabora = FO_Registra_Compito(vparm(1))

            Case Dic_FODocumentale.cfo_Verifica_Ultima_Azione_Ufficio '40
                Elabora = VERIFICA_ULTIMA_AZIONE_UFFICIO(vparm(1))
                'Case Dic_FODocumentale.cfo_Abilita_RigettoInoltro '41
                '    Elabora = Me.AbilitaInoltroRigetto(vparm(1))
            Case Dic_FODocumentale.cfo_Elenco_Allegati_Da_Stampare '42
                Elabora = FO_Elenco_Allegati_Da_Stampare(vparm(1))
            Case Dic_FODocumentale.cfo_Elenco_Osservazioni_Documento '43
                'Elabora = FO_Elenco_Osservazioni_Documento(vparm(1))

            Case Dic_FODocumentale.cfo_ListaFirmeDocumento '44
                Elabora = FO_Lista_Firme_Documento(vparm(1))
            Case Dic_FODocumentale.cfo_Aggiorna_Appendice
                Elabora = FO_Aggiorna_Appendice(vparm(1))
                'modgg 04-08
            Case Dic_FODocumentale.cfo_Cancella_Allegato_Fisicamente '45
                Elabora = FO_Cancella_Allegato_Fisicamente(vparm(1))

            Case Dic_FODocumentale.cfo_Update_compiti_Specifici_to_Generici '48
                Elabora = FO_Update_Compiti_Specifici_to_Generici(vparm(1))
            Case Dic_FODocumentale.cfo_Registra_Osservazione '50
                Elabora = FO_Registra_Osservazione(vparm(1))
            Case Dic_FODocumentale.cfo_Elenco_Documenti_Da_Stampare '52
                Elabora = Me.FO_Elenco_Documenti_Da_Stampare(vparm(1))

            Case Dic_FODocumentale.cfo_Registra_Documento_Object
                Elabora = FO_Registra_Documento_object(vparm(1))
            Case Dic_FODocumentale.cfo_Leggi_Documento_Object
                Elabora = FO_Leggi_Documento_Object(vparm(1))

            Case 99 '98 Lancia Query SQL
                Elabora = GDB.DBElabora_Interrogazione(vparm(1))
            Case 100 '100 Lancia Query SQL
                Elabora = GDB.DBQuery(vparm(1))
            Case 101 '101 Lancia Query  di Aggiornamento
                Elabora = GDB.DB_Execute(vparm(1))
            Case 102 '102 Lancia Richiesta Struttura Tabelle
                Elabora = GDB.DB_Strutture(vparm(1))
            Case 103 '101 Lancia Query  di Aggiornamento
                Elabora = GDB.DBExecute_Transazione(vparm(1))
            Case 109 '100 Lancia Query SQL
                Elabora = GDB.DBQueryMultipla(vparm(1))
            Case 110 '100 Lancia Query SQL
                Elabora = GDB.DBQueryPagina(vparm(1))
            Case 157 '111 Lancia Query SQL
                Elabora = Nothing
            Case Else
                Elabora = New Object() {777777, "Funzione Non Più in Uso, Consultare il Fornitore del Prodotto"}
        End Select


FineSub:
        ''  On Error Resume Next
        If FlagChiudiTutte Then

            Dim cld As Object
            Try
                For Each cld In SISTEMA.PROCDB
                    Try
                        cld.ChiudiDB()
                    Catch ex As Exception
                    End Try
                Next
                If IsArray(vparm) Then
                    Erase vparm
                End If
                Log.Info("***FINE Elabora - svrDocumenti")

            Catch ex As Exception
            End Try
        End If
        If IsArray(vparm) Then
            Erase vparm
        End If
        Log.Info("***FINE Elabora - svrDocumenti")



    End Function

    Public Sub RegistraMarcaTemporale(bFile() As Byte, codDocumento As String, oOperatore As DllAmbiente.Operatore)
        Log.Info("Inizio RegistraMarcaTemporale idDocumento" + codDocumento + " codice operatore: "+ oOperatore.Codice)
        Try
            Dim vR As Object = Nothing
            Dim DB As Object = Nothing

            Dim client As ConservazioneAttiPortTypeClient = New ConservazioneAttiPortTypeClient()

            Dim requestMarca As GetMarcaTemporaleRequestType = New GetMarcaTemporaleRequestType()
            requestMarca.FileDaMarcare = bFile 'colonna bAllegato  
            requestMarca.applicationID = Dic_FODocumentale.cfo_Documento_Conservazione_Applicazione

            requestMarca.IdAtto = codDocumento
            requestMarca.Operatore = oOperatore.Nome + " "+ oOperatore.Cognome

            Log.Info("Inizio Invocazione ws GetMarcaTemporale idDocumento" + codDocumento + " codice operatore: "+ oOperatore.Codice)
            Dim responseMarca As GetMarcaTemporaleResponseType = client.GetMarcaTemporale(requestMarca)
            Log.Info("Fine Invocazione ws GetMarcaTemporale idDocumento" + codDocumento + " codice operatore: "+ oOperatore.Codice)
            If responseMarca.MarcaTemporaleFile Is Nothing
                'Aggiorno il record di firma in Azione_Utente_Documento con Sto_TipoAttivita "FIRMA_" per far ritentare la firma e la marca 
                Log.Info("Marca temporale NULL per idDocumento" + codDocumento + " codice operatore: "+ oOperatore.Codice)
                Log.Info("Inizio FO_Update_Ultima_Azione_Utente_Documento_Firma idDocumento" + codDocumento + " codice operatore: "+ oOperatore.Codice)
                FO_Update_Ultima_Azione_Utente_Documento_Firma(codDocumento)
                Log.Info("Fine FO_Update_Ultima_Azione_Utente_Documento_Firma idDocumento" + codDocumento + " codice operatore: "+ oOperatore.Codice)

                Throw New Exception("Servizio Marca Temporale Non Disponibile")
          Else 
                Log.Info("Marca temporale not null per idDocumento" + codDocumento + " codice operatore: "+ oOperatore.Codice)
                Dim vRegAll(Dic_FODocumentale.dimvc_Registra_Allegato) As Object
                vRegAll(Dic_FODocumentale.vc_Registra_Allegato.c_idAllegato) = Nothing
                vRegAll(Dic_FODocumentale.vc_Registra_Allegato.c_descTipo) = Dic_FODocumentale.cfo_Documento_Conservazione_Allegato_Marca_Desc_Tipo
                vRegAll(Dic_FODocumentale.vc_Registra_Allegato.c_descEstensione) = Dic_FODocumentale.cfo_Documento_Conservazione_Allegato_Marca_Ext_Tipo
                vRegAll(Dic_FODocumentale.vc_Registra_Allegato.c_nome) = Dic_FODocumentale.cfo_Documento_Conservazione_Allegato__Marca_Nome
                vRegAll(Dic_FODocumentale.vc_Registra_Allegato.c_idDocumento) = codDocumento
                vRegAll(Dic_FODocumentale.vc_Registra_Allegato.c_binarioAllegato) = responseMarca.MarcaTemporaleFile
                vRegAll(Dic_FODocumentale.vc_Registra_Allegato.c_autore) = oOperatore.pCodice

                Log.Info("Inizio FO_Registra_Allegato idDocumento" + codDocumento + " codice operatore: "+ oOperatore.Codice)
                vR = FO_Registra_Allegato(vRegAll)
                Log.Info("Fine FO_Registra_Allegato idDocumento" + codDocumento + " codice operatore: "+ oOperatore.Codice)
            End If

            Log.Info("Fine RegistraMarcaTemporale idDocumento" + codDocumento + " codice operatore: "+ oOperatore.Codice)
        Catch ex As Exception
            Log.Error("CONSERVAZIONE_ATTO: Errore Servizio conservazioneAtti idDocumento" + codDocumento + " codice operatore: "+ oOperatore.Codice + " - Marcatura Temporale: " & ex.Message)
            Throw New Exception("CONSERVAZIONE_ATTO: Errore Servizio conservazioneAtti idDocumento" + codDocumento + " codice operatore: "+ oOperatore.Codice + " - Marcatura Temporale: " & ex.Message)
        End Try

    End Sub

    Public Sub UPDATE_DOCUMENTO_CONSERVAZIONE_ATTO(dataArchivio As DateTime)
        Try

            FO_Update_Documento_Conservazione_Atto_Archivio(idDocumento, objDocumento.Doc_numero, dataArchivio)

        Catch ex As Exception
            Log.Error("*** UPDATE_DOCUMENTO_CONSERVAZIONE_ATTO - DocId: " & objDocumento.Doc_id & " - Exception: " & ex.Message)
            Throw New Exception("Errore Update Documento Conservazione Atto: Errore WS conservazioneAtti: " & ex.Message)
        End Try

    End Sub


    Public Sub Registra_Allegato_Documento_Conservazione(idDocumento As String,
                                                           numeroDocumento As String,
                                                           idAllegato As String,
                                                           codiceOperatore As String,
                                                           Optional ByVal estensioneAllegato As String = "P7M",
                                                           Optional ByVal allegatoInfo As AllegatoInfo = Nothing,
                                                           Optional ByVal idAlfresco As String = Nothing,
                                                           Optional ByVal pathAlfresco As String = Nothing,
                                                           Optional ByVal avviaTransazione As Boolean = True,
                                                           Optional ByVal descrizioneErrore As String = Nothing)
        Try
            Dim documentoConservazione As ItemDocumentoConservazione = FO_GetDocumentoConservazione_Operatore(idDocumento, codiceOperatore)
            Dim idStatoDocumentoConservazione As Integer = FO_Get_Stato_Conservazione(Dic_FODocumentale.cfo_Conservazione_Stato_DA_MARCARE)

            If (documentoConservazione.Id <> 0) Then
                FO_Update_Documento_Conservazione_Atto(idDocumento, numeroDocumento, idAllegato, "P7M", allegatoInfo, idStatoDocumentoConservazione)
            Else
                FO_Insert_Documento_Conservazione_Atto(idDocumento, numeroDocumento, idAllegato, "P7M", allegatoInfo, idStatoDocumentoConservazione)
            End If

        Catch ex As Exception
            'Exception: WS conservazioneAtti Non Disponibile 
            Log.Error("*** Registra_Allegato_Documento_Conservazione - DocId: " & objDocumento.Doc_id & " - Exception: " & ex.Message)
            Throw New Exception("CONSERVAZIONE_ATTO: Errore WS conservazioneAtti: " & ex.Message)
        End Try

    End Sub

    Public Function FO_Update_Documento_Conservazione_Atto(idDocumento As String,
                                                           numeroDocumento As String,
                                                           idAllegato As String,
                                                           Optional ByVal estensioneAllegato As String = "P7M",
                                                           Optional ByVal allegatoInfo As AllegatoInfo = Nothing,
                                                           Optional ByVal id_stato As Integer = 7,
                                                           Optional ByVal idAlfresco As String = Nothing,
                                                           Optional ByVal pathAlfresco As String = Nothing,
                                                           Optional ByVal avviaTransazione As Boolean = True,
                                                           Optional ByVal descrizioneErrore As String = Nothing) As Integer
        'Dim statoIstanzaDocumentoInfo As StatoIstanzaDocumentoInfo = Get_StatoIstanzaDocumento(documentoInfo.Doc_id)
        Dim update_documento_conservazione As String = "UPDATE [Documento_Conservazione] " &
            " SET [numero_definitivo] = " & "@param_numero_definitivo" &
            ", [id_allegato]= " & "@param_id_allegato" &
            ", [estensione_allegato]= " & "@param_estensione_allegato" &
            ", [nominativo_operatore_allegato]= " & "@param_nominativo_operatore_allegato" &
            ", [data_registrazione_allegato]= " & "@param_data_registrazione_allegato" &
            ", [id_stato]=" & "@param_id_stato" &
            ", [data_aggiornamento]=" & "@param_data_aggiornamento " &
            " where [id_documento]=" & "@param_id_Documento" & "   AND [codice_operatore_allegato] = " & "@param_codice_operatore_allegato"

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Dim parms(8) As SqlParameter
        parms(0) = New SqlParameter("@param_numero_definitivo", SqlDbType.VarChar)
        parms(0).Value = numeroDocumento

        parms(1) = New SqlParameter("@param_id_allegato", SqlDbType.VarChar)
        parms(1).Value = idAllegato

        parms(2) = New SqlParameter("@param_estensione_allegato", SqlDbType.VarChar)
        parms(2).Value = estensioneAllegato

        parms(3) = New SqlParameter("@param_nominativo_operatore_allegato", SqlDbType.VarChar)
        parms(3).Value = allegatoInfo.All_autore

        parms(4) = New SqlParameter("@param_data_registrazione_allegato", SqlDbType.DateTime)
        parms(4).Value = allegatoInfo.All_dataRegistrazione

        parms(5) = New SqlParameter("@param_id_stato", SqlDbType.Int)
        parms(5).Value = id_stato

        parms(6) = New SqlParameter("@param_data_aggiornamento", SqlDbType.DateTime)
        parms(6).Value = Now

        parms(7) = New SqlParameter("@param_id_documento", SqlDbType.VarChar)
        parms(7).Value = idDocumento
        parms(8) = New SqlParameter("@param_codice_operatore_allegato", SqlDbType.VarChar)
        parms(8).Value = allegatoInfo.All_autore
        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(strConn, CommandType.Text, update_documento_conservazione, parms, -1)

        Return returnValue
    End Function

    Public Function FO_Update_Documento_Conservazione_Atto_Archivio(idDocumento As String,
                                                           numeroDocumento As String,
                                                           Optional ByVal dataArchivio As DateTime = Nothing) As Integer
        'Dim statoIstanzaDocumentoInfo As StatoIstanzaDocumentoInfo = Get_StatoIstanzaDocumento(documentoInfo.Doc_id)
        Dim update_documento_conservazione As String = "UPDATE [Documento_Conservazione] " &
            " SET [numero_definitivo] = " & "@param_numero_definitivo" &
            ", [data_archivio]= " & "@param_data_archivio" &
            " where [id_documento]=" & "@param_id_Documento"

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Dim parms(2) As SqlParameter
        parms(0) = New SqlParameter("@param_numero_definitivo", SqlDbType.VarChar)
        parms(0).Value = numeroDocumento

        parms(1) = New SqlParameter("@param_data_archivio", SqlDbType.DateTime)
        parms(1).Value = dataArchivio

        parms(2) = New SqlParameter("@param_id_documento", SqlDbType.VarChar)
        parms(2).Value = idDocumento
        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(strConn, CommandType.Text, update_documento_conservazione, parms, -1)

        Return returnValue
    End Function
    Public Function FO_Insert_Documento_Conservazione_Atto(idDocumento As String,
                                                           numeroDocumento As String,
                                                           idAllegato As String,
                                                           Optional ByVal estensioneAllegato As String = "P7M",
                                                           Optional ByVal allegatoInfo As AllegatoInfo = Nothing,
                                                           Optional ByVal id_stato As Integer = 7,
                                                           Optional ByVal idAlfresco As String = Nothing,
                                                           Optional ByVal pathAlfresco As String = Nothing,
                                                           Optional ByVal avviaTransazione As Boolean = True,
                                                           Optional ByVal descrizioneErrore As String = Nothing) As Integer
        'Dim statoIstanzaDocumentoInfo As StatoIstanzaDocumentoInfo = Get_StatoIstanzaDocumento(documentoInfo.Doc_id)
        Dim insert_documento_conservazione As String = "INSERT INTO [Documento_Conservazione] " &
            "([numero_definitivo]" &
            ", [id_documento] " &
            ", [id_allegato] " &
            ", [estensione_allegato] " &
            ", [codice_operatore_allegato] " &
            ", [nominativo_operatore_allegato] " &
            ", [data_registrazione_allegato] " &
            ", [id_stato]" &
            ", [data_aggiornamento])" &
  " VALUES (" & "@param_numero_definitivo" &
            " ," & "@param_id_documento" &
            " ," & "@param_id_allegato" &
            " ," & "@param_estensione_allegato" &
            " ," & "@param_codice_operatore_allegato" &
            " ," & "@param_nominativo_operatore_allegato" &
            " ," & "@param_data_registrazione_allegato" &
            " ," & "@param_id_stato" &
            " ," & "@param_data_aggiornamento" &
" )Select @@identity"

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Dim parms(8) As SqlParameter
        parms(0) = New SqlParameter("@param_numero_definitivo", SqlDbType.VarChar)
        parms(0).Value = numeroDocumento
        parms(1) = New SqlParameter("@param_id_documento", SqlDbType.VarChar)
        parms(1).Value = idDocumento
        parms(2) = New SqlParameter("@param_id_allegato", SqlDbType.VarChar)
        parms(2).Value = idAllegato

        parms(3) = New SqlParameter("@param_estensione_allegato", SqlDbType.VarChar)
        parms(3).Value = estensioneAllegato

        parms(4) = New SqlParameter("@param_codice_operatore_allegato", SqlDbType.VarChar)
        parms(4).Value = allegatoInfo.All_autore

        parms(5) = New SqlParameter("@param_nominativo_operatore_allegato", SqlDbType.VarChar)
        parms(5).Value = allegatoInfo.All_autore

        parms(6) = New SqlParameter("@param_data_registrazione_allegato", SqlDbType.DateTime)
        parms(6).Value = allegatoInfo.All_dataRegistrazione

        parms(7) = New SqlParameter("@param_id_stato", SqlDbType.Int)
        parms(7).Value = id_stato

        parms(8) = New SqlParameter("@param_data_aggiornamento", SqlDbType.DateTime)
        parms(8).Value = Now

        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(strConn, CommandType.Text, insert_documento_conservazione, parms, -1)

        Return returnValue
    End Function

    Public Sub VerificaSistema(ByRef sistema As DllSistemaNet.ClSistema, ByVal stringaDatabase As String, ByRef DB As Object)
        Dim conta As Integer = 0

        While conta < 10
            Try
                If sistema Is Nothing Then
                    sistema = New DllSistemaNet.ClSistema
                End If
                If sistema.PROCDB Is Nothing OrElse Not sistema.PROCDB.Contains(stringaDatabase) Then
                    ' If sistema.PROCDB Is Nothing Then
                    sistema.PROCDB = New Microsoft.VisualBasic.Collection
                    'End If
                    Leggi_Var_Syst(sistema.GetFileIni("", sAppPath & "\OleServer.ini"))
                End If
                DB = sistema.PROCDB.Item(stringaDatabase)
                conta = 10
            Catch ex As Exception
                conta += 1
            End Try

        End While


    End Sub
    Private Function Leggi_Var_Syst(ByVal fName As String) As Boolean
        Dim fNum As Object = Nothing
        Dim Var1 As String, Linea As String, Y1 As Integer
        Dim jj As Integer, j As Integer
        Dim Var2 As String
        Dim vRit(2) As String
        Dim y2 As Integer
        Dim SS As String
        Dim objDB As Object = Nothing
        Dim vR As Object = Nothing
        Dim N As Integer
        Dim du As String
        Dim DFp As String
        Dim DFu As String

        DFu = "sa"
        DFp = ""

        On Error GoTo NoFileIni
        GestioneConnessioni()
        NOME_ENTE_INSTALLAZIONE = ConfigurationManager.AppSettings("NOME_ENTE_INSTALLAZIONE")

        fNum = FreeFile()

        ' Dim Fs As New FileStream(fName, FileMode.Open)
        'Dim FileInput As New StreamReader(Fs)
        Dim FileInput As StreamReader = (File.OpenText(fName))

        'Open fName For Input As fNum
        On Error Resume Next

        'Do Until EOF(fNum)
        Do Until FileInput.Peek = -1
            'Line Input #fNum, Linea

            Linea = FileInput.ReadLine

            If Trim(Linea) = "" Then
                GoTo FineLoopRead
            End If

            If Mid$(Trim$(Linea), 1, 1) = "'" Then
                GoTo FineLoopRead
            End If

            'Tolgo i Tab
            Linea = Replace(Linea, Chr(9), " ")

            Y1 = InStr(1, Linea, "=")
            Var2 = Mid$(Linea, Y1 + 1, Len(Linea) - Y1)
            Var1 = Mid$(Linea, 5, Y1 - 5)

            'Tolgo i Commenti
            y2 = InStr(1, Var2, "/*")
            If y2 <> 0 Then
                Var2 = Trim$(Mid$(Var2, 1, y2 - 1))
            End If

            Var2 = SISTEMA.PathAssoluto(sAppPath, Var2)

            '°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
            'PERSONALIZZARE
            '°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

            Select Case UCase(Var1)
                Case "ATTESA"
                    ATTESA = Var2
                Case "APPLTEMP"
                    SISTEMA.sLOGPATH = Var2
                Case "APPLTRACE"
                    SISTEMA.bTRACE = (UCase(Var2)) = "ON"
                Case "LOG"
                    SISTEMA.bLOG = (UCase(Var2)) = "ON"
                    'PARAMTETRI
                Case "LOCKTIMEOUT"
                    SISTEMA.LOCKTIMEOUT = Var2
                    'ARCHIVI
                Case "SYSMDA"
                    SysMda = Var2

                Case "DFU"
                    N = InStr(Var2, "#")
                    du = Mid(Var2, 1, N - 1)
                    DFu = SISTEMA.Cripta(False, "ametni", du, True)
                    du = Mid(Var2, N + 1)
                    DFp = SISTEMA.Cripta(False, "ametni", du, True)
                Case "DATABASE"
                    'vR = Split(Var2, ";")
                    'If Not SISTEMA.PROCDB.Contains(UCase(vR(0))) Then
                    '    Select Case CStr(vR(1) & "")
                    '        Case "MSJET"
                    '            objDB = New ClJetDB
                    '            objDB.Nome = UCase(vR(0))
                    '            SS = vR(2)
                    '            objDB.strPercorso = SISTEMA.PathAssoluto(sAppPath, SS)
                    '            objDB.Tipo = dbjet
                    '            objDB.Stato = DllGestDBNET.clDicGDB.dbCostTipoStato.dbChiuso '   .dbCostTipoStato.dbChiuso
                    '            objDB.NomeFisico = objDB.Nome
                    '            If UBound(vR) > 4 Then
                    '                If vR(5) <> "" Then
                    '                    objDB.NomeFisico = vR(5)
                    '                End If
                    '            End If
                    '        Case "ADOJET"
                    '            objDB = New clAdoDB
                    '            objDB.Nome = UCase(vR(0))
                    '            SS = vR(2)
                    '            objDB.strPercorso = SISTEMA.PathAssoluto(sAppPath, SS)
                    '            objDB.Tipo = DllGestDBNET.clDicGDB.dbCostTipoDB.dbADOAccess       'DllGestDB.dbCostTipoDB.dbADOAccess
                    '            objDB.Stato = DllGestDBNET.clDicGDB.dbCostTipoStato.dbChiuso   'DllGestDB.dbCostTipoStato.dbChiuso
                    '            objDB.NomeFisico = objDB.Nome
                    '            If UBound(vR) > 4 Then
                    '                If vR(5) <> "" Then
                    '                    objDB.NomeFisico = vR(5)
                    '                End If
                    '            End If
                    '        Case "ADOSQL"
                    '            objDB = New clAdoDB
                    '            objDB.Nome = UCase(vR(0))
                    '            objDB.server = vR(2)
                    '            objDB.Provider = vR(3)
                    '            Dim m As String = "true"
                    '            If vR(4).Equals(m) Then
                    '                objDB.Trast = True
                    '            Else
                    '                objDB.Trast = False
                    '            End If
                    '            'objDB.Trast = vR(4)
                    '            objDB.User = DFu
                    '            objDB.timeOut = SISTEMA.LOCKTIMEOUT
                    '            objDB.NomeFisico = objDB.Nome
                    '            If UBound(vR) > 4 Then
                    '                If vR(5) <> "" Then
                    '                    objDB.NomeFisico = vR(5)
                    '                End If
                    '            End If

                    '            If UBound(vR) > 5 Then
                    '                If vR(6) <> "" Then
                    '                    SS = vR(6)
                    '                    objDB.User = SISTEMA.Cripta(False, "ametni", SS, True)
                    '                End If
                    '            End If
                    '            objDB.Password = DFp
                    '            If UBound(vR) > 6 Then
                    '                If vR(7) <> "" Then
                    '                    SS = vR(7)
                    '                    objDB.Password = SISTEMA.Cripta(False, "ametni", SS, True)
                    '                End If
                    '            End If
                    '            objDB.Tipo = DllGestDBNET.clDicGDB.dbCostTipoDB.dbADOSQL   'DllGestDB.dbCostTipoDB.dbADOSQL
                    '            objDB.Stato = DllGestDBNET.clDicGDB.dbCostTipoStato.dbChiuso  'DllGestDB.dbCostTipoStato.dbChiuso
                    '    End Select
                    '    SISTEMA.PROCDB.Add(objDB, objDB.Nome)
                    'End If
                    'objDB = Nothing

                    ''PARAMETRI

                    ''dll

                    ''wes
                Case "WESZOPE"
                    WESZOPE = Var2
                Case Else
            End Select


FineLoopRead:
        Loop
        'Close #fNum
        '
        FileInput.Close()
        Leggi_Var_Syst = True

        Exit Function

NoFileIni:
        Leggi_Var_Syst = False

    End Function
    Sub GestioneConnessioni()

        If Not SISTEMA.PROCDB.Contains("TABCENTR") Then
            CaricaDB("ConnectionStringTABCENTR")
        End If

        If Not SISTEMA.PROCDB.Contains("DOCUMENTALE") Then
            CaricaDB("ConnectionStringDOCUMENTALE")
        End If

        If Not SISTEMA.PROCDB.Contains("DOCUMENTALE_LOG") Then
            CaricaDB("ConnectionStringDOCUMENTALE_LOG")
        End If

        If Not SISTEMA.PROCDB.Contains("SESSIONI") Then
            '       CaricaDB("ConnectionStringSESSIONI")
        End If



    End Sub
    Sub CaricaDB(ByVal NomeChiave As String)

        Dim objDB As Object = Nothing
        Dim vR As Object = Nothing




        Dim str_ConnectionString As String = ""
        Dim key As String = ""


        '  str_ConnectionString = ConfigurationManager.AppSettings(NomeChiave)
        ' vR = Split(str_ConnectionString, ";")

        ' Dim connectionss As New ConnectionStringSettings("TABCENTR", ConfigurationManager.AppSettings("ConnectionStringTABCENTR"))
        Dim ht As Hashtable = GetHashTableConnectionDB(ConfigurationManager.AppSettings(NomeChiave))

        Dim dd As New ConnectionStringSettings
        objDB = New clAdoDB
        'objDB.Nome = UCase(vR(0))
        'objDB.server = vR(2)
        'objDB.Provider = vR(3)

        objDB.Nome = ht("Initial Catalog")
        objDB.server = ht("Data Source")
        objDB.Provider = "SQLOLEDB"

        'Dim m As String = "true"
        'If vR(4).Equals(m) Then
        '    objDB.Trast = True
        'Else
        objDB.Trast = False
        'End If
        'objDB.Trast = vR(4)
        objDB.User = ht("User Id")
        objDB.timeOut = SISTEMA.LOCKTIMEOUT
        objDB.NomeFisico = objDB.Nome
        'If UBound(vR) > 4 Then
        '    If vR(5) <> "" Then
        '        objDB.NomeFisico = vR(5)
        '    End If
        'End If

        'If UBound(vR) > 5 Then
        '    If vR(6) <> "" Then
        '        SS = vR(6)
        '        objDB.User = SISTEMA.Cripta(False, "ametni", SS, True)
        '    End If
        'End If
        objDB.Password = ht("Password")
        'If UBound(vR) > 6 Then
        '    If vR(7) <> "" Then
        '        SS = vR(7)
        '        objDB.Password = SISTEMA.Cripta(False, "ametni", SS, True)
        '    End If
        'End If
        objDB.Tipo = DllGestDBNET.clDicGDB.dbCostTipoDB.dbADOSQL   'DllGestDB.dbCostTipoDB.dbADOSQL
        objDB.Stato = DllGestDBNET.clDicGDB.dbCostTipoStato.dbChiuso  'DllGestDB.dbCostTipoStato.dbChiuso

        SISTEMA.PROCDB.Add(objDB, NomeChiave.Replace("ConnectionString", ""))





    End Sub
    Function GetHashTableConnectionDB(ByVal connString As String) As Hashtable
        Dim ht As New Hashtable
        Dim listaKey As String() = connString.Split(";".ToCharArray, System.StringSplitOptions.RemoveEmptyEntries)
        For Each s As String In listaKey
            Dim valore As String() = Split(s, "=")
            If Not ht.ContainsKey(valore(0).Trim()) Then
                ht.Add(valore(0).Trim(), valore(1).Trim)
            End If
        Next
        Return ht
    End Function
    Friend Function FO_Registra_Compito(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Registra_Compito"
        Dim vRitPar(3) As Object
        Dim Sqlq As String

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim trans As SqlClient.SqlTransaction = Nothing

        Dim rdr As SqlClient.SqlDataReader
        Dim parms(3) As SqlParameter

        Dim compito As String
        vRitPar(0) = 0
        vRitPar(1) = ""
        Try

            Log.Debug("Inizio" & SFunzione)
            idDocumento = vParm(Dic_FODocumentale.vc_Registra_Compito.c_idDocumento) & ""
            compito = vParm(Dic_FODocumentale.vc_Registra_Compito.c_compito) & ""
            Dim certificatoUtente As String = ""
            If Not vParm(Dic_FODocumentale.vc_Registra_Compito.c_certificato) Is Nothing Then
                certificatoUtente = vParm(Dic_FODocumentale.vc_Registra_Compito.c_certificato).ToString
            End If

            If Trim(idDocumento) = "" Or Trim(oOperatore.Codice) = "" Then
                vRitPar(0) = 1
                vRitPar(1) = "Parametri insufficienti, " + SFunzione
                Throw New Exception()
            End If

            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            Sqlq = " SELECT  Dco_id_Documento, Dco_Compito, Tcd_Descrizione, Dco_utente, Tcd_Unicita " &
                   " FROM   Documento_compito_utente  " &
                   "    INNER JOIN Tab_Compiti_Documento " &
                   " ON Documento_compito_utente.Dco_Compito = Tab_Compiti_Documento.Tcd_Compito " &
                   " WHERE     (Dco_id_Documento = '" & idDocumento & "') AND ( (Dco_Compito = '" & compito & "') or Dco_utente='" & oOperatore.Codice & "')  "

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)
            If Not rdr.HasRows Then
                rdr.Close()
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction

                'returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(strConn, CommandType.Text, SqlqInsert, parms, -1)
                FO_Insert_Compito_Utente(idDocumento, oOperatore.Codice, compito, certificatoUtente, trans)
                trans.Commit()
            Else
                While (rdr.Read())
                    If rdr.Item("Tcd_Unicita") = False Then
                        If LCase(rdr.Item("Dco_utente")) <> LCase(oOperatore.Codice) Then
                            rdr.Close()
                            conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                            conn.Open()
                            trans = conn.BeginTransaction
                            FO_Insert_Compito_Utente(idDocumento, oOperatore.Codice, compito, certificatoUtente, trans)
                            trans.Commit()
                        Else
                            If LCase(rdr.Item("Dco_utente")) = LCase(oOperatore.Codice) And rdr.Item("Dco_compito") <> compito Then
                                FO_Update_Compito_Utente(idDocumento, oOperatore.Codice, rdr.Item("Dco_compito"), compito, trans)
                            End If
                        End If
                    Else
                        conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                        conn.Open()
                        trans = conn.BeginTransaction
                        If LCase(rdr.Item("Dco_utente")) <> LCase(oOperatore.Codice) And rdr.Item("Dco_compito") = compito Then
                            Dim opTemp As DllAmbiente.Operatore = New DllAmbiente.Operatore
                            opTemp.Codice = rdr.Item("Dco_utente")
                            Dim compito_generico As String = Definisci_Compito(idDocumento, False, opTemp)
                            FO_Update_Compito_Utente(idDocumento, opTemp.Codice, compito, compito_generico, trans)

                            '  FO_Update_Utente_Da_Compito(idDocumento, oOperatore.Codice, compito, trans)
                            'da chiedere a giovanna modifica
                            FO_Insert_Compito_Utente(idDocumento, oOperatore.Codice, compito, certificatoUtente, trans)

                        End If

                        If LCase(rdr.Item("Dco_utente")) = LCase(oOperatore.Codice) And rdr.Item("Dco_compito") = "DIRIGENTEUP" And compito = "DIR_SEGRETPRES" Then
                            FO_Insert_Compito_Utente(idDocumento, oOperatore.Codice, compito, certificatoUtente, trans)
                        ElseIf LCase(rdr.Item("Dco_utente")) = LCase(oOperatore.Codice) And rdr.Item("Dco_compito") = "DIRIGENTEUP" And compito = "DIR_CONTRLEGITT" Then
                            FO_Insert_Compito_Utente(idDocumento, oOperatore.Codice, compito, certificatoUtente, trans)
                        ElseIf LCase(rdr.Item("Dco_utente")) = LCase(oOperatore.Codice) And rdr.Item("Dco_compito") = "ISTRUTTORE" And compito = "REV_RAGIONERIA" Then
                            FO_Insert_Compito_Utente(idDocumento, oOperatore.Codice, compito, certificatoUtente, trans)
                        ElseIf LCase(rdr.Item("Dco_utente")) = LCase(oOperatore.Codice) And rdr.Item("Dco_compito") <> compito Then
                            FO_Update_Compito_Utente(idDocumento, oOperatore.Codice, rdr.Item("Dco_compito"), compito, trans)
                        End If

                        trans.Commit()
                    End If

                End While
                rdr.Close()

            End If
            vRitPar(0) = "0"
            vRitPar(1) = ""

        Catch ex As Exception
            Log.Error(ex.Message)
            vRitPar(0) = "1"
            vRitPar(1) = ex.Message
            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try

        Return vRitPar
    End Function
    Friend Function FO_Registra_Attivita(ByVal vParm As Object, Optional ByVal DBChiamante As Object = Nothing, Optional ByVal AvviaTransazione As Boolean = True) As Object
        Const SFunzione As String = "FO_Registra_Attivita"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object
        Dim RS As Object

        'Dim idDocumento As String
        Dim progAttivita As Integer
        Dim dataAttivita As DateTime
        Dim tipoAttivita As String
        Dim infoAttivita As String
        Dim idAllegato As String
        Dim idDocumentoLocale As String

        Dim nominativo As String = ""
        Dim livelloUfficio As String = ""
        Dim livelloRuoloUfficio As String = ""

        Dim oAttore As DllAmbiente.Operatore
        Dim oUfficio As DllAmbiente.Ufficio

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        idDocumentoLocale = vParm(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) & ""
        ' utente.Codice = vParm(Dic_FODocumentale.vc_Registra_Attivita.c_utente) & ""
        If IsDate(vParm(Dic_FODocumentale.vc_Registra_Attivita.c_data)) Then
            dataAttivita = CDate(vParm(Dic_FODocumentale.vc_Registra_Attivita.c_data))
        Else
            dataAttivita = Now
        End If
        tipoAttivita = vParm(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita)
        infoAttivita = vParm(Dic_FODocumentale.vc_Registra_Attivita.c_info_attivita) & ""
        idAllegato = vParm(Dic_FODocumentale.vc_Registra_Attivita.c_id_allegato) & ""

        nominativo = vParm(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) & ""
        livelloUfficio = vParm(Dic_FODocumentale.vc_Registra_Attivita.c_livelloufficio) & ""
        livelloRuoloUfficio = vParm(Dic_FODocumentale.vc_Registra_Attivita.c_livelloRuoloufficio) & ""

        If String.IsNullOrEmpty(livelloUfficio) Or String.IsNullOrEmpty(livelloUfficio) Then
            Dim objStato As DllDocumentale.StatoIstanzaDocumentoInfo = Get_StatoIstanzaDocumento(idDocumentoLocale)
            livelloUfficio = objStato.LivelloUfficio
            livelloRuoloUfficio = objStato.Ruolo
        End If
        If Trim(idDocumentoLocale) = "" Or Trim(oOperatore.Codice) = "" Then
            vRitPar(0) = 1
            vRitPar(1) = "Parametri insufficienti, " + SFunzione
            GoTo FineSub
        End If

        If IsNothing(DBChiamante) Then
            VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
            'DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

            Call DB.ApriDB()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
                GoTo FineSub
            End If
        Else
            DB = DBChiamante
        End If


        If AvviaTransazione Then
            Call DB.BeginTrans()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
        End If

        Sqlq = " SELECT     Sto_id_Doc, Sto_Prog, Sto_Utente,Sto_Ufficio, Sto_Data, " &
               "            Sto_TipoAttivita, Sto_Info_Attivita, Sto_attivita_corrente, Sto_idAllegato, Sto_Nominativo,Sto_Livello ,Sto_Ruolo " &
               " FROM         Azioni_Utente_Documento " &
               " WHERE Sto_id_Doc = '" & idDocumentoLocale & "' "

        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        progAttivita = 1
        If Not RS.EOF Then
            RS.MoveFirst()
            While Not RS.EOF
                progAttivita = progAttivita + 1
                RS("Sto_attivita_corrente").value = 0
                RS.MoveNext()
            End While
        End If


        Call DB.AddRS(RS)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        RS("Sto_id_Doc").Value = idDocumentoLocale
        RS("Sto_Prog").Value = progAttivita
        RS("Sto_Utente").Value = oOperatore.Codice
        RS("Sto_Ufficio").Value = oOperatore.oUfficio.CodUfficio
        RS("Sto_Data").Value = dataAttivita
        RS("Sto_TipoAttivita").Value = tipoAttivita
        RS("Sto_Info_Attivita").Value = infoAttivita
        RS("Sto_Nominativo").Value = nominativo.ToString().Replace("'", "''")

        If (tipoAttivita = "INOLTRO") Or (tipoAttivita = "ASSEGNA") Or (tipoAttivita = "RIGETTO") Then
            RS("Sto_attivita_corrente").value = 0
        Else
            RS("Sto_attivita_corrente").value = 1
        End If
        RS("Sto_idAllegato").value = idAllegato

        RS("Sto_Livello").value = livelloUfficio
        RS("Sto_Ruolo").value = livelloRuoloUfficio

        Call DB.UpdateRS(RS)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        If (tipoAttivita = "INOLTRO") Or (tipoAttivita = "ASSEGNA") Or (tipoAttivita = "RIGETTO") Then
            Call DB.AddRS(RS)
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If

            RS("Sto_id_Doc").Value = idDocumentoLocale
            RS("Sto_Prog").Value = progAttivita + 1
            If pDirU <> "D" Then
                oAttore = New DllAmbiente.Operatore
                oAttore.Codice = pProssimoAttore
                RS("Sto_Utente").Value = oAttore.Codice
                RS("Sto_Ufficio").Value = oAttore.oUfficio.CodUfficio
                RS("Sto_TipoAttivita").Value = "ARRIVOWL"
            Else
                RS("Sto_Utente").Value = pProssimoAttore
                RS("Sto_Ufficio").Value = pProssimoAttore
                RS("Sto_TipoAttivita").Value = "ARRIVOUF"
            End If


            RS("Sto_Data").Value = dataAttivita
            RS("Sto_Info_Attivita").Value = infoAttivita
            RS("Sto_attivita_corrente").value = 1
            RS("Sto_idAllegato").value = idAllegato

            Call DB.UpdateRS(RS)
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
        End If

        If AvviaTransazione Then
            Call DB.CommitTrans()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
        End If

        vRitPar(0) = 0
        vRitPar(1) = ""

FineSub:
        FO_Registra_Attivita = vRitPar
        On Error Resume Next
        If Not DB Is Nothing And IsNothing(DBChiamante) Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

RollTrans:
        If AvviaTransazione Then
            If Not DB Is Nothing Then
                Call DB.RollTrans()
                If DB.errore <> 0 Then
                    Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
                End If
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Function

    Friend Function FO_Registra_Attivita_new(ByVal vParm As Object, ByRef trans As SqlTransaction) As Object
        Const SFunzione As String = "FO_Registra_Attivita"
        Dim vRitPar(3) As Object
        Dim Sqlq As String

        Dim idDocumentoLocale As String = ""
        Dim progAttivita As Integer
        Dim dataAttivita As DateTime
        Dim tipoAttivita As String
        Dim infoAttivita As String
        Dim idAllegato As String
        Dim oAttore As DllAmbiente.Operatore
        Dim livelloUfficio As String
        Dim livelloRuoloUfficio As String



        vRitPar(0) = 0
        vRitPar(1) = ""
        Log.Info("***INIZIO " & SFunzione & " IdDocumento: " & vParm(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) & " tipoAttivita: " & vParm(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) & " " & Now)

        idDocumentoLocale = vParm(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) & ""
        '  utente.Codice = vParm(Dic_FODocumentale.vc_Registra_Attivita.c_utente) & ""
        If IsDate(vParm(Dic_FODocumentale.vc_Registra_Attivita.c_data)) Then
            dataAttivita = CDate(vParm(Dic_FODocumentale.vc_Registra_Attivita.c_data))
        Else
            dataAttivita = Now
        End If
        tipoAttivita = vParm(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita)
        infoAttivita = vParm(Dic_FODocumentale.vc_Registra_Attivita.c_info_attivita) & ""
        idAllegato = vParm(Dic_FODocumentale.vc_Registra_Attivita.c_id_allegato) & ""
        livelloUfficio = vParm(Dic_FODocumentale.vc_Registra_Attivita.c_livelloufficio) & ""
        livelloRuoloUfficio = vParm(Dic_FODocumentale.vc_Registra_Attivita.c_livelloRuoloufficio) & ""

        If String.IsNullOrEmpty(livelloUfficio) Or String.IsNullOrEmpty(livelloUfficio) Then
            Dim objStato As DllDocumentale.StatoIstanzaDocumentoInfo = Get_StatoIstanzaDocumento(idDocumentoLocale)
            livelloUfficio = objStato.LivelloUfficio
            livelloRuoloUfficio = objStato.Ruolo
        End If
        If Trim(idDocumentoLocale) = "" Or Trim(oOperatore.Codice) = "" Then
            vRitPar(0) = 1
            vRitPar(1) = "Parametri insufficienti, " + SFunzione
            FO_Registra_Attivita_new = vRitPar
            Exit Function

        End If

        Log.Info("***INIZIO FO_Registra_Attivita_new - idDocumento: " & vParm(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) & " tipoAttivita: " & tipoAttivita & " - " & Now)


        Sqlq = " update Azioni_Utente_Documento set  Sto_attivita_corrente=0  WHERE Sto_id_Doc = '" & idDocumentoLocale & "';  "

        Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, Sqlq, Nothing)
        Sqlq = "  SELECT     max (Sto_Prog) + 1 " &
           "        " &
           " FROM         Azioni_Utente_Documento " &
           " WHERE Sto_id_Doc = '" & idDocumentoLocale & "' "

        Using rdr As SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(trans, CommandType.Text, Sqlq, Nothing)
            While rdr.Read()
                progAttivita = rdr(0)
            End While

        End Using

        Dim attivitaCorrente As Integer = 0

        Dim utente2 As Object = oOperatore.Codice
        Dim ufficio2 As Object = oOperatore.oUfficio.CodUfficio


        If (tipoAttivita = "INOLTRO") Or (tipoAttivita = "ASSEGNA") Or (tipoAttivita = "RIGETTO") Then
            attivitaCorrente = 0
        Else
            attivitaCorrente = 1
        End If

        If String.IsNullOrEmpty(pDescrizioneAttore) Then
            pDescrizioneAttore = vParm(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) & ""
        End If

        Dim sqlInsert As String = " INSERT INTO [Azioni_Utente_Documento] " &
                "([Sto_id_Doc],[Sto_Prog],[Sto_Utente],[Sto_Ufficio],[Sto_Data],[Sto_TipoAttivita],[Sto_Info_Attivita]  ,[Sto_attivita_corrente],[Sto_idAllegato],[Sto_Nominativo], [Sto_Livello], [Sto_Ruolo]) " &
        "  VALUES ('" & idDocumentoLocale & "','" & progAttivita & "','" & utente2 & "','" & ufficio2 & "',@data,'" & tipoAttivita & "','" & infoAttivita & "','" & attivitaCorrente & "','" & idAllegato & "','" & pDescrizioneAttore.ToString().Replace("'", "''") & "','" & livelloUfficio & "','" & livelloRuoloUfficio & "')"

        Dim parms(0) As SqlParameter

        parms(0) = New SqlParameter("@data", SqlDbType.DateTime)
        parms(0).Value = dataAttivita


        Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sqlInsert, parms)

        If (tipoAttivita = "INOLTRO") Or (tipoAttivita = "ASSEGNA") Or (tipoAttivita = "RIGETTO") Then



            progAttivita = progAttivita + 1
            If pDirU <> "D" Then
                oAttore = New DllAmbiente.Operatore
                oAttore.Codice = pProssimoAttore
                utente2 = oAttore.Codice
                ufficio2 = oAttore.oUfficio.CodUfficio
                tipoAttivita = "ARRIVOWL"
            Else
                utente2 = pProssimoAttore
                ufficio2 = pProssimoAttore
                tipoAttivita = "ARRIVOUF"
            End If



            attivitaCorrente = 1

            Dim sqlInsert2 As String = " INSERT INTO [Azioni_Utente_Documento] " &
               "([Sto_id_Doc],[Sto_Prog],[Sto_Utente],[Sto_Ufficio],[Sto_Data],[Sto_TipoAttivita],[Sto_Info_Attivita]  ,[Sto_attivita_corrente],[Sto_idAllegato],[Sto_Nominativo]) " &
       "  VALUES ('" & idDocumentoLocale & "','" & progAttivita & "','" & utente2 & "','" & ufficio2 & "',@data,'" & tipoAttivita & "','" & infoAttivita & "','" & attivitaCorrente & "','" & idAllegato & "','" & pDescrizioneProssimoAttore.ToString().Replace("'", "''") & "')"


            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sqlInsert2, parms)



        End If

        vRitPar(0) = 0
        vRitPar(1) = ""


        FO_Registra_Attivita_new = vRitPar
        Log.Info("***FINE " & SFunzione & " IdDocumento: " & vParm(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) & " tipoAttivita: " & vParm(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) & " - " & Now)



        ' Resume
    End Function
    Function FO_Get_Ultima_Azione_Utente_Documento(ByVal codDocumento As String, Optional ByVal trans As SqlTransaction = Nothing) As ItemAzioneUtenteDocumento
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim itemAzioneUtenteDoc As ItemAzioneUtenteDocumento = Nothing
        Dim chiudereConn As Boolean = False
        Try

            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
            End If

            Dim Sqlq As String = ""
            Sqlq = "SELECT     Sto_id_Doc, Sto_Prog, Sto_Utente, Sto_Ufficio,  " &
            " Sto_Data, Sto_TipoAttivita, Sto_Info_Attivita, Sto_attivita_corrente, Sto_idAllegato, " &
            " Sto_Nominativo, Sto_Livello, Sto_Ruolo, Sto_note " &
            " FROM Azioni_Utente_Documento " &
            " WHERE     Sto_id_Doc = " & param_id_Documento & "  AND Sto_attivita_corrente = 1 "


            Dim param() As SqlClient.SqlParameter


            ReDim Preserve param(0)
            Dim par As New SqlClient.SqlParameter(param_id_Documento, SqlDbType.VarChar)
            par.Value = codDocumento
            param(0) = par
            Dim rdr As SqlClient.SqlDataReader
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(trans, CommandType.Text, Sqlq, param)


            While rdr.Read()
                itemAzioneUtenteDoc = New ItemAzioneUtenteDocumento
                itemAzioneUtenteDoc.Sto_id_Doc = rdr.GetString(0)
                itemAzioneUtenteDoc.Sto_Prog = rdr.GetInt32(1)
                If Not rdr.IsDBNull(2) Then itemAzioneUtenteDoc.Sto_Utente = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then itemAzioneUtenteDoc.Sto_Ufficio = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then itemAzioneUtenteDoc.Sto_Data = rdr.GetDateTime(4)
                If Not rdr.IsDBNull(5) Then itemAzioneUtenteDoc.Sto_TipoAttivita = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then itemAzioneUtenteDoc.Sto_Info_Attivita = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then itemAzioneUtenteDoc.Sto_attivita_corrente = rdr.GetByte(7)
                If Not rdr.IsDBNull(8) Then itemAzioneUtenteDoc.Sto_idAllegato = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then itemAzioneUtenteDoc.Sto_Nominativo = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then itemAzioneUtenteDoc.Sto_Livello = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then itemAzioneUtenteDoc.Sto_Ruolo = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then itemAzioneUtenteDoc.Sto_note = rdr.GetString(12)

            End While
            rdr.Close()


            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante la cancellazione delle informazione sulla seduta e sui relatori - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
        Return itemAzioneUtenteDoc
    End Function
    Sub FO_Delete_Ultima_Azione_Utente_Documento(ByVal codDocumento As String, Optional ByVal trans As SqlTransaction = Nothing)
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim sql_Delete_UltimaAzioneDocumento As String = "DELETE FROM [Azioni_Utente_Documento] " &
        "WHERE [Sto_id_Doc] = @IdDocumento and Sto_Prog = (select max(Sto_Prog)  from dbo.Azioni_Utente_Documento WHERE [Sto_id_Doc] = @IdDocumento) and Sto_attivita_corrente = 1 "

        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
            End If

            Dim parms(0) As SqlParameter
            parms(0) = New SqlParameter("@IdDocumento", SqlDbType.VarChar)
            parms(0).Value = codDocumento

            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Delete_UltimaAzioneDocumento, parms, -1)

            Dim sql_Update_UltimaAzioneDocumento As String = "UPDATE [Azioni_Utente_Documento] " &
             " SET Sto_attivita_corrente = 1" &
                "WHERE [Sto_id_Doc] = " & param_id_Documento & " and Sto_Prog = (select max(Sto_Prog) " &
                                                            " from dbo.Azioni_Utente_Documento WHERE [Sto_id_Doc] = " & param_id_Documento & ")  "


            Dim parmeters(0) As SqlParameter
            parmeters(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
            parmeters(0).Value = codDocumento

            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Update_UltimaAzioneDocumento, parmeters, -1)

            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante la cancellazione delle informazione sulla seduta e sui relatori - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub

    Sub FO_Update_Ultima_Azione_Utente_Documento_Firma(ByVal codDocumento As String)
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim trans As SqlTransaction = Nothing
        Try
            conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
            conn.Open()
            trans = conn.BeginTransaction

            Dim sql_Update_UltimaAzioneDocumento As String = "UPDATE [Azioni_Utente_Documento] " &
             " SET Sto_TipoAttivita = 'FIRMA_' " &
                "WHERE [Sto_id_Doc] = " & param_id_Documento & " and Sto_TipoAttivita = 'FIRMA' AND Sto_Prog = (select max(Sto_Prog) " &
                                                            " from dbo.Azioni_Utente_Documento WHERE [Sto_id_Doc] = " & param_id_Documento & ")  "


            Dim parmeters(0) As SqlParameter
            parmeters(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
            parmeters(0).Value = codDocumento

            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Update_UltimaAzioneDocumento, parmeters, -1)

            trans.Commit()

        Catch ex As Exception
            Log.Error(Now & " - Errore durante update della record di firma in Azione_Utente_Documento con Sto_TipoAttivita modificato con FIRMA_ per far ritentare all'utente la firma e la marca - " & ex.Message)
            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw ex
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try
    End Sub
    Friend Function FO_Elenco_Monitor(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Elenco_Monitor"
        Dim vRitPar(3) As Object
        Dim Sqlq As String
        Dim sWhere As String
        Dim vP(2) As Object

        Dim tipoDocumenti As String
        Dim tipoData As Integer = 1
        Dim data_inizio As String = ""
        Dim data_fine As String = ""
        Dim oggetto As String
        Dim cod_ufficio As String
        Dim descr_ufficio As String
        Dim cod_dip As String
        Dim num_doc As String
        Dim visualizzaLaTipRigetto As String
        Dim tipologiaRicercaBeneficiario As String
        Dim beneficiario As String
        Dim tipologiaRicercaDestinatario As String
        Dim destinatario As String
        Dim codiceCUP As String
        Dim codiceCIG As String
        Dim idTipologiaDocumentoTrasp As Integer = -1
        Dim autorizzazionePubblicazione As String = ""


        Dim v_Uffici_consultabili As Object
        Dim uffici_consultabili As String = ""
        Dim dipartimenti_consultabili As String = ""
        Dim enti_consultabili As String = ""


        If Not vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_uffici_consultabili) Is Nothing Then
            v_Uffici_consultabili = vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_uffici_consultabili)
            Dim e As Integer
            Dim tipologia As String
            Dim ufficio As New DllAmbiente.Ufficio
            For e = 0 To UBound(DirectCast(v_Uffici_consultabili, Array))
                tipologia = ufficio.leggiTipologiaUfficio(DirectCast(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_uffici_consultabili), Array)(e))
                If UCase(tipologia) = "DIP" Then
                    dipartimenti_consultabili = dipartimenti_consultabili & DirectCast(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_uffici_consultabili), Array)(e) & "' , '"
                ElseIf UCase(tipologia) = "UFF" Then
                    uffici_consultabili = uffici_consultabili & DirectCast(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_uffici_consultabili), Array)(e) & "' , '"
                ElseIf UCase(tipologia) = "ENTE" Then
                    enti_consultabili = enti_consultabili & DirectCast(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_uffici_consultabili), Array)(e) & "' , '"
                End If
            Next
        End If

        If uffici_consultabili.EndsWith("' , '") Then
            uffici_consultabili = uffici_consultabili.Remove(uffici_consultabili.LastIndexOf("' , '"), 5)
        End If

        If dipartimenti_consultabili.EndsWith("' , '") Then
            dipartimenti_consultabili = dipartimenti_consultabili.Remove(dipartimenti_consultabili.LastIndexOf("' , '"), 5)
        End If

        If enti_consultabili.EndsWith("' , '") Then
            enti_consultabili = enti_consultabili.Remove(enti_consultabili.LastIndexOf("' , '"), 5)
        End If

        ' utente.Codice = vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_utente)
        If IsNumeric(vParm(vc_Elenco_Monitor.c_tipoDocumento)) Then
            tipoDocumenti = vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_tipoDocumento) & ""
        Else
            tipoDocumenti = -1
        End If

        If IsDate(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_data_inizio)) Then
            data_inizio = Trim(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_data_inizio) & "")
        End If
        If IsDate(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_data_fine)) Then
            data_fine = Trim(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_data_fine) & "")
        End If
        oggetto = Trim(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_oggetto) & "")
        cod_ufficio = Trim(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_cod_ufficio) & "")
        descr_ufficio = Trim(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_descr_ufficio) & "")
        cod_dip = Trim(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_cod_dip) & "")
        num_doc = Trim(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_numero_doc) & "")
        visualizzaLaTipRigetto = Trim(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_tipo_Rigetto) & "")
        tipologiaRicercaBeneficiario = Trim(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_tipologia_ricerca_beneficiario) & "")
        beneficiario = Trim(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_beneficiario) & "")
        codiceCUP = Trim(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_codiceCUP) & "")
        codiceCIG = Trim(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_codiceCIG) & "")
        idTipologiaDocumentoTrasp = vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_id_tipologia_documento)
        autorizzazionePubblicazione = vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_autorizzazione_pubblicazione)
        tipologiaRicercaDestinatario = Trim(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_tipologia_ricerca_destinatario) & "")
        destinatario = Trim(vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_destinatario) & "")
        tipoData = vParm(Dic_FODocumentale.vc_Elenco_Monitor.c_tipo_data & "")

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If


        Dim sqlReplaceOggetto As String = "cast(isnull(Documento.Doc_Oggetto,'') as varchar(8000) )"
        Dim codice As String = ""
        Dim carattere As String = ""
        sqlReplaceOggetto = ReplaceCaratteriTramiteSQL(sqlReplaceOggetto)
        Dim subSqlSelec As String = "Select Doc_Id,Doc_numero,ISNULL(Doc_Oggetto, '' ) as Doc_Oggetto,corUtente,(case when (attivita= 'ANNULLO') then 'ANNULLATO' else nominativo end) as nominativo,descCorAttivita,l,Doc_numeroOrdine,Doc_data FROM ("

        Dim sqlDataInizioQuery As String = ""
        If tipoData <> 2 Then
            If data_inizio <> "" Then
                sqlDataInizioQuery = " AND  ( Doc_Data >= CONVERT(DATETIME, '" & Format(CDate(data_inizio), "yyyy-MM-dd") & " 00:00:00',102)) "
            End If
        End If
        Sqlq = "SELECT  DISTINCT   Documento.Doc_Id,( case when ISNULL(Doc_numero,'')= '' then Doc_numeroProvvisorio else Doc_numero + ' ex_' + Doc_numeroProvvisorio end) as Doc_numero, dbo.fn_ReplaceCaratteriSpeciali(ISNULL(Doc_Oggetto, '' )) as Doc_Oggetto," &
               "            Ultima_Attivita_Doc.corUtente, " &
               " case when Ultima_Attivita_Doc.Nominativo ='' then isnull(Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome,Struttura.Str_descrizione) else " &
               " isnull(Ultima_Attivita_Doc.Nominativo, isnull(Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome,Struttura.Str_descrizione) ) end  as nominativo, " &
               "           Ultima_Attivita_Doc.descCorAttivita, '' as l,Doc_numero as Doc_numeroOrdine,Doc_data, Ultima_Attivita_Doc.attivita as attivita " &
               " FROM Documento " &
               "          INNER JOIN Azioni_Utente_Documento ON Documento.Doc_Id = Azioni_Utente_Documento.Sto_id_Doc " &
               "          INNER JOIN Tab_Tipo_Attivita_Documento ON Azioni_Utente_Documento.Sto_TipoAttivita = Tab_Tipo_Attivita_Documento.Sta_id " &
               "          INNER JOIN (SELECT DISTINCT Documento.Doc_Id as corIdDoc, Azioni_Utente_Documento.Sto_Utente as corUtente, Tab_Tipo_Attivita_Documento.Sta_Descrizione as descCorAttivita, Azioni_Utente_Documento.Sto_Tipoattivita AS Attivita, Azioni_Utente_Documento.Sto_Nominativo as nominativo " &
               "                           FROM Azioni_Utente_Documento  " &
               "                                INNER JOIN Documento ON Azioni_Utente_Documento.Sto_id_Doc = Documento.Doc_Id " &
               "                                INNER JOIN Tab_Tipo_Attivita_Documento ON Azioni_Utente_Documento.Sto_TipoAttivita = Tab_Tipo_Attivita_Documento.Sta_id " &
               "                                WHERE     (Azioni_Utente_Documento.Sto_attivita_corrente = 1)  " & sqlDataInizioQuery & " and (Azioni_Utente_Documento.Sto_TipoAttivita <> 'VISUALDOC') " &
               "  ) as Ultima_Attivita_Doc ON Documento.Doc_Id = corIdDoc " &
               "          LEFT OUTER JOIN Tab_Operatori ON Ultima_Attivita_Doc.corUtente = Tab_Operatori.Op_Codice_Operatore " &
               "          LEFT OUTER JOIN Struttura ON Ultima_Attivita_Doc.corUtente = Struttura.Str_id    "


        sWhere = " WHERE     "

        If Not String.IsNullOrEmpty(beneficiario) Then
            sWhere = sWhere & " Documento.Doc_Id IN ( SELECT Id_Documento FROM Documento_Liquidazione_Beneficiario ben WHERE "

            If (tipologiaRicercaBeneficiario = "DenominazioneBeneficiario") Then
                sWhere = sWhere & "ben.Denominazione like '%" & Trim(beneficiario) & "%'"
            ElseIf (tipologiaRicercaBeneficiario = "CFBeneficiario") Then
                sWhere = sWhere & "ben.CodiceFiscale = '" & Trim(beneficiario) & "'"
            ElseIf (tipologiaRicercaBeneficiario = "PIVABeneficiario") Then
                sWhere = sWhere & "ben.Partita_Iva = '" & Trim(beneficiario) & "'"
            ElseIf (tipologiaRicercaBeneficiario = "CodiceSICBeneficiario") Then
                sWhere = sWhere & "ben.ID_anagrafica = '" & Trim(beneficiario) & "'"
            End If

            sWhere = sWhere & ") AND "
        End If

        If Not String.IsNullOrEmpty(destinatario) Then
            sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") &
                "  ( Documento.Doc_Id IN (SELECT IdDocumento FROM Documento_Destinatari dest WHERE "

            If (tipologiaRicercaDestinatario = "DenominazioneDestinatario") Then
                sWhere = sWhere & "dest.Denominazione like '%" & Trim(destinatario) & "%'"
            ElseIf (tipologiaRicercaDestinatario = "CFDestinatario") Then
                sWhere = sWhere & "dest.CodiceFiscale = '" & Trim(destinatario) & "'"
            ElseIf (tipologiaRicercaDestinatario = "PIVADestinatario") Then
                sWhere = sWhere & "dest.PartitaIva = '" & Trim(destinatario) & "'"
            ElseIf (tipologiaRicercaDestinatario = "CodiceSICDestinatario") Then
                sWhere = sWhere & "dest.IdSIC = '" & Trim(destinatario) & "'"
            End If

            sWhere = sWhere & ")) AND "
        End If

        If Not String.IsNullOrEmpty(codiceCUP) Or Not String.IsNullOrEmpty(codiceCIG) Then
            If Not String.IsNullOrEmpty(codiceCUP) Then
                sWhere = sWhere & " Documento.Doc_Id IN ( SELECT Doc_Id FROM Documento_Attributo docAttribs WHERE "
                sWhere = sWhere & "docAttribs.Valore = '" & Trim(codiceCUP) & "' AND docAttribs.Cod_Attributo = 'CUP'"
                sWhere = sWhere & ") AND "
            End If

            If Not String.IsNullOrEmpty(codiceCIG) Then
                sWhere = sWhere & " Documento.Doc_Id IN ( SELECT Doc_Id FROM Documento_Attributo docAttribs WHERE "
                sWhere = sWhere & "docAttribs.Valore = '" & Trim(codiceCIG) & "' AND docAttribs.Cod_Attributo = 'CIG'"
                sWhere = sWhere & ") AND "
            End If
        End If


        sWhere = sWhere & " (Tab_Tipo_Attivita_Documento.Sta_monitor = 1) AND  (Doc_Tipo = '" & tipoDocumenti & "') "
        If uffici_consultabili = "" And dipartimenti_consultabili = "" And enti_consultabili = "" Then
            'PRENDO SOLO I DOCUMENTI CHE HO LAVORATO
            sWhere = sWhere & " AND (Azioni_Utente_Documento.Sto_Utente = '" & oOperatore.Codice & "') "
        Else
            If dipartimenti_consultabili <> "" And uffici_consultabili <> "" Then
                'SE HO VISIBILITà SU DIPARTIMENTO E UFFICIO
                sWhere = sWhere & " AND ((not documento.doc_numero is null) OR  (Documento.Doc_Cod_Uff_Prop IN ('" & uffici_consultabili & "')) )  "
            Else
                If dipartimenti_consultabili <> "" Then
                    'se ha visibilità su intero dipartimento mostro solo quelle con numero definitivo
                    sWhere = sWhere & " AND (not documento.doc_numero is null)   "
                ElseIf uffici_consultabili <> "" Then
                    'SE POSSO VEDERE SOLO IL MIO UFFICIO, PROVVISORI E NON 
                    sWhere = sWhere & " AND (Documento.Doc_Cod_Uff_Prop IN ('" & uffici_consultabili & "'))  "
                End If
            End If
        End If

        If tipoDocumenti = 1 Then
            Sqlq = Sqlq & " LEFT join Documento_Dati_Seduta as seduta on Doc_Id = seduta.Dds_doc_id "
        End If
        If tipoData <> 2 Then
            If data_inizio <> "" Then
                sWhere = sWhere & " AND  ( Doc_Data >= CONVERT(DATETIME, '" & Format(CDate(data_inizio), "yyyy-MM-dd") & " 00:00:00',102) ) "
            End If
            If data_fine <> "" Then
                sWhere = sWhere & " AND  ( Doc_Data <= CONVERT(DATETIME, '" & Format(CDate(data_fine), "yyyy-MM-dd") & " 23:59:59',102) ) "
            End If
        Else
            If data_inizio <> "" Then
                sWhere = sWhere & " AND  ( Dds_DataSeduta >= CONVERT(DATETIME, '" & Format(CDate(data_inizio), "yyyy-MM-dd") & " 00:00:00',102) ) "
            End If
            If data_fine <> "" Then
                sWhere = sWhere & " AND  ( Dds_DataSeduta <= CONVERT(DATETIME, '" & Format(CDate(data_fine), "yyyy-MM-dd") & " 23:59:59',102) ) "
            End If
        End If

        Dim queryoggetto As String = SplitStringOggettoDoc_Oggetto(oggetto)
        If queryoggetto <> "" Then
            sWhere = sWhere & IIf(Trim(sWhere) = "", " WHERE ", " AND ") & " ( " & queryoggetto & " ) "
        End If

        If cod_ufficio <> "" Or descr_ufficio <> "" Or cod_dip <> "" Or enti_consultabili <> "" Then
            Sqlq = Sqlq & " left OUTER  join Struttura as uffProp on Doc_Cod_Uff_Prop = uffProp.Str_id COLLATE Sql_latin1_general_cp1_ci_as "
        End If

        If enti_consultabili <> "" Then
            sWhere = sWhere & " and ( uffProp.Str_radice in ('" & enti_consultabili & "')) "
        End If
        If cod_ufficio <> "" Then
            sWhere = sWhere & " AND   ( uffProp.Str_id = '" & cod_ufficio & "' ) "
        End If
        If descr_ufficio <> "" Then
            sWhere = sWhere & " AND  ( uffProp.Str_descrizione like '%" & descr_ufficio & "%' ) "
        End If

        If cod_dip <> "" Then
            sWhere = sWhere & " AND   ( uffProp.Str_padre  = '" & cod_dip & "' ) "
        End If

        If num_doc <> "" Then
            sWhere = sWhere & IIf(Trim(sWhere) = "", " WHERE ", " AND ") & "  ( ( Doc_numero like '%" & num_doc & "%' or Doc_numeroProvvisorio like '%" & num_doc & "%' )) "
        End If

        If idTipologiaDocumentoTrasp > -1 Then
            Dim sqlTipologia As String = "( Documento.Doc_Id IN (SELECT id_documento FROM Documento_Tipologia doc_tipologia WHERE "
            If idTipologiaDocumentoTrasp > -1 Then
                sqlTipologia = sqlTipologia & IIf(Trim(sqlTipologia).EndsWith("WHERE"), " ", " AND ") &
                    " doc_tipologia.id_tipologia_provvedimento = '" & idTipologiaDocumentoTrasp & "'"
            End If
            sqlTipologia = sqlTipologia & ")) "
            sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & sqlTipologia
        End If

        If autorizzazionePubblicazione = "True" Or autorizzazionePubblicazione = "False" Then
            Dim sqlTrasp As String = "( Documento.Doc_Id IN (SELECT id_documento FROM Trasparenza doc_trasp WHERE "
            sqlTrasp = sqlTrasp & IIf(Trim(sqlTrasp).EndsWith("WHERE"), " ", " AND ") &
                " doc_trasp.autorizzazione_pubblicazione = '" & autorizzazionePubblicazione & "'"
            sqlTrasp = sqlTrasp & ")) "
            sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & sqlTrasp
        ElseIf autorizzazionePubblicazione = "NonSpecificato" Then
            Dim sqlTrasp As String = "( Documento.Doc_Id NOT IN (SELECT id_documento FROM Trasparenza doc_trasp  "
            sqlTrasp = sqlTrasp & ")) "
            sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & sqlTrasp
        End If

        If sWhere.StartsWith(" AND") Then
            sWhere = " WHERE " & sWhere.Substring(4)
        End If


        Dim lstrOrderBy As String = "" & oOperatore.Attributo("ORDER_ELENCO_DOCUMENTIMONITOR")

        subSqlSelec = subSqlSelec & Sqlq & sWhere & " ) as monitor  "

        If lstrOrderBy = "" Then
            subSqlSelec = subSqlSelec & " ORDER BY  CAST(RIGHT(Doc_numeroOrdine, 5) as int) ASC,  doc_id asc, Doc_data DESC, LEFT(Doc_numeroOrdine, 4) ASC"
        Else
            subSqlSelec = subSqlSelec & " ORDER BY " & lstrOrderBy
        End If

        Sqlq = subSqlSelec
        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)


        Dim contaRighe As Integer = 0
        'Dim arr(8, contaRighe) As Object
        Dim arr(11, contaRighe) As Object
        Try
            'While (rdr.Read())
            '    ReDim Preserve arr(8, contaRighe)

            '    For col As Integer = 0 To 8
            '        arr(col, contaRighe) = rdr(col)
            '    Next
            '    contaRighe = contaRighe + 1

            'End While
            Dim flagEliminaUltimo As Boolean = False

            While (rdr.Read())
                flagEliminaUltimo = False
                ReDim Preserve arr(11, contaRighe)

                For col As Integer = 0 To 8
                    arr(col, contaRighe) = rdr(col)
                Next

                arr(9, contaRighe) = ""
                arr(10, contaRighe) = ""
                arr(11, contaRighe) = ""



                Dim listaInoltriRigettiUffici As IList = UltimeOperazioniInoltroRigetto(arr(0, contaRighe))
                For Each Item As Object In listaInoltriRigettiUffici
                    Select Case CStr(Item(0))
                        Case "UFFICIO_DIRIGENZA_DIPARTIMENTO"
                            arr(9, contaRighe) = "'./risorse/immagini/" & getImageWorklist(Item(1))
                        Case "UFFICIO_CONTROLLO_AMMINISTRATIVO"
                            arr(10, contaRighe) = "'./risorse/immagini/" & getImageWorklist(Item(1))
                        Case "UFFICIO_RAGIONERIA"
                            arr(11, contaRighe) = "'./risorse/immagini/" & getImageWorklist(Item(1))

                    End Select

                Next

                Select Case visualizzaLaTipRigetto
                    Case ""
                        contaRighe += 1
                    Case "UDD"
                        If arr(9, contaRighe).Contains(getImageWorklist("RIGETTO")) Then
                            contaRighe += 1
                        Else
                            flagEliminaUltimo = True
                        End If
                    Case "UCA"
                        If arr(10, contaRighe).Contains(getImageWorklist("RIGETTO")) Then
                            contaRighe += 1
                        Else
                            flagEliminaUltimo = True
                        End If
                    Case "UR"
                        If arr(11, contaRighe).Contains(getImageWorklist("RIGETTO")) Then
                            contaRighe += 1
                        Else
                            flagEliminaUltimo = True
                        End If


                End Select
            End While

            rdr.Close()
            rdr = Nothing
            If flagEliminaUltimo Then
                contaRighe -= 1
                ReDim Preserve arr(11, contaRighe)

            End If
            vRitPar(0) = IIf(contaRighe > 0, 0, 1)
            vRitPar(1) = IIf(contaRighe > 0, arr, "Nessun Record Trovato")

        Catch ex As Exception
            contaRighe = 0
            rdr = Nothing
            vRitPar(0) = 9999
            vRitPar(1) = ex.Message
        End Try



        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        End If

        FO_Elenco_Monitor = vRitPar


    End Function

    Function ReplaceCaratteriTramiteSQL(ByVal valore As String) As String
        Dim codice As String = ""
        Dim carattere As String = ""



        codice = "&amp;"
        carattere = Chr(38)
        valore = "Replace(" & valore & ",'" & codice & "','" & carattere & "') "

        codice = "&aps;"
        carattere = Chr(39) & Chr(39)
        valore = "Replace(" & valore & ",'" & codice & "','" & carattere & "') "

        codice = "&gt;"
        carattere = Chr(62)
        valore = "Replace(" & valore & ",'" & codice & "','" & carattere & "') "

        codice = "&lt;"
        carattere = Chr(60)
        valore = "Replace(" & valore & ",'" & codice & "','" & carattere & "') "

        codice = "&quot;"
        carattere = Chr(34)
        valore = "Replace(" & valore & ",'" & codice & "','" & carattere & "') "



        Return valore
    End Function
    Friend Function FO_Storico_Documento(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Storico_Documento"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        Dim utenteCorrente As String
        Dim codUffProponente As String = ""
        Dim datainizio As DateTime
        Dim pdatainizio As Integer
        Dim datafine As DateTime
        Dim i As Integer

        On Error GoTo Herr

        idDocumento = vParm(Dic_FODocumentale.vc_Storico_Documento.c_idDocumento)
        codUffProponente = vParm(Dic_FODocumentale.vc_Storico_Documento.c_codUfficioProponente)
        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
            GoTo FineSub
        End If

        Select Case oOperatore.oUfficio.CodUfficio
            Case oOperatore.oUfficio.CodUfficioRagioneria
                'NON DEVO VISUALIZZARE I DOCUMENTI
                ' eliminta"                       ISNULL(Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome, isnull(Struttura_Attributi.Sta_valore, Struttura.Str_descrizione)) AS Nominativo, " & _
                Sqlq = "SELECT     CONVERT(varchar(10), V_Azioni_Utente_Documento.Sto_Data, 103) AS Expr1, V_Azioni_Utente_Documento.Sto_Utente, Struttura.Str_codiceUtente, " &
             " case when V_Azioni_Utente_Documento.Sto_Nominativo ='' then ISNULL(Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome, isnull(Struttura_Attributi.Sta_valore, Struttura.Str_descrizione))  else " &
             " isnull(V_Azioni_Utente_Documento.Sto_Nominativo, ISNULL(Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome, isnull(Struttura_Attributi.Sta_valore, Struttura.Str_descrizione))  ) end  as Nominativo, " &
             "                      Tab_Tipo_Attivita_Documento.Sta_immagine," &
             " CASE WHEN Tab_Tipo_Attivita_Documento.Sta_Id like 'CANC%' or Tab_Tipo_Attivita_Documento.Sta_Id like 'ALLE%' then Tab_Tipo_Attivita_Documento.Sta_Descrizione + ': ' + Allegati.All_nome else Tab_Tipo_Attivita_Documento.Sta_Descrizione end as Sta_Descrizione," &
             "  CONVERT(varchar(10), " &
             "                       V_Azioni_Utente_Documento.Sto_Data, 103) AS tempoLavorazione, V_Azioni_Utente_Documento.Sto_idAllegato , case when Allegati.All_firmato = 1 then V_Azioni_Utente_Documento.Sto_idAllegato else '' end , " &
             "       Tab_Tipo_Attivita_Documento.Sta_id " &
             " FROM         Struttura_Attributi RIGHT OUTER JOIN " &
             "                       Struttura ON Struttura_Attributi.Sta_id = Struttura.Str_id and (Struttura_Attributi.Sta_attributo = 'DESCR_BREVE')  RIGHT OUTER JOIN " &
             "                       V_Azioni_Utente_Documento INNER JOIN " &
             "                       Tab_Tipo_Attivita_Documento ON V_Azioni_Utente_Documento.Sto_TipoAttivita = Tab_Tipo_Attivita_Documento.Sta_id LEFT OUTER JOIN " &
             "                       Tab_Operatori ON V_Azioni_Utente_Documento.Sto_Utente = Tab_Operatori.Op_Codice_Operatore  LEFT OUTER JOIN " &
             "                       Allegati ON V_Azioni_Utente_Documento.Sto_idAllegato = Allegati.All_idAllegato ON " &
             "                      Struttura.Str_id = V_Azioni_Utente_Documento.Sto_Ufficio " &
             " WHERE     (Tab_Tipo_Attivita_Documento.Sta_visualizza = 1) AND (V_Azioni_Utente_Documento.Sto_id_Doc = '" & idDocumento & "') AND (Tab_Tipo_Attivita_Documento.Sta_id <> 'DOCUMENTO') " &
             " ORDER BY Sto_Prog "


            Case codUffProponente
                'eliminata                 "ISNULL(Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome, ISNULL(Struttura_Attributi.Sta_valore, Struttura.Str_descrizione)) AS Nominativo, " & _
                Sqlq = " SELECT     Expr1, Sto_Utente, Str_codiceUtente, Nominativo, Sta_immagine, Sta_Descrizione, tempoLavorazione, Sto_idAllegato, Expr2, Sta_id                                                 " &
                " FROM         (SELECT     CONVERT(varchar(10), V_Azioni_Utente_Documento.Sto_Data, 103) AS Expr1, V_Azioni_Utente_Documento.Sto_Utente,                                                         " &
                "                                               Struttura.Str_codiceUtente, " &
                " case when V_Azioni_Utente_Documento.Sto_Nominativo ='' then ISNULL(Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome, isnull(Struttura_Attributi.Sta_valore, Struttura.Str_descrizione))  else " &
                " isnull(V_Azioni_Utente_Documento.Sto_Nominativo, ISNULL(Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome, isnull(Struttura_Attributi.Sta_valore, Struttura.Str_descrizione))  ) end  as Nominativo, " &
                " Tab_Tipo_Attivita_Documento.Sta_immagine," &
                " CASE WHEN Tab_Tipo_Attivita_Documento.Sta_Id like 'CANC%' or Tab_Tipo_Attivita_Documento.Sta_Id like 'ALLE%' or Tab_Tipo_Attivita_Documento.Sta_Id like 'DOCUMENTO' then Tab_Tipo_Attivita_Documento.Sta_Descrizione + ': ' + Allegati.All_nome else Tab_Tipo_Attivita_Documento.Sta_Descrizione end as Sta_Descrizione," &
                "                                               CONVERT(varchar(10), V_Azioni_Utente_Documento.Sto_Data, 103) AS tempoLavorazione, V_Azioni_Utente_Documento.Sto_idAllegato,                     " &
                "                                               CASE WHEN Allegati.All_firmato = 1 THEN V_Azioni_Utente_Documento.Sto_idAllegato ELSE '' END AS Expr2,                                         " &
                "                                               Tab_Tipo_Attivita_Documento.Sta_id, V_Azioni_Utente_Documento.Sto_Prog                                                                         " &
                "                        FROM          Struttura_Attributi RIGHT OUTER JOIN                                                                                                                  " &
                "                                               Struttura ON Struttura_Attributi.Sta_id = Struttura.Str_id AND Struttura_Attributi.Sta_attributo = 'DESCR_BREVE' RIGHT OUTER JOIN            " &
                "                                               V_Azioni_Utente_Documento INNER JOIN                                                                                                           " &
                "                                               Tab_Tipo_Attivita_Documento ON V_Azioni_Utente_Documento.Sto_TipoAttivita = Tab_Tipo_Attivita_Documento.Sta_id LEFT OUTER JOIN                 " &
                "                                               Tab_Operatori ON                                                                                                                             " &
                "                                               V_Azioni_Utente_Documento.Sto_Utente = Tab_Operatori.Op_Codice_Operatore  LEFT OUTER JOIN                          " &
                "                                               Allegati ON V_Azioni_Utente_Documento.Sto_idAllegato = Allegati.All_idAllegato ON                                 " &
                "                                               Struttura.Str_id = V_Azioni_Utente_Documento.Sto_Ufficio                                                                                       " &
                "                        WHERE      (Tab_Tipo_Attivita_Documento.Sta_visualizza = 1) AND (V_Azioni_Utente_Documento.Sto_id_Doc = '" & idDocumento & "') AND                                             " &
                "                                               (V_Azioni_Utente_Documento.Sto_Utente NOT IN                                                                                                   " &
                "                                                   (SELECT     Tab_Operatori_Gruppi.TOG_Operatore                                                                                           " &
                "                                                     FROM          Tab_Operatori_Gruppi INNER JOIN                                                                                          " &
                "                                                                            Strutture_Operatori ON Tab_Operatori_Gruppi.TOG_Operatore = Strutture_Operatori.Sop_Operatore INNER JOIN        " &
                "                                                                            TAB_Operatori_Attributi ON Tab_Operatori_Gruppi.TOG_Gruppo = TAB_Operatori_Attributi.TOA_Operatore              " &
                "                                                     WHERE      (Strutture_Operatori.Sop_Struttura = '" & oOperatore.oUfficio.CodUfficioRagioneria & "') AND (TAB_Operatori_Attributi.TOA_Procedura = 'DETERMINE' OR                 " &
                "                                                                            TAB_Operatori_Attributi.TOA_Procedura = '*') AND (TAB_Operatori_Attributi.TOA_Attributo = 'LIVELLO_UFFICIO') AND" &
                "                                                                            (TAB_Operatori_Attributi.Toa_Valore = 'SUPERVISORE' OR                                                          " &
                "                                                                            TAB_Operatori_Attributi.Toa_Valore = 'COLLABORATORE')))                                                         " &
                "                        UNION                                                                                                                                                               " &
                "                        SELECT     CONVERT(varchar(10), V_Azioni_Utente_Documento.Sto_Data, 103) AS Expr1, V_Azioni_Utente_Documento.Sto_Utente,                                                " &
                "                                              Struttura.Str_codiceUtente, " &
                " case when V_Azioni_Utente_Documento.Sto_Nominativo ='' then ISNULL(Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome, isnull(Struttura_Attributi.Sta_valore, Struttura.Str_descrizione))  else " &
                " isnull(V_Azioni_Utente_Documento.Sto_Nominativo, ISNULL(Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome, isnull(Struttura_Attributi.Sta_valore, Struttura.Str_descrizione))  ) end  as Nominativo, " &
                " Tab_Tipo_Attivita_Documento.Sta_immagine, Tab_Tipo_Attivita_Documento.Sta_Descrizione,             " &
                "                                              CONVERT(varchar(10), V_Azioni_Utente_Documento.Sto_Data, 103) AS tempoLavorazione, V_Azioni_Utente_Documento.Sto_idAllegato,                      " &
                "                                              CASE WHEN Allegati.All_firmato = 1 THEN V_Azioni_Utente_Documento.Sto_idAllegato ELSE '' END AS Expr2,                                          " &
                "                                              Tab_Tipo_Attivita_Documento.Sta_id, V_Azioni_Utente_Documento.Sto_Prog                                                                          " &
                "                        FROM         Struttura_Attributi RIGHT OUTER JOIN                                                                                                                   " &
                "                                              Struttura ON Struttura_Attributi.Sta_id = Struttura.Str_id AND Struttura_Attributi.Sta_attributo = 'DESCR_BREVE' RIGHT OUTER JOIN             " &
                "                                              V_Azioni_Utente_Documento INNER JOIN                                                                                                            " &
                "                                              Tab_Tipo_Attivita_Documento ON V_Azioni_Utente_Documento.Sto_TipoAttivita = Tab_Tipo_Attivita_Documento.Sta_id LEFT OUTER JOIN                  " &
                "                                              Tab_Operatori ON                                                                                                                              " &
                "                                              V_Azioni_Utente_Documento.Sto_Utente = Tab_Operatori.Op_Codice_Operatore  LEFT OUTER JOIN                           " &
                "                                              Allegati ON V_Azioni_Utente_Documento.Sto_idAllegato = Allegati.All_idAllegato ON                                  " &
                "                                              Struttura.Str_id = V_Azioni_Utente_Documento.Sto_Ufficio                                                                                        " &
                "                        WHERE     (Tab_Tipo_Attivita_Documento.Sta_visualizza = 1) AND (V_Azioni_Utente_Documento.Sto_id_Doc = '" & idDocumento & "') AND                                     " &
                "                                              Tab_Tipo_Attivita_Documento.Sta_id <> 'FIRMA' AND (V_Azioni_Utente_Documento.Sto_Utente IN                                                      " &
                "                                                  (SELECT     Tab_Operatori_Gruppi.TOG_Operatore                                                                                            " &
                "                                                    FROM          Tab_Operatori_Gruppi INNER JOIN                                                                                           " &
                "                                                                           Strutture_Operatori ON Tab_Operatori_Gruppi.TOG_Operatore = Strutture_Operatori.Sop_Operatore INNER JOIN         " &
                "                                                                           TAB_Operatori_Attributi ON Tab_Operatori_Gruppi.TOG_Gruppo = TAB_Operatori_Attributi.TOA_Operatore               " &
                "                                                    WHERE      (Strutture_Operatori.Sop_Struttura ='" & oOperatore.oUfficio.CodUfficioRagioneria & "') AND (TAB_Operatori_Attributi.TOA_Procedura = 'DETERMINE' OR  " &
                "                                                                           TAB_Operatori_Attributi.TOA_Procedura = '*') AND (TAB_Operatori_Attributi.TOA_Attributo = 'LIVELLO_UFFICIO') AND " &
                "                                                                           (TAB_Operatori_Attributi.Toa_Valore = 'SUPERVISORE' OR                                                           " &
                "                                                                           TAB_Operatori_Attributi.Toa_Valore = 'COLLABORATORE')))) a                                                       " &
                " ORDER BY a.Sto_Prog "

            Case Else
                Sqlq = " SELECT     Expr1, Sto_Utente, Str_codiceUtente, Nominativo, Sta_immagine, Sta_Descrizione, tempoLavorazione, Sto_idAllegato, Expr2, Sta_id                                                 " &
                " FROM         (SELECT     CONVERT(varchar(10), V_Azioni_Utente_Documento.Sto_Data, 103) AS Expr1, V_Azioni_Utente_Documento.Sto_Utente,                                                         " &
                "                                               Struttura.Str_codiceUtente, " &
                " case when V_Azioni_Utente_Documento.Sto_Nominativo ='' then ISNULL(Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome, isnull(Struttura_Attributi.Sta_valore, Struttura.Str_descrizione))  else " &
                " isnull(V_Azioni_Utente_Documento.Sto_Nominativo, ISNULL(Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome, isnull(Struttura_Attributi.Sta_valore, Struttura.Str_descrizione))  ) end  as Nominativo, " &
                " Tab_Tipo_Attivita_Documento.Sta_immagine, " &
                " CASE WHEN Tab_Tipo_Attivita_Documento.Sta_Id like 'CANC%' or Tab_Tipo_Attivita_Documento.Sta_Id like 'ALLE%' then Tab_Tipo_Attivita_Documento.Sta_Descrizione + ': ' + Allegati.All_nome else Tab_Tipo_Attivita_Documento.Sta_Descrizione end as Sta_Descrizione, " &
                "                                               CONVERT(varchar(10), V_Azioni_Utente_Documento.Sto_Data, 103) AS tempoLavorazione, V_Azioni_Utente_Documento.Sto_idAllegato,                     " &
                "                                               CASE WHEN Allegati.All_firmato = 1 THEN V_Azioni_Utente_Documento.Sto_idAllegato ELSE '' END AS Expr2,                                         " &
                "                                               Tab_Tipo_Attivita_Documento.Sta_id, V_Azioni_Utente_Documento.Sto_Prog                                                                         " &
                "                        FROM          Struttura_Attributi RIGHT OUTER JOIN                                                                                                                  " &
                "                                               Struttura ON Struttura_Attributi.Sta_id = Struttura.Str_id AND Struttura_Attributi.Sta_attributo = 'DESCR_BREVE' RIGHT OUTER JOIN            " &
                "                                               V_Azioni_Utente_Documento INNER JOIN                                                                                                           " &
                "                                               Tab_Tipo_Attivita_Documento ON V_Azioni_Utente_Documento.Sto_TipoAttivita = Tab_Tipo_Attivita_Documento.Sta_id LEFT OUTER JOIN                 " &
                "                                               Tab_Operatori ON                                                                                                                             " &
                "                                               V_Azioni_Utente_Documento.Sto_Utente = Tab_Operatori.Op_Codice_Operatore LEFT OUTER JOIN                          " &
                "                                               Allegati ON V_Azioni_Utente_Documento.Sto_idAllegato  = Allegati.All_idAllegato ON                                 " &
                "                                               Struttura.Str_id = V_Azioni_Utente_Documento.Sto_Ufficio                                                                                       " &
                "                        WHERE     (Tab_Tipo_Attivita_Documento.Sta_id <> 'DOCUMENTO') AND (Tab_Tipo_Attivita_Documento.Sta_visualizza = 1) AND (V_Azioni_Utente_Documento.Sto_id_Doc = '" & idDocumento & "') AND                                             " &
                "                                               (V_Azioni_Utente_Documento.Sto_Utente NOT IN                                                                                                   " &
                "                                                   (SELECT     Tab_Operatori_Gruppi.TOG_Operatore                                                                                           " &
                "                                                     FROM          Tab_Operatori_Gruppi INNER JOIN                                                                                          " &
                "                                                                            Strutture_Operatori ON Tab_Operatori_Gruppi.TOG_Operatore = Strutture_Operatori.Sop_Operatore INNER JOIN        " &
                "                                                                            TAB_Operatori_Attributi ON Tab_Operatori_Gruppi.TOG_Gruppo = TAB_Operatori_Attributi.TOA_Operatore              " &
                "                                                     WHERE      (Strutture_Operatori.Sop_Struttura = '" & oOperatore.oUfficio.CodUfficioRagioneria & "') AND (TAB_Operatori_Attributi.TOA_Procedura = 'DETERMINE' OR                 " &
                "                                                                            TAB_Operatori_Attributi.TOA_Procedura = '*') AND (TAB_Operatori_Attributi.TOA_Attributo = 'LIVELLO_UFFICIO') AND" &
                "                                                                            (TAB_Operatori_Attributi.Toa_Valore = 'SUPERVISORE' OR                                                          " &
                "                                                                            TAB_Operatori_Attributi.Toa_Valore = 'COLLABORATORE')))                                                         " &
                "                        UNION                                                                                                                                                               " &
                "                        SELECT     CONVERT(varchar(10), V_Azioni_Utente_Documento.Sto_Data, 103) AS Expr1, V_Azioni_Utente_Documento.Sto_Utente,                                                " &
                "                                              Struttura.Str_codiceUtente, " &
                "                                              case when V_Azioni_Utente_Documento.Sto_Nominativo ='' then ISNULL(Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome, isnull(Struttura_Attributi.Sta_valore, Struttura.Str_descrizione))  else " &
                "                                              isnull(V_Azioni_Utente_Documento.Sto_Nominativo, ISNULL(Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome, isnull(Struttura_Attributi.Sta_valore, Struttura.Str_descrizione))  ) end  as Nominativo, " &
                "                                              Tab_Tipo_Attivita_Documento.Sta_immagine, Tab_Tipo_Attivita_Documento.Sta_Descrizione,             " &
                "                                              CONVERT(varchar(10), V_Azioni_Utente_Documento.Sto_Data, 103) AS tempoLavorazione, V_Azioni_Utente_Documento.Sto_idAllegato,                      " &
                "                                              CASE WHEN Allegati.All_firmato = 1 THEN V_Azioni_Utente_Documento.Sto_idAllegato ELSE '' END AS Expr2,                                          " &
                "                                              Tab_Tipo_Attivita_Documento.Sta_id, V_Azioni_Utente_Documento.Sto_Prog                                                                          " &
                "                        FROM         Struttura_Attributi RIGHT OUTER JOIN                                                                                                                   " &
                "                                              Struttura ON Struttura_Attributi.Sta_id = Struttura.Str_id AND Struttura_Attributi.Sta_attributo = 'DESCR_BREVE' RIGHT OUTER JOIN             " &
                "                                              V_Azioni_Utente_Documento INNER JOIN                                                                                                            " &
                "                                              Tab_Tipo_Attivita_Documento ON V_Azioni_Utente_Documento.Sto_TipoAttivita = Tab_Tipo_Attivita_Documento.Sta_id LEFT OUTER JOIN                  " &
                "                                              Tab_Operatori ON                                                                                                                              " &
                "                                              V_Azioni_Utente_Documento.Sto_Utente = Tab_Operatori.Op_Codice_Operatore LEFT OUTER JOIN                           " &
                "                                              Allegati ON V_Azioni_Utente_Documento.Sto_idAllegato  = Allegati.All_idAllegato ON                                  " &
                "                                              Struttura.Str_id = V_Azioni_Utente_Documento.Sto_Ufficio                                                                                        " &
                "                        WHERE     (Tab_Tipo_Attivita_Documento.Sta_id <> 'DOCUMENTO') AND (Tab_Tipo_Attivita_Documento.Sta_visualizza = 1) AND (V_Azioni_Utente_Documento.Sto_id_Doc = '" & idDocumento & "') AND                                     " &
                "                                              Tab_Tipo_Attivita_Documento.Sta_id <> 'FIRMA' AND (V_Azioni_Utente_Documento.Sto_Utente IN                                                      " &
                "                                                  (SELECT     Tab_Operatori_Gruppi.TOG_Operatore                                                                                            " &
                "                                                    FROM          Tab_Operatori_Gruppi INNER JOIN                                                                                           " &
                "                                                                           Strutture_Operatori ON Tab_Operatori_Gruppi.TOG_Operatore = Strutture_Operatori.Sop_Operatore INNER JOIN         " &
                "                                                                           TAB_Operatori_Attributi ON Tab_Operatori_Gruppi.TOG_Gruppo = TAB_Operatori_Attributi.TOA_Operatore               " &
                "                                                    WHERE      (Strutture_Operatori.Sop_Struttura ='" & oOperatore.oUfficio.CodUfficioRagioneria & "') AND (TAB_Operatori_Attributi.TOA_Procedura = 'DETERMINE' OR  " &
                "                                                                           TAB_Operatori_Attributi.TOA_Procedura = '*') AND (TAB_Operatori_Attributi.TOA_Attributo = 'LIVELLO_UFFICIO') AND " &
                "                                                                           (TAB_Operatori_Attributi.Toa_Valore = 'SUPERVISORE' OR                                                           " &
                "                                                                           TAB_Operatori_Attributi.Toa_Valore = 'COLLABORATORE')))) a                                                       " &
                " ORDER BY a.Sto_Prog "
        End Select

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2
        vR = GDB.DBQuery(vP)

        utenteCorrente = vR(1)(1, 0)
        datainizio = vR(1)(0, 0)
        pdatainizio = 0
        For i = 1 To UBound(vR(1), 2)
            If utenteCorrente <> vR(1)(1, i) Then
                vR(1)(6, pdatainizio) = CStr(ContaGiorniLavorativi(Convert.ToDateTime(vR(1)(0, pdatainizio)), Convert.ToDateTime(vR(1)(0, Math.Max(pdatainizio, i - 1)))))
                utenteCorrente = vR(1)(1, i)
                pdatainizio = i
            Else
                vR(1)(6, i) = ""
            End If
        Next
        vR(1)(6, pdatainizio) = CStr(ContaGiorniLavorativi(Convert.ToDateTime(vR(1)(0, pdatainizio)), Now))

        vRitPar(2) = Crea_Grafo_Storico(vR(1))
        vRitPar(0) = vR(0)
        ' vRitPar(1) = vR(1)
        vP(0) = DB
        vP(1) = Sqlq & " desc"
        vP(2) = 2
        vR = GDB.DBQuery(vP)

        utenteCorrente = vR(1)(1, 0)
        datainizio = vR(1)(0, 0)
        pdatainizio = 0
        For i = 1 To UBound(vR(1), 2)
            If utenteCorrente <> vR(1)(1, i) Then
                vR(1)(6, pdatainizio) = CStr(ContaGiorniLavorativi(Convert.ToDateTime(vR(1)(0, pdatainizio)), Convert.ToDateTime(vR(1)(0, Math.Max(pdatainizio, i - 1)))))
                utenteCorrente = vR(1)(1, i)
                pdatainizio = i
            Else
                vR(1)(6, i) = ""
            End If
        Next
        vR(1)(6, pdatainizio) = CStr(ContaGiorniLavorativi(Convert.ToDateTime(vR(1)(0, pdatainizio)), Now))

        vRitPar(1) = vR(1)


FineSub:
        FO_Storico_Documento = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function


Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo FineSub
        ' Resume
    End Function

    'Private Function Crea_Grafo_Storico(ByVal vStorico As Object) As String
    '    Dim FontBold As Font
    '    Dim drawFormat As New StringFormat
    '    Dim i As Integer
    '    Dim r As RectangleF
    '    Dim RedPen As New Pen(Color.Red, 3)
    '    Dim myBrush = New System.Drawing.SolidBrush(System.Drawing.Color.Red)
    '    Dim blackPen As New Pen(Color.Black, 1)
    '    Dim Distanza As Integer = 170
    '    Dim MargineDestro As Integer = 20
    '    Dim ConteggioStati As Integer = 3
    '    Dim objBitmap As New Bitmap(200, 120 + (ConteggioStati * Distanza))
    '    Dim objGraphic As Graphics = Graphics.FromImage(objBitmap)

    '    Try
    '        FontBold = New Font("Arial", 10, FontStyle.Bold)
    '        For i = 0 To ConteggioStati
    '            objGraphic.DrawEllipse(blackPen, New Rectangle(0 + MargineDestro, i * Distanza, 100, 100))
    '            drawFormat.Alignment = StringAlignment.Center
    '            r.Y = i * Distanza + 40
    '            r.X = 0 + MargineDestro
    '            r.Width = 100
    '            objGraphic.DrawString(vStorico(2, i), FontBold, Brushes.Black, r, drawFormat)
    '            ' Create array of points that define lines to draw.
    '            If i <> ConteggioStati Then
    '                Dim points As Point() = {New Point(50 + MargineDestro, i * Distanza + 110), New Point(50 + MargineDestro, i * Distanza + 150)}

    '                'Draw lines to screen.
    '                objGraphic.DrawLines(RedPen, points)
    '                r.Y = i * Distanza + 130
    '                r.X = 60 + MargineDestro
    '                r.Width = 140

    '                objGraphic.DrawString(vStorico(4, i), FontBold, Brushes.Black, r, drawFormat)
    '                Dim points1 As Point() = {New Point(46 + MargineDestro, i * Distanza + 150), New Point(54 + MargineDestro, i * Distanza + 150), New Point(50 + MargineDestro, i * Distanza + 160)}
    '                objGraphic.DrawPolygon(blackPen, points1)

    '            End If
    '        Next i

    '        Dim nomeFile As String = "temp\" & idDocumento & oOperatore.Codice & ".bmp"
    '        objBitmap.Save(AppDomain.CurrentDomain.BaseDirectory & nomeFile)
    '        Return ".\" & nomeFile
    '    Catch ex As Exception
    '        Return ""
    '    End Try

    'End Function

    Private Function Crea_Grafo_Storico(ByVal vStorico As Object) As String
        Dim PosizioneUtenti As Integer = 3
        Dim PosizioneUfficio As Integer = 2
        Dim PosizioneCodUtente As Integer = 1
        Dim PosizioneAzione As Integer = 5
        Dim PosizioneDataAzione As Integer = 0
        Dim PosizioneCodAzione As Integer = 9
        Dim i, j As Integer
        Dim stringaGrafo As String
        Dim stringaUfficio As String
        Dim elencoUffici As New ArrayList
        Dim utentiUffici As New Hashtable
        Dim utenteCorrente As String
        Dim descrUtenteUfficio As String
        Dim descrUtenteUfficioDa As String
        Dim descrUtenteUfficioA As String
        Dim descrAzione As String
        ' Dim nomefile As String
        Dim nomeFileGraphviz As String
        Dim nomeFileImmagine As String
        Dim nomeFileGIF As String


        Try
            'Return ""
            ''Dim dot As New WINGRAPHVIZLib.DOT
            ''Dim bFile As New WINGRAPHVIZLib.BinaryImage

            'Dim dot As Object
            'Dim bFile As Object

            'dot = CreateObject("Wingraphviz.dot")
            'bFile = CreateObject("Wingraphviz.BinaryImage")

            'If dot Is Nothing Then
            '    Return "Problemi nella creazione dell'oggetto Wingraphviz.dot "
            'End If
            'If bFile Is Nothing Then
            '    Return "Problemi nella creazione dell'oggetto Wingraphviz.BinaryImage "
            'End If

            For i = 0 To UBound(vStorico, 2)
                If Not elencoUffici.Contains(vStorico(PosizioneUfficio, i)) Then
                    elencoUffici.Add(vStorico(PosizioneUfficio, i))
                End If
                If vStorico(PosizioneCodAzione, i) = "ARRIVOUF" Then
                    vStorico(PosizioneAzione, i) = "Arrivo in " & vStorico(PosizioneUtenti, i)
                    'vStorico(PosizioneUtenti, i) = "Arrivo in ufficio"
                    vStorico(PosizioneUtenti, i) = "Arrivo in " & vStorico(PosizioneUtenti, i)
                End If
                If utentiUffici.ContainsKey(vStorico(PosizioneUfficio, i)) Then
                    If InStr(utentiUffici.Item(vStorico(PosizioneUfficio, i)), vStorico(PosizioneUtenti, i), CompareMethod.Text) < 1 Then
                        utentiUffici.Item(vStorico(PosizioneUfficio, i)) = utentiUffici.Item(vStorico(PosizioneUfficio, i)) & ";" & vStorico(PosizioneUtenti, i)
                    End If
                Else
                    utentiUffici.Add(vStorico(PosizioneUfficio, i), vStorico(PosizioneUtenti, i))
                End If
            Next

            stringaGrafo = ""
            stringaUfficio = " "
            For i = 0 To elencoUffici.Count - 1
                '      stringaUfficio = " subgraph cluster_" & elencoUffici.Item(i) & "  {color=lightgrey, label = "" " & elencoUffici.Item(i) & " ""  " & vbCrLf
                stringaUfficio = " subgraph cluster_" & elencoUffici.Item(i) & "  {color=lightgrey; label = "" " & elencoUffici.Item(i) & " "";  " & vbCrLf

                Dim vUtentiUfficio As Array
                vUtentiUfficio = Split(utentiUffici.Item(elencoUffici.Item(i)), ";")
                For j = 0 To UBound(vUtentiUfficio)
                    descrUtenteUfficio = Replace(vUtentiUfficio(j), " ", "\n", , , CompareMethod.Text)
                    stringaUfficio = stringaUfficio & "  """ & descrUtenteUfficio & """ [shape=ellipse,color=lightgrey]; " & vbCrLf
                Next
                stringaUfficio = stringaUfficio & "    }  "

                stringaGrafo = stringaGrafo & stringaUfficio & vbCrLf
            Next
            stringaGrafo = stringaGrafo & "  node [color=lightgrey]; " & vbCrLf
            utenteCorrente = vStorico(PosizioneUtenti, 0)
            For i = 1 To UBound(vStorico, 2)
                If utenteCorrente <> vStorico(PosizioneUtenti, i) Then
                    utenteCorrente = vStorico(PosizioneUtenti, i)
                    descrUtenteUfficioDa = Replace(vStorico(PosizioneUtenti, i - 1), " ", "\n", , , CompareMethod.Text)
                    descrUtenteUfficioA = Replace(utenteCorrente, " ", "\n", , , CompareMethod.Text)


                    If vStorico(PosizioneCodAzione, i) = "PRELIEVO" Or vStorico(PosizioneCodAzione, i) = "PRELAZIONE" Then
                        descrAzione = Replace(vStorico(PosizioneDataAzione, i) & " " & vStorico(PosizioneAzione, i), " ", "\n", , , CompareMethod.Text)
                    Else
                        descrAzione = Replace(vStorico(PosizioneDataAzione, i) & " " & vStorico(PosizioneAzione, i - 1), " ", "\n", , , CompareMethod.Text)
                    End If
                    stringaGrafo = stringaGrafo & "  """ & descrUtenteUfficioDa & """ -> """ & descrUtenteUfficioA & """ [label = "" " & descrAzione & " "" ];  " & vbCrLf
                End If
            Next

            stringaGrafo = stringaGrafo & "   """ & descrUtenteUfficioA & """ [ style=filled, color=gold  ];  " & vbCrLf

            stringaGrafo = " digraph flusso {  " &
                            stringaGrafo & vbCrLf & " } "

            'bFile = dot.ToJPEG(stringaGrafo)

            ''Dim nomeFile As String = "temp\" & idDocumento & oOperatore.Codice & ".jpg"
            ''bFile.Save(AppDomain.CurrentDomain.BaseDirectory & nomeFile)

            'Dim vRegAll(Dic_FODocumentale.dimvc_Registra_Allegato) As Object
            'vRegAll(Dic_FODocumentale.vc_Registra_Allegato.c_descEstensione) = "jpg"
            'vRegAll(Dic_FODocumentale.vc_Registra_Allegato.c_descTipo) = "IMG_STORICO"
            'vRegAll(Dic_FODocumentale.vc_Registra_Allegato.c_nome) = "Immagine storico" + idDocumento
            'vRegAll(Dic_FODocumentale.vc_Registra_Allegato.c_binarioAllegato) = Convert.FromBase64String(bFile.ToBase64String)

            'vR = FO_Registra_Allegato(vRegAll)
            'If vR(0) = 0 Then
            '    idImmStorico = vR(1)
            'Else
            '    idImmStorico = ""
            'End If

            Dim nomeFileDotString As String = AppDomain.CurrentDomain.BaseDirectory & "temp\" & idDocumento & oOperatore.Codice & ".dot"
            Dim fInputDOTString As New FileInfo(nomeFileDotString)
            If fInputDOTString.Exists Then
                Try
                    fInputDOTString.Delete()
                Catch ex As Exception

                End Try
            End If
            Try
                Dim sw As StreamWriter = fInputDOTString.CreateText()
                sw.WriteLine(stringaGrafo)
                sw.Flush()
                sw.Close()
            Catch ex As Exception
                Call SISTEMA.Registra_Trace("**** errore durante la creazione del file DOT: *****", ex.Message)
            End Try

            Dim nomefile As String = "temp\" & idDocumento & oOperatore.Codice & ".gif"
            nomeFileGIF = AppDomain.CurrentDomain.BaseDirectory & nomefile

            Dim fInputGIFString As New FileInfo(nomeFileGIF)
            If fInputGIFString.Exists Then
                Try
                    fInputGIFString.Delete()
                Catch ex As Exception

                End Try
            End If
            ' fInfo = Nothing

            Dim comando As String = ConfigurationManager.AppSettings("pathGraphviz")
            If comando = "" Then
                comando = "C:\Programmi\ATT\Graphviz\bin\dot"
            End If
            comando = comando & " -v -Tgif -o " & nomeFileGIF & " " & nomeFileDotString & "    "
            comando = comando.Replace("/", "\")
            Try
                Call SISTEMA.Registra_Trace("(**** Prima esecuzione della shell COMANDO: " & comando)
                Call Shell(comando)
                Call SISTEMA.Registra_Trace("(**** Dopo esecuzione della shell")
            Catch ex As Exception
                Call SISTEMA.Registra_Trace("**** errore durante l'esecuzione di DOT.EXE: *****", ex.Message)
            End Try


            ' Chiamata al ws GenerazioneGraph commentata perchè viene utilizzato direttamete il comdando .dot, da shell di dos
            ' senza utilizzare la libreria WinGraphviz. Ma solo l'applicazione Graphviz installata sul server.
            ' Modifica apportata per evitare di utilizzare la libreria WinGraphviz, che sui sitemi a 64bit non funziona, in particolare
            ' è stata testata su windows server 2012
            'Dim wg As New GraphClient
            'wg.CreaGrafo(stringaGrafo, nomeFileImmagine)

            'fInputDOTString = New FileInfo(nomeFileDotString)
            'If fInputDOTString.Exists Then
            '    Try
            '        fInputDOTString.Delete()
            '    Catch ex As Exception
            '    End Try
            'End If
            'fInputDOTString = Nothing

            Return nomefile
        Catch ex As Exception
            Call SISTEMA.Registra_Log("errore wingraph", ex.Message)
            Return ""
        End Try

    End Function




    Friend Function FO_Leggi_Documento(ByVal vParm As Object, Optional ByVal avviaTransazione As Boolean = True, Optional ByVal DB As Object = Nothing) As Object
        Const SFunzione As String = "FO_Leggi_Documento"
        Dim vRitPar(3) As Object
        Dim vRit(Dic_FODocumentale.dimvr_Leggi_Documento) As Object
        Dim Sqlq As String
        Dim sWhere As String
        Dim RS As Object
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        Dim sXmlDatiRichiesta As String
        Dim domDatiRichiesta As System.Xml.XmlDocument
        Dim domDatiLetti As System.Xml.XmlDocument
        Dim sXmlDatiLetti As String
        Dim nodoTabella As System.Xml.XmlNode
        Dim nodoColonna As System.Xml.XmlNode
        Dim attributoNodoTabella As System.Xml.XmlAttribute
        Dim nomeTabella As String
        Dim precNomeTabella As String
        Dim chiaveTabella As String
        Dim colonnaProgRegistrazioneTabella As String
        Dim i As Integer
        Dim compitiUtenteDocumento As String
        Dim compitiCampoDocumento As String
        Dim chiudereDb As Boolean = True

        On Error GoTo Herr

        idDocumento = vParm(Dic_FODocumentale.vc_Leggi_Documento.c_idDocumento)
        sXmlDatiRichiesta = vParm(Dic_FODocumentale.vc_Leggi_Documento.c_xmlDatiDocumento)

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        If DB Is Nothing Then
            chiudereDb = True
            VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
            'DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

            Call DB.ApriDB()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo FineSub
            End If
        Else
            chiudereDb = False
        End If

        '
        'Mod Lu 10/03
        'Sqlq = "SELECT     Doc_Oggetto, Doc_Testo , isnull(Doc_numero,Doc_numeroprovvisorio) as  Doc_numero,   " & _
        '       "            Doc_Pubblicazione, Doc_isContabile " & _
        '       " FROM         Documento " & _
        '       " WHERE  ( Doc_Id = '" & idDocumento & "'  ) "

        Sqlq = "SELECT    Documento.Doc_Oggetto, Documento.Doc_Testo, ISNULL(Documento.Doc_numero, Documento.Doc_numeroProvvisorio) AS Doc_numero, " &
               "             Documento.Doc_Pubblicazione, Documento.Doc_IsContabile, Documento.Doc_Data, ISNULL(Struttura.Str_codiceUtente, '') AS CodProponente, " &
               "             ISNULL(Struttura.Str_descrizione, '') AS DescProponente " &
               " FROM         Documento  Left  JOIN Struttura ON Documento.Doc_Cod_Uff_Prop = Struttura.Str_id " &
               " WHERE  ( Doc_Id = '" & idDocumento & "'  ) "

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2
        vR = GDB.DBQuery(vP)

        If vR(0) <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If
        vRit(Dic_FODocumentale.vr_Leggi_Documento.c_oggetto) = vR(1)(0, 0) & ""
        vRit(Dic_FODocumentale.vr_Leggi_Documento.c_testo) = vR(1)(1, 0) & ""
        vRit(Dic_FODocumentale.vr_Leggi_Documento.c_numUtenteDocumento) = vR(1)(2, 0) & ""
        vRit(Dic_FODocumentale.vr_Leggi_Documento.c_pubIntegrale) = vR(1)(3, 0) & ""
        vRit(Dic_FODocumentale.vr_Leggi_Documento.c_isContabile) = vR(1)(4, 0) & ""
        vRit(Dic_FODocumentale.vr_Leggi_Documento.c_Data) = vR(1)(5, 0) & ""
        vRit(Dic_FODocumentale.vr_Leggi_Documento.c_CodProponente) = vR(1)(6, 0) & ""
        vRit(Dic_FODocumentale.vr_Leggi_Documento.c_DescProponente) = vR(1)(7, 0) & ""


        Sqlq = "SELECT    isnull(Dco_Compito,'') as Dco_Compito " &
               " FROM          Documento_compito_utente " &
               " WHERE      ( Dco_id_Documento = '" & idDocumento & "') AND (Dco_utente = '" & oOperatore.Codice & "')"


        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2
        vR = GDB.DBQuery(vP)

        compitiUtenteDocumento = ""
        If vR(0) = 0 Then
            For i = 0 To vR(2) - 1
                If Trim(vR(1)(0, i)) <> "" Then
                    If compitiUtenteDocumento = "" Then
                        compitiUtenteDocumento = vR(1)(0, i)
                    Else
                        compitiUtenteDocumento = compitiUtenteDocumento & ";" & vR(1)(0, i)
                    End If
                End If
            Next
        End If

        vRit(Dic_FODocumentale.vr_Leggi_Documento.c_compitoUtente) = compitiUtenteDocumento & ""

        domDatiRichiesta = New System.Xml.XmlDocument
        domDatiLetti = New System.Xml.XmlDocument
        If Trim(sXmlDatiRichiesta) <> "" Then
            domDatiRichiesta.LoadXml(sXmlDatiRichiesta & "")
            domDatiLetti.LoadXml("<datiDocumento/>")
            sXmlDatiLetti = ""
        End If

        sXmlDatiLetti = "<oggetto>" & vRit(Dic_FODocumentale.vr_Leggi_Documento.c_oggetto) & "</oggetto>"
        sXmlDatiLetti = sXmlDatiLetti & "<pubIntegrale>" & vRit(Dic_FODocumentale.vr_Leggi_Documento.c_pubIntegrale) & "</pubIntegrale>"

        precNomeTabella = ""
        For Each nodoTabella In domDatiRichiesta.SelectNodes("//tabella")
            nomeTabella = ""
            chiaveTabella = ""
            colonnaProgRegistrazioneTabella = ""
            For Each attributoNodoTabella In nodoTabella.Attributes
                Select Case UCase(attributoNodoTabella.Name())
                    Case "NOME_TABELLA"
                        nomeTabella = attributoNodoTabella.Value
                    Case "CHIAVE_TABELLA"
                        chiaveTabella = attributoNodoTabella.Value
                    Case "COL_PROG_REGISTRAZIONE"
                        colonnaProgRegistrazioneTabella = attributoNodoTabella.Value
                End Select
            Next

            If precNomeTabella <> nomeTabella Then
                Sqlq = "SELECT * FROM " & nomeTabella &
                                   " WHERE " & chiaveTabella & " = '" & idDocumento & "' "


                If Trim(colonnaProgRegistrazioneTabella & "") <> "" Then
                    Sqlq = Sqlq & " ORDER BY " & colonnaProgRegistrazioneTabella & "  "
                End If

                RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaForward)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    GoTo FineSub
                End If


                If Not RS.EOF Then
                    While Not RS.EOF
                        'RS.MoveFirst()
                        For i = 0 To RS.Fields.Count - 1
                            nodoColonna = nodoTabella.SelectSingleNode("//" + RS.Fields.Item(i).Name)

                            If nodoColonna Is Nothing Then
                                nodoColonna = domDatiRichiesta.CreateNode(System.Xml.XmlNodeType.Element, RS.Fields.Item(i).Name, "")
                                If Not IsDBNull(RS.Fields.Item(i).Value) Then
                                    nodoColonna.InnerText = CStr(RS.Fields.Item(i).Value)
                                End If
                                nodoTabella.AppendChild(nodoColonna)
                            Else
                                If Not IsDBNull(RS.Fields.Item(i).Value) Then
                                    nodoColonna.InnerText = CStr(RS.Fields.Item(i).Value)
                                End If
                            End If

                            'rocco 11-05-2006 :  fare funzione <<
                            For Each attributoNodoTabella In nodoColonna.Attributes()
                                Select Case UCase(attributoNodoTabella.Name)
                                    Case Is = "COMPITO"
                                        compitiCampoDocumento = attributoNodoTabella.Value

                                        'vittorio 27-07-2006
                                        'If Not Test_Compito(compitiCampoDocumento, compitiUtenteDocumento) Then
                                        '    Dim att As Xml.XmlAttribute
                                        '    att = domDatiRichiesta.CreateAttribute("disabilita")
                                        '    att.Value = 1
                                        '    nodoColonna.Attributes.Append(att)
                                        'End If
                                        'fine vittorio

                                End Select
                            Next

                            'vittorio 27-07-2006 (commento e sposto su questa routine)
                            If Not compitiCampoDocumento Is Nothing AndAlso compitiCampoDocumento <> "" Then
                                If Not Test_Compito(compitiCampoDocumento, compitiUtenteDocumento) Then
                                    Dim att As System.Xml.XmlAttribute
                                    att = domDatiRichiesta.CreateAttribute("disabilita")
                                    att.Value = 1
                                    nodoColonna.Attributes.Append(att)
                                End If
                            End If
                            'fine vittorio

                            'rocco 11-05-2006 :  fare funzione >>
                        Next
                        sXmlDatiLetti = sXmlDatiLetti + nodoTabella.OuterXml
                        RS.MoveNext()
                    End While
                Else

                    For Each nodoColonna In nodoTabella.ChildNodes
                        'rocco 11-05-2006 : utilizzare funzione 
                        For Each attributoNodoTabella In nodoColonna.Attributes()
                            Select Case UCase(attributoNodoTabella.Name)
                                Case Is = "COMPITO"
                                    compitiCampoDocumento = attributoNodoTabella.Value
                            End Select
                        Next
                        If Not Test_Compito(compitiCampoDocumento, compitiUtenteDocumento) Then
                            Dim att As System.Xml.XmlAttribute
                            att = domDatiRichiesta.CreateAttribute("disabilita")
                            att.Value = 1
                            nodoColonna.Attributes.Append(att)
                        End If
                    Next

                    sXmlDatiLetti = sXmlDatiLetti + nodoTabella.OuterXml
                End If

                DB.ChiudiRS(RS)
            End If
            precNomeTabella = nomeTabella

        Next


        'commento per evitare la scrittura in Azioni_utente_documento
        ''registro la creazione della determina tra le attività dell'utente
        'Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
        'vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = "VISUALDOC"

        'vR = FO_Registra_Attivita(vRegAtt, DB, avviaTransazione)
        'If vR(0) <> 0 Then
        '    vRitPar(0) = vR(0)
        '    vRitPar(1) = vR(1)
        '    GoTo FineSub
        'End If

        vRitPar(0) = 0
        '  vRit(Dic_FODocumentale.vr_Leggi_Documento.c_xmlDatiDocumento) = "<datiDocumento>" & sXmlDatiLetti & "</datiDocumento>"
        vRitPar(1) = vRit

FineSub:
        FO_Leggi_Documento = vRitPar
        On Error Resume Next
        If Not DB Is Nothing And chiudereDb Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

Herr:
        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo FineSub
        ' Resume
    End Function

    Friend Function FO_AGGIORNA_DATA_RICEZIONE(ByVal vParm As Object, ByVal DBChiamante As Object) As Object
        Const SFunzione As String = "FO_AGGIORNA_DATA_RICEZIONE"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String

        Dim RS As Object = Nothing
        Dim vR As Object = Nothing
        Dim vP(2) As Object


        Dim i As Integer

        Dim progReg As Integer
        Dim compitiUtenteDocumento As String
        Dim compitiCampoDocumento As String

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        idDocumento = vParm(Dic_FODocumentale.vc_Registra_Documento.c_idDocumento)

        If Trim(idDocumento) = "" Then
            vRitPar(0) = 1
            vRitPar(1) = "Parametri insufficienti"
            GoTo FineSub
        End If



        Sqlq = "SELECT     Doc_Id, Doc_Oggetto, Doc_Testo ,Doc_id_WFE , Doc_numeroProvvisorio, Doc_numero , " &
               "                 Doc_Tipo  , Doc_Pubblicazione , Doc_privacy ,Doc_isContabile,Doc_Data,Doc_dataRicezione " &
               " FROM         Documento " &
                " WHERE (Doc_Id = '" & idDocumento & "')"

        RS = DBChiamante.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        If DBChiamante.errore <> 0 Then
            vRitPar(0) = DBChiamante.errore
            vRitPar(1) = DBChiamante.ErrDescr

        End If


        If RS.EOF Then

        Else
            DBChiamante.EditRS(RS)
            If DBChiamante.errore <> 0 Then
                vRitPar(0) = DBChiamante.errore
                vRitPar(1) = DBChiamante.ErrDescr

            End If
        End If

        RS("Doc_dataRicezione") = Now

        Call DBChiamante.UpdateRS(RS)
        If DBChiamante.errore <> 0 Then
            vRitPar(0) = DBChiamante.errore
            vRitPar(1) = DBChiamante.ErrDescr

        End If



        DBChiamante.ChiudiRS(RS)
        If DBChiamante.errore <> 0 Then
            vRitPar(0) = DBChiamante.errore
            vRitPar(1) = DBChiamante.ErrDescr

        End If



FineSub:
        FO_AGGIORNA_DATA_RICEZIONE = vRitPar
        On Error Resume Next



        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function



Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)

        ' Resume
    End Function
    Friend Function FO_AGGIORNA_DATA_RICEZIONE_new(ByVal vParm As Object, ByRef trans As SqlTransaction) As Object
        Const SFunzione As String = "FO_AGGIORNA_DATA_RICEZIONE"
        Dim vRitPar(3) As Object
        Dim Sqlq As String
        Dim vP(2) As Object



        vRitPar(0) = 0
        vRitPar(1) = ""

        idDocumento = vParm(Dic_FODocumentale.vc_Registra_Documento.c_idDocumento)

        Log.Info("***INIZIO " & SFunzione & " IdDocumento: " & idDocumento & " - " & Now)

        If Trim(idDocumento) = "" Then
            vRitPar(0) = 1
            vRitPar(1) = "Parametri insufficienti"
            GoTo FineSub
        End If




        Sqlq = "update Documento set  Doc_dataRicezione = @data " &
                " WHERE (Doc_Id = '" & idDocumento & "')"

        Dim parms(0) As SqlParameter

        parms(0) = New SqlParameter("@data", SqlDbType.DateTime)
        parms(0).Value = Now



        Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, Sqlq, parms)





FineSub:
        FO_AGGIORNA_DATA_RICEZIONE_new = vRitPar
        Log.Info("***FINE " & SFunzione & " IdDocumento: " & idDocumento & " - " & Now)

        ' Resume
    End Function
    Friend Function FO_Registra_Documento(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Registra_Documento"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim DBLOG As Object = Nothing
        Dim RS As Object = Nothing
        Dim vR As Object = Nothing
        Dim vP(2) As Object

        Dim oggetto As String
        Dim testo As String
        Dim pubblicazioneIntegrale As Integer
        Dim sXmlDatiDocumento As String
        Dim isContabile As Int16
        Dim tipoOpcontabili As String = ""
        Dim codCup As String = ""
        Dim privacy As String = ""
        Dim cod_applicazione As String = ""
        Dim cod_Esterno As String = ""
        Dim cod_Invest_Pubb As String = ""

        Dim attoreCorrente As String
        Dim i As Integer

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        idDocumento = vParm(Dic_FODocumentale.vc_Registra_Documento.c_idDocumento)
        oggetto = vParm(Dic_FODocumentale.vc_Registra_Documento.c_doc_Oggetto)
        pubblicazioneIntegrale = vParm(Dic_FODocumentale.vc_Registra_Documento.c_pub_integrale)
        testo = vParm(Dic_FODocumentale.vc_Registra_Documento.c_testo)
        isContabile = vParm(Dic_FODocumentale.vc_Registra_Documento.c_isContabile)
        tipoOpcontabili = vParm(Dic_FODocumentale.vc_Registra_Documento.c_tipoOpContabili)

        privacy = vParm(Dic_FODocumentale.vc_Registra_Documento.c_flagPrivacy)
        codCup = vParm(Dic_FODocumentale.vc_Registra_Documento.c_Cod_Cup)
        cod_applicazione = vParm(Dic_FODocumentale.vc_Registra_Documento.c_Cod_Applicazione)
        cod_Esterno = vParm(Dic_FODocumentale.vc_Registra_Documento.c_cod_doc_Esterno)
        cod_Invest_Pubb = vParm(Dic_FODocumentale.vc_Registra_Documento.c_cod_Investimento_Pub)

        If Trim(idDocumento) = "" Then
            vRitPar(0) = 1
            vRitPar(1) = "Parametri insufficienti"
            GoTo FineSub
        End If
        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        VerificaSistema(SISTEMA, "DOCUMENTALE_LOG", DBLOG)

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Call DBLOG.ApriDB()
        If DBLOG.errore <> 0 Then
            vRitPar(0) = DBLOG.errore
            vRitPar(1) = DBLOG.ErrDescr
            GoTo FineSub
        End If

        Call DB.BeginTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        Sqlq = "SELECT     Doc_Id, Doc_Oggetto, Doc_Testo ,Doc_id_WFE , Doc_numeroProvvisorio, Doc_numero , " &
               "                 Doc_Tipo  , Doc_Pubblicazione , Doc_privacy ,Doc_isContabile,Doc_dataRicezione,Doc_TipoOpCont,Doc_codApp,Doc_codCup,Doc_cod_Esterno, Doc_Investimento_Pub " &
               " FROM         Documento " &
                " WHERE (Doc_Id = '" & idDocumento & "')"

        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        'verifico se la proposta è ancora assegnata all'utente
        If Not RS.EOF Then
            idIstanzaWFE = RS("Doc_id_WFE").value + ""
            If tipoDocumento = "" Then
                tipoDocumento = RS("Doc_Tipo").value
            End If

            vR = Leggi_StatoIstanza_WFE(idIstanzaWFE, oOperatore.Codice)

            If vR(0) <> 0 Then
                vRitPar(0) = vR(0)
                vRitPar(1) = vR(1)
                GoTo FineSub
            End If

            attoreCorrente = vR(1)(2) & ""
            If UCase(Trim(attoreCorrente)) <> UCase(Trim(oOperatore.Codice)) Then
                vRitPar(0) = "1"
                vRitPar(1) = "L'utente non ha più in carico il documento"
                GoTo RollTrans
            End If
        End If

        If RS.EOF Then
            DB.AddRS(RS)
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
            RS("Doc_Id") = idDocumento
        Else
            DB.EditRS(RS)
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
        End If
        If RS("Doc_dataRicezione").value Is DBNull.Value Then
            RS("Doc_dataRicezione") = Now
        End If

        If Not oggetto Is Nothing Then
            RS("Doc_Oggetto") = oggetto
        End If
        If Not testo Is Nothing Then
            RS("Doc_Testo") = testo
        End If
        If tipoDocumento <> "" Then
            RS("Doc_Tipo") = tipoDocumento
        End If
        If IsNumeric(pubblicazioneIntegrale) Then
            RS("Doc_Pubblicazione") = pubblicazioneIntegrale
        End If
        RS("Doc_privacy") = 0

        If IsNumeric(isContabile) AndAlso isContabile >= 0 Then
            RS("Doc_isContabile") = isContabile
        End If



        If tipoOpcontabili = "" Then
            If RS("Doc_TipoOpCont").value.ToString = "" Then
                RS("Doc_TipoOpCont") = "0;0;0;0;0;0;0;0;0;"
            End If
        Else
            RS("Doc_TipoOpCont") = tipoOpcontabili

        End If
        '     If RS("Doc_TipoOpCont").value Is DBNull.Value AndAlso Not String.IsNullOrEmpty(tipoOpcontabili) Then


        Dim lstr_StringTempOpContabili As String = Trim((RS("Doc_TipoOpCont")).value.Replace("0", "").Replace(";", ""))
        'elminino tutti gli 0 e i punti e vigorla cosi facendo mi rimane il valore delle operazioni selezionate
        'non potrò + fare il controllo se contiene 1 visto che per sistemazioni contabili potrà avere altri valori
        'If stringaOpConta.Contains("1") Then
        If Not String.IsNullOrEmpty(lstr_StringTempOpContabili) Then
            ' If (RS("Doc_TipoOpCont")).value.Contains("1") Then
            RS("Doc_isContabile") = 1
            'End If
        End If


        If Not String.IsNullOrEmpty(cod_applicazione) Then
            RS("Doc_codApp") = cod_applicazione
        End If

        If Not String.IsNullOrEmpty(codCup) Then
            RS("Doc_codCup") = codCup
        End If

        If Not String.IsNullOrEmpty(cod_Esterno) Then
            RS("Doc_cod_Esterno") = cod_Esterno
        End If


        If Not String.IsNullOrEmpty(privacy) Then
            Dim flagPriv As Int16 = 0
            Int16.TryParse(privacy, flagPriv)
            RS("Doc_privacy") = flagPriv
        End If

        If Not String.IsNullOrEmpty(cod_Invest_Pubb) Then
            Dim flagPriv As Int16 = 0
            Int16.TryParse(privacy, flagPriv)
            RS("Doc_Investimento_Pub") = flagPriv
        End If



        Call DB.UpdateRS(RS)

        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        vR = DB_Aggiungi_RSLOG(RS, DBLOG, "Log_Documento")
        If vR(0) <> 0 Then
            vRitPar(0) = vR(0)
            vRitPar(1) = vR(1)
            GoTo RollTrans
        End If

        DB.ChiudiRS(RS)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        Call DB.CommitTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If


        'registro la creazione della determina tra le attività dell'utente
        Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
        vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = "IMMISDATI"
        vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_info_attivita) = ""
        vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = idDocumento
        vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = oOperatore.Cognome & " " & oOperatore.Nome
        vR = FO_Registra_Attivita(vRegAtt, DB)
        If vR(0) <> 0 Then
            vRitPar(0) = vR(0)
            vRitPar(1) = vR(1)
            GoTo FineSub
        End If

        vRitPar(0) = 0
        vRitPar(1) = ""  'domDatiDocumento.OuterXml

FineSub:
        FO_Registra_Documento = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If
        If Not DBLOG Is Nothing Then
            Call DBLOG.ChiudiDB()
            DBLOG = Nothing
        End If


        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Function

    Function effettuaUpdate(ByVal nomeTabella As String, ByVal prog As String, ByVal flusso As String) As Boolean

        If nomeTabella = "Documento_noteosservazioni" Then
            Select Case prog

                Case 1
                    If LCase(oOperatore.Codice) = LCase(oOperatore.oUfficio.ResponsabileUfficio(flusso)) Then

                    End If
                Case 2
                    If LCase(oOperatore.Codice) = LCase(oOperatore.oUfficio.ResponsabileUfficio(flusso)) Then

                    End If
                Case 3
                    If LCase(oOperatore.Codice) = LCase(oOperatore.oUfficio.ResponsabileUfficio(flusso)) Then

                    End If

            End Select
        Else

            Return True
        End If
    End Function
    'rc 27 02 2006
    Private Function Test_Compito(ByVal compitiCampoDocumento As String, ByVal compitiUtenteDocumento As String) As Boolean
        Dim esitoTesto As Boolean = False
        Dim vCompitiCampoDocumento As Object
        Dim vCompitiUtenteDocumento As Object
        Dim i As Integer
        Dim j As Integer

        If InStr(compitiCampoDocumento, "*", CompareMethod.Text) > 0 Then
            Return True
        End If

        If InStr(compitiUtenteDocumento, "*", CompareMethod.Text) > 0 Then
            Return True
        End If

        vCompitiCampoDocumento = Split(compitiCampoDocumento & ";", ";")
        vCompitiUtenteDocumento = Split(compitiUtenteDocumento & ";", ";")

        For i = 0 To UBound(vCompitiUtenteDocumento)
            For j = 0 To UBound(vCompitiCampoDocumento)
                If Trim(vCompitiUtenteDocumento(i)) <> "" Then
                    If UCase(vCompitiUtenteDocumento(i)) = UCase(vCompitiCampoDocumento(j)) Then
                        Return True
                    End If
                End If
            Next
        Next


        Return esitoTesto
    End Function

    Private Function Leggi_Dati_Stampa(ByRef domDatiDocumento As XmlDocument) As Object
        Const SFunzione As String = "Leggi_Dati_Stampa"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object
        Dim RS As Object
        Dim rootDomDocumento As XmlNode
        Dim nodoDatoDocumento As XmlNode
        Dim i As Integer

        On Error GoTo Herr
        Dim modelloStampa As String
        Dim testo As String

        rootDomDocumento = domDatiDocumento.FirstChild

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        ' DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        'leggo dati sui documenti
        Sqlq = "SELECT     ISNULL(Documento.Doc_numero, Documento.Doc_numeroProvvisorio) AS docnumeroutente, Documento.Doc_Data as docdata, Struttura.Str_codiceUtente codufficio, " &
               "           Struttura.Str_descrizione descrufficio, Struttura_dip.Str_descrizione AS descrdipartimento, Documento.Doc_Oggetto oggetto, Documento.Doc_Testo testo, " &
               "           Tab_Tipo_Documenti.Ttd_modelloXsl " &
               " FROM      Documento INNER JOIN " &
               "           Tab_Tipo_Documenti ON Documento.Doc_Tipo = Tab_Tipo_Documenti.Ttd_idTipoDocumento INNER JOIN " &
               "           Struttura ON Documento.Doc_Cod_Uff_Prop = Struttura.Str_id INNER JOIN " &
               "           Struttura Struttura_dip ON Struttura.Str_padre = Struttura_dip.Str_id " &
               " WHERE  (Documento.Doc_Id = '" & idDocumento & "') "

        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaDynaset)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        If RS.EOF Then
            vRitPar(0) = 1
            vRitPar(1) = "Documento non trovato ?????"
            GoTo FineSub
        End If

        For i = 0 To RS.Fields.Count - 1
            If RS.Fields(i).Name <> "testo" Then
                nodoDatoDocumento = domDatiDocumento.CreateElement(RS.Fields(i).Name)
                nodoDatoDocumento.InnerText = IIf(IsDBNull(RS.Fields(i).Value), "", RS.Fields(i).Value)
                rootDomDocumento.AppendChild(nodoDatoDocumento)
            End If
        Next

        modelloStampa = RS("Ttd_modelloXsl").value & ""
        testo = RS("testo").value & ""

        'se è una delibera leggo i componenti la giunta
        If tipoDocumento = 1 Then
            Sqlq = "SELECT     Dcg_Cognome as cognome, Dcg_Nome as nome, Dcg_Carica as carica, Dcg_Ordine_Apparizione as ordine  " &
                   " FROM  Tab_Componenti_Giunta  " &
                   " ORDER BY Dcg_Ordine_Apparizione "

            RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaDynaset)
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo FineSub
            End If

            If Not RS.EOF Then
                RS.MoveFirst()
                While Not RS.EOF
                    Dim nodoComponentiGiunta As XmlNode
                    nodoComponentiGiunta = domDatiDocumento.CreateElement("componentegiunta")
                    rootDomDocumento.AppendChild(nodoComponentiGiunta)

                    For i = 0 To RS.Fields.Count - 1
                        nodoDatoDocumento = domDatiDocumento.CreateElement(RS.Fields(i).Name)
                        nodoDatoDocumento.InnerText = IIf(IsDBNull(RS.Fields(i).Value), "", RS.Fields(i).Value)
                        nodoComponentiGiunta.AppendChild(nodoDatoDocumento)
                    Next
                    RS.MoveNext()
                End While
            End If
        End If

        'leggo i compiti sul documento
        Sqlq = "SELECT     Documento_compito_utente.Dco_Compito, Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome AS nominativo " &
               " FROM         Documento INNER JOIN " &
               "                       Documento_compito_utente ON Documento.Doc_Id = Documento_compito_utente.Dco_id_Documento INNER JOIN " &
               "                       Tab_Operatori ON Documento_compito_utente.Dco_utente = Tab_Operatori.Op_Codice_Operatore " &
               " WHERE     (Documento.Doc_Id = '" & idDocumento & "')"

        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaDynaset)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Dim nodoCompitiDocumento As XmlNode
        Dim nodoCompitoDocumento As XmlNode
        nodoCompitiDocumento = domDatiDocumento.CreateElement("compitidocumento")
        rootDomDocumento.AppendChild(nodoCompitiDocumento)
        If Not RS.EOF Then
            RS.MoveFirst()
            While Not RS.EOF
                nodoCompitoDocumento = domDatiDocumento.CreateElement(LCase(RS.Fields("Dco_Compito").Value))
                nodoCompitoDocumento.InnerText = IIf(IsDBNull(RS.Fields("nominativo").Value), "", RS.Fields("nominativo").Value)
                nodoCompitiDocumento.AppendChild(nodoCompitoDocumento)
                RS.MoveNext()
            End While
        End If


        vRitPar(0) = 0
        vRitPar(1) = modelloStampa
        vRitPar(2) = testo

FineSub:
        Leggi_Dati_Stampa = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo FineSub
        ' Resume
    End Function
    Function Assegna_Numerazione_Definitiva(ByVal iddocumentoLocale As String) As Object
        Return Assegna_Numerazione_Definitiva(, , iddocumentoLocale)
    End Function

    Friend Function Assegna_Numerazione_Definitiva(Optional ByVal DBChiamante As Object = Nothing, Optional ByVal AvviaTransazione As Boolean = True, Optional ByVal iddocumentoLocale As String = "") As Object
        Const SFunzione As String = "Assegna_Numerazione_Definitiva"

        If Not String.IsNullOrEmpty(iddocumentoLocale) Then
            idDocumento = iddocumentoLocale
        End If

        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim RS As Object = Nothing
        Dim vR As Object = Nothing

        Dim numUtenteDocumento As String
        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        If IsNothing(DBChiamante) Then
            VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
            'DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

            Call DB.ApriDB()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
                GoTo FineSub
            End If
        Else
            DB = DBChiamante
        End If

        If AvviaTransazione Then
            Call DB.BeginTrans()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
        End If

        Sqlq = " SELECT     Doc_numero,Doc_data " &
               " FROM Documento " &
               " WHERE     (Doc_Id = '" & idDocumento & "' )  "

        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        Dim tipoContatore As Boolean = False
        If Not RS.eof Then
            Dim ENTE_INSTALLAZIONE As String = ConfigurationManager.AppSettings("NOME_ENTE_INSTALLAZIONE")

            If tipoDocumento = 0 Then
                If IsDBNull(RS("Doc_numero").value) Then
                    If objDocumento.Doc_Cod_Uff_Pubblico.StartsWith("81") Then
                        vR = Calcola_Progressivo(DB, "NUDT", Year(Now), False, "81")
                    ElseIf objDocumento.Doc_Cod_Uff_Pubblico.StartsWith("18") Then
                        vR = Calcola_Progressivo(DB, "NUDT", Year(Now), False, "18")
                    ElseIf objDocumento.Doc_Cod_Uff_Pubblico.StartsWith("10") Then
                        vR = Calcola_Progressivo(DB, "NUDT", Year(Now), False, oOperatore.oUfficio.CodUfficio)
                    Else

                        Select Case ENTE_INSTALLAZIONE
                            Case "REGIONE"
                                vR = Calcola_Progressivo(DB, "NUDT", Year(Now), False, oOperatore.oUfficio.CodDipartimentoPubblico)
                            Case "ALSIA"
                                vR = Calcola_Progressivo(DB, "NUDT", Year(Now), False, oOperatore.oUfficio.CodUfficio)
                            Case Else
                                vR = Calcola_Progressivo(DB, "NUDT", Year(Now), False, oOperatore.oUfficio.CodDipartimentoPubblico)
                        End Select
                    End If

                    If vR(0) <> 0 Then
                        vRitPar(0) = vR(0)
                        vRitPar(1) = vR(1)
                        GoTo RollTrans
                    End If
                    numUtenteDocumento = vR(1)
                    Dim u As New DllAmbiente.Ufficio
                    u.CodUfficio = objDocumento.Doc_Cod_Uff_Prop
                    u.CodUfficioPubblico = objDocumento.Doc_Cod_Uff_Pubblico
                    Dim d As New DllAmbiente.Ufficio
                    d.CodUfficio = u.CodUfficioDirigenzaDipartimento

                    Dim sottostringaIniziale As String()
                    sottostringaIniziale = numUtenteDocumento.Split("/")
                    If sottostringaIniziale.Length < 3 Then
                        numUtenteDocumento = Replace(sottostringaIniziale(0), d.leggiUfficioPubblico(d.CodUfficio), u.CodUfficioPubblico) & "/" & sottostringaIniziale(1)
                    Else
                        numUtenteDocumento = Replace(sottostringaIniziale(0), d.leggiUfficioPubblico(d.CodUfficio), u.CodUfficioPubblico)
                        For i As Int32 = 1 To sottostringaIniziale.Length - 1
                            numUtenteDocumento = numUtenteDocumento & "/" & sottostringaIniziale(i)
                        Next

                    End If

                    RS("Doc_numero") = numUtenteDocumento
                    RS("Doc_data") = Now.Date
                    d = Nothing
                    u = Nothing
                Else
                    'il numero c'è, e verifico che la data sia la stessa della firma
                    Dim objRicercaAttivita As New ItemAttivita
                    objRicercaAttivita.Sto_id_Doc = idDocumento
                    objRicercaAttivita.Sto_TipoAttivita = "FIRMA"
                    Select Case ENTE_INSTALLAZIONE
                        Case "REGIONE"
                            objRicercaAttivita.Sto_Livello = "UDD"
                        Case "ALSIA"
                            objRicercaAttivita.Sto_Livello = "UP"
                        Case Else
                            objRicercaAttivita.Sto_Livello = "UDD"
                    End Select

                    objRicercaAttivita.Sto_Ruolo = "R"
                    Dim listaAttivita As Generic.List(Of ItemAttivita) = LeggiDettaglioAttivita(objRicercaAttivita)
                    If listaAttivita.Count > 0 Then
                        'ha già firmato una votla
                        Dim dataPrimaFirma As DateTime = listaAttivita.Item(0).Sto_Data
                        For Each att As ItemAttivita In listaAttivita
                            If att.Sto_Data < dataPrimaFirma Then
                                dataPrimaFirma = att.Sto_Data
                            End If
                        Next
                        RS("Doc_data") = dataPrimaFirma
                    Else

                        ' RS("Doc_data") = Now
                    End If

                End If
            End If
            'calcolo il progressivo unico delle delibere
            If tipoDocumento = 1 Then
                If IsDBNull(RS("Doc_numero").value) Then
                    vR = Calcola_Progressivo(DB, "NUDL", Year(Now), False, oOperatore.oUfficio.CodEnte)
                    If vR(0) <> 0 Then
                        vRitPar(0) = vR(0)
                        vRitPar(1) = vR(1)
                        GoTo RollTrans
                    End If
                    numUtenteDocumento = vR(1)
                    RS("Doc_numero") = numUtenteDocumento
                End If
            End If
            'calcolo il progressivo unico delle disposizioni
            If tipoDocumento = 2 Then
                If IsDBNull(RS("Doc_numero").value) Then
                    If objDocumento.Doc_Cod_Uff_Pubblico.StartsWith("81") Then
                        vR = Calcola_Progressivo(DB, "NUDS", Year(Now), False, "81")
                    ElseIf objDocumento.Doc_Cod_Uff_Pubblico.StartsWith("18") Then
                        vR = Calcola_Progressivo(DB, "NUDS", Year(Now), False, "18")
                    ElseIf objDocumento.Doc_Cod_Uff_Pubblico.StartsWith("10") Then
                        vR = Calcola_Progressivo(DB, "NUDS", Year(Now), False, oOperatore.oUfficio.CodUfficio)
                    Else
                        Select Case ENTE_INSTALLAZIONE
                            Case "REGIONE"
                                vR = Calcola_Progressivo(DB, "NUDS", Year(Now), False, oOperatore.oUfficio.CodDipartimentoPubblico)
                            Case "ALSIA"
                                vR = Calcola_Progressivo(DB, "NUDS", Year(Now), False, oOperatore.oUfficio.CodUfficio)
                            Case Else
                                vR = Calcola_Progressivo(DB, "NUDS", Year(Now), False, oOperatore.oUfficio.CodDipartimentoPubblico)
                        End Select
                    End If

                    If vR(0) <> 0 Then
                        vRitPar(0) = vR(0)
                        vRitPar(1) = vR(1)
                        GoTo RollTrans
                    End If
                    numUtenteDocumento = vR(1)
                    Dim u As New DllAmbiente.Ufficio
                    u.CodUfficio = objDocumento.Doc_Cod_Uff_Prop
                    u.CodUfficioPubblico = objDocumento.Doc_Cod_Uff_Pubblico
                    Dim d As New DllAmbiente.Ufficio
                    d.CodUfficio = u.CodUfficioDirigenzaDipartimento

                    'Dim sottostringaIniziale As String()
                    'sottostringaIniziale = numUtenteDocumento.Split("/")

                    'numUtenteDocumento = Replace(sottostringaIniziale(0), d.leggiUfficioPubblico(d.CodUfficio), u.CodUfficioPubblico) & "/" & sottostringaIniziale(1)
                    Dim sottostringaIniziale As String()
                    sottostringaIniziale = numUtenteDocumento.Split("/")
                    If sottostringaIniziale.Length < 3 Then
                        numUtenteDocumento = Replace(sottostringaIniziale(0), d.leggiUfficioPubblico(d.CodUfficio), u.CodUfficioPubblico) & "/" & sottostringaIniziale(1)
                    Else
                        numUtenteDocumento = Replace(sottostringaIniziale(0), d.leggiUfficioPubblico(d.CodUfficio), u.CodUfficioPubblico)
                        For i As Int32 = 1 To sottostringaIniziale.Length - 1
                            numUtenteDocumento = numUtenteDocumento & "/" & sottostringaIniziale(i)
                        Next

                    End If
                    RS("Doc_numero") = numUtenteDocumento
                    RS("Doc_data") = Now.Date
                    d = Nothing
                    u = Nothing
                Else

                    'il numero c'è, e verifico che la data sia la stessa della firma
                    Dim objRicercaAttivita As New ItemAttivita
                    objRicercaAttivita.Sto_id_Doc = idDocumento
                    objRicercaAttivita.Sto_TipoAttivita = "FIRMA"
                    Select Case ENTE_INSTALLAZIONE
                        Case "REGIONE"
                            objRicercaAttivita.Sto_Livello = "UDD"
                        Case "ALSIA"
                            objRicercaAttivita.Sto_Livello = "UP"
                        Case Else
                            objRicercaAttivita.Sto_Livello = "UDD"
                    End Select

                    objRicercaAttivita.Sto_Ruolo = "R"
                    Dim listaAttivita As Generic.List(Of ItemAttivita) = LeggiDettaglioAttivita(objRicercaAttivita)
                    If listaAttivita.Count > 0 Then
                        'ha già firmato una votla
                        Dim dataPrimaFirma As DateTime = listaAttivita.Item(0).Sto_Data
                        For Each att As ItemAttivita In listaAttivita
                            If att.Sto_Data < dataPrimaFirma Then
                                dataPrimaFirma = att.Sto_Data
                            End If
                        Next
                        RS("Doc_data") = dataPrimaFirma
                    Else
                        ' RS("Doc_data") = Now
                    End If
                End If
            End If
        End If

        Call DB.UpdateRS(RS)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        If AvviaTransazione Then
            Call DB.CommitTrans()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
        End If

        vRitPar(0) = 0
        vRitPar(1) = numUtenteDocumento

FineSub:
        Errore = vRitPar(0)
        ErrDesc = vRitPar(1)
        Assegna_Numerazione_Definitiva = vRitPar
        On Error Resume Next
        If Not DB Is Nothing And IsNothing(DBChiamante) Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

RollTrans:
        If AvviaTransazione Then
            If Not DB Is Nothing Then
                Call DB.RollTrans()
                If DB.errore <> 0 Then
                    Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
                End If
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Function


    Function Assegna_Numerazione_Cronologia(ByVal iddocumentoLocale As String) As Object
        Return Assegna_Numerazione_Cronologia(, , iddocumentoLocale)
    End Function
    Friend Function Assegna_Numerazione_Cronologia(Optional ByVal DBChiamante As Object = Nothing, Optional ByVal AvviaTransazione As Boolean = True, Optional ByVal iddocumentoLocale As String = "") As Object
        Const SFunzione As String = "Assegna_Numerazione_Cronologia"

        If Not String.IsNullOrEmpty(iddocumentoLocale) Then
            idDocumento = iddocumentoLocale
        End If

        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim RS As Object = Nothing
        Dim vR As Object = Nothing

        Dim numUtenteDocumento As String
        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        If IsNothing(DBChiamante) Then
            VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
            'DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

            Call DB.ApriDB()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
                GoTo FineSub
            End If
        Else
            DB = DBChiamante
        End If

        If AvviaTransazione Then
            Call DB.BeginTrans()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
        End If

        Sqlq = " SELECT     Doc_NumDefinitivo " &
               " FROM Documento " &
               " WHERE     (Doc_Id = '" & idDocumento & "' )  "

        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        Dim tipoContatore As Boolean = False
        If Not RS.eof Then
            If tipoDocumento = 0 Then
                If IsDBNull(RS("Doc_NumDefinitivo").value) Then
                    If objDocumento.Doc_Cod_Uff_Pubblico.StartsWith("81") Then
                        vR = Calcola_Progressivo(DB, "NCDT", Year(Now), False, "81")
                    Else
                        vR = Calcola_Progressivo(DB, "NCDT", Year(Now), False, oOperatore.oUfficio.CodDipartimentoPubblico)
                    End If

                    If vR(0) <> 0 Then
                        vRitPar(0) = vR(0)
                        vRitPar(1) = vR(1)
                        GoTo RollTrans
                    End If
                    numUtenteDocumento = vR(1)
                    Dim u As New DllAmbiente.Ufficio
                    u.CodUfficio = objDocumento.Doc_Cod_Uff_Prop
                    u.CodUfficioPubblico = objDocumento.Doc_Cod_Uff_Pubblico
                    Dim d As New DllAmbiente.Ufficio
                    d.CodUfficio = u.CodUfficioDirigenzaDipartimento

                    Dim sottostringaIniziale As String()
                    sottostringaIniziale = numUtenteDocumento.Split("/")
                    If sottostringaIniziale.Length < 3 Then
                        numUtenteDocumento = Replace(sottostringaIniziale(0), d.leggiUfficioPubblico(d.CodUfficio), u.CodUfficioPubblico) & "/" & sottostringaIniziale(1)
                    Else
                        numUtenteDocumento = Replace(sottostringaIniziale(0), d.leggiUfficioPubblico(d.CodUfficio), u.CodUfficioPubblico)
                        For i As Int32 = 1 To sottostringaIniziale.Length - 1
                            numUtenteDocumento = numUtenteDocumento & "/" & sottostringaIniziale(i)
                        Next

                    End If
                    RS("Doc_NumDefinitivo") = numUtenteDocumento
                    'RS("Doc_data") = Now.Date
                    d = Nothing
                    u = Nothing
                End If
            End If
            'calcolo il progressivo unico delle delibere
            If tipoDocumento = 1 Then
                If IsDBNull(RS("Doc_NumDefinitivo").value) Then
                    vR = Calcola_Progressivo(DB, "NCDL", Year(Now), False, oOperatore.oUfficio.CodEnte)
                    If vR(0) <> 0 Then
                        vRitPar(0) = vR(0)
                        vRitPar(1) = vR(1)
                        GoTo RollTrans
                    End If
                    numUtenteDocumento = vR(1)
                    RS("Doc_NumDefinitivo") = numUtenteDocumento
                End If
            End If
            'calcolo il progressivo unico delle disposizioni
            If tipoDocumento = 2 Then
                If IsDBNull(RS("Doc_NumDefinitivo").value) Then
                    If objDocumento.Doc_Cod_Uff_Pubblico.StartsWith("81") Then
                        vR = Calcola_Progressivo(DB, "NUCDS", Year(Now), False, "81")
                    Else
                        vR = Calcola_Progressivo(DB, "NUCDS", Year(Now), False, oOperatore.oUfficio.CodDipartimentoPubblico)
                    End If

                    If vR(0) <> 0 Then
                        vRitPar(0) = vR(0)
                        vRitPar(1) = vR(1)
                        GoTo RollTrans
                    End If
                    numUtenteDocumento = vR(1)
                    Dim u As New DllAmbiente.Ufficio
                    u.CodUfficio = objDocumento.Doc_Cod_Uff_Prop
                    u.CodUfficioPubblico = objDocumento.Doc_Cod_Uff_Pubblico
                    Dim d As New DllAmbiente.Ufficio
                    d.CodUfficio = u.CodUfficioDirigenzaDipartimento

                    Dim sottostringaIniziale As String()
                    sottostringaIniziale = numUtenteDocumento.Split("/")
                    If sottostringaIniziale.Length < 3 Then
                        numUtenteDocumento = Replace(sottostringaIniziale(0), d.leggiUfficioPubblico(d.CodUfficio), u.CodUfficioPubblico) & "/" & sottostringaIniziale(1)
                    Else
                        numUtenteDocumento = Replace(sottostringaIniziale(0), d.leggiUfficioPubblico(d.CodUfficio), u.CodUfficioPubblico)
                        For i As Int32 = 1 To sottostringaIniziale.Length - 1
                            numUtenteDocumento = numUtenteDocumento & "/" & sottostringaIniziale(i)
                        Next

                    End If

                    RS("Doc_NumDefinitivo") = numUtenteDocumento
                    'RS("Doc_data") = Now.Date
                    d = Nothing
                    u = Nothing
                End If
            End If
        End If

        Call DB.UpdateRS(RS)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        If AvviaTransazione Then
            Call DB.CommitTrans()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
        End If

        vRitPar(0) = 0
        vRitPar(1) = numUtenteDocumento

FineSub:
        Errore = vRitPar(0)
        ErrDesc = vRitPar(1)
        Assegna_Numerazione_Cronologia = vRitPar
        On Error Resume Next
        If Not DB Is Nothing And IsNothing(DBChiamante) Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

RollTrans:
        If AvviaTransazione Then
            If Not DB Is Nothing Then
                Call DB.RollTrans()
                If DB.errore <> 0 Then
                    Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
                End If
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Function

    Private Function Crea_Documento_XHTML(ByVal template As String, ByVal sXmlDati As String, Optional ByVal sTestoDocumento As String = "") As Object
        'LU commentato per compilazione MSXML2.DOMDocument
        '        Const sFun As String = "Crea_Documento_XHTML"
        '        Dim vRit(1) As Object
        '        Dim xmlSource As MSXML2.DOMDocument
        '        Dim xmlOutput As MSXML2.DOMDocument
        '        Dim xmlXsl As MSXML2.DOMDocument
        '        Dim xslTemplate As MSXML2.XSLTemplate
        '        Dim xmlFoglioStile As MSXML2.DOMDocument
        '        Dim xmlStylesheet As MSXML2.FreeThreadedDOMDocument
        '        Dim xslProcessor As MSXML2.IXSLProcessor
        '        Dim nodoHeadXsl As MSXML2.IXMLDOMNode
        '        Dim nodoHeadCss As MSXML2.IXMLDOMNode
        '        Dim nodoTesto As MSXML2.IXMLDOMNode
        '        Dim sHTML As String

        '        On Error GoTo Herr

        '        xmlSource = New MSXML2.DOMDocument
        '        xmlOutput = New MSXML2.DOMDocument
        '        xslTemplate = New MSXML2.XSLTemplate
        '        xmlXsl = New MSXML2.DOMDocument
        '        xmlStylesheet = New MSXML2.FreeThreadedDOMDocument
        '        xmlFoglioStile = New MSXML2.DOMDocument
        '        vRit(0) = 0
        '        vRit(1) = ""

        '        'carico i dati
        '        xmlSource.loadXML(sXmlDati)
        '        If xmlSource.parseError.reason <> "" Then
        '            vRit(0) = xmlSource.parseError.errorCode
        '            vRit(1) = xmlSource.parseError.reason
        '            GoTo FineSuB
        '        End If

        '        'carico il modello xsl
        '        If template = "" Then
        '            vRit(0) = 1
        '            vRit(1) = "Parametri insufficienti"
        '            GoTo FineSuB
        '        End If

        '        xmlXsl.load(AppDomain.CurrentDomain.BaseDirectory + "risorse/" & template)

        '        If xmlXsl.parseError.reason <> "" Then
        '            vRit(0) = xmlXsl.parseError.errorCode
        '            vRit(1) = xmlXsl.parseError.reason
        '            GoTo FineSuB
        '        End If

        '        'carico il modello xsl
        '        xmlStylesheet.loadXML(xmlXsl.xml)
        '        If xmlStylesheet.parseError.reason <> "" Then
        '            vRit(0) = xmlStylesheet.parseError.errorCode
        '            vRit(1) = xmlStylesheet.parseError.reason
        '            GoTo FineSuB
        '        End If

        '        'creo l'xhtml
        '        xslTemplate.stylesheet = xmlStylesheet

        '        xslProcessor = xslTemplate.createProcessor

        '        xslProcessor.input = xmlSource

        '        xslProcessor.output = xmlOutput

        '        xslProcessor.transform()

        '        If xmlOutput.parseError.reason <> "" Then
        '            vRit(0) = xmlOutput.parseError.errorCode
        '            vRit(1) = xmlOutput.parseError.reason
        '            GoTo FineSuB
        '        End If

        '        'sostituisco il testo
        '        nodoTesto = xmlOutput.selectSingleNode("//td[@stesto='1']")
        '        If Not nodoTesto Is Nothing Then
        '            nodoTesto.text = "%testo%"

        '        End If

        '        sHTML = xmlOutput.xml
        '        sHTML = Replace(sHTML, "%testo%", sTestoDocumento)

        '        Dim bPdfFile() As Byte

        '        On Error GoTo HerrManyToPdf

        '        Dim cMany2PDFX As New Many2PDFX.gtMany2PDFXClass
        '        cMany2PDFX.ActivateLicense("A474CE1E-1FF3-4010-B62E-16C8BC64BA8D")
        '        cMany2PDFX.PrefOpenAfterCreate = False

        '        'Vittorio 28 07 2006 Sostituita libreria per creazione PDF
        '        cMany2PDFX.LoadFromString(sHTML, Many2PDFX.TxgtFormatType.ftHTML)
        '        'cMany2PDFX.LoadFromHtmlString(sHTML)

        '        cMany2PDFX.PrefShowSetupDialog = False
        '        cMany2PDFX.OutputToStream = True
        '        cMany2PDFX.RenderDocument()

        '        bPdfFile = cMany2PDFX.OutputPDFStream

        '        vRit(1) = 0
        '        vRit(1) = bPdfFile


        'FineSuB:
        '        Crea_Documento_XHTML = vRit
        '        On Error Resume Next
        '        If Errore <> 0 Then
        '            Call SISTEMA.Registra_Log(Errore & "- " & ErrDesc, sFun)
        '        End If
        '        xmlSource = Nothing
        '        xmlOutput = Nothing
        '        xslTemplate = Nothing
        '        xmlStylesheet = Nothing
        '        xslProcessor = Nothing
        '        xmlFoglioStile = Nothing
        '        On Error GoTo 0
        '        Exit Function

        'Herr:
        '        vRit(0) = Err.Number
        '        vRit(1) = Err.Description
        '        GoTo FineSuB

        'HerrManyToPdf:
        '        vRit(0) = Err.Number
        '        vRit(1) = "Errore su creazione Many2Pdf " & Err.Description
        '        GoTo FineSuB
    End Function

    Friend Function FO_Elenco_Messaggi(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Elenco_Messaggi"
        Dim vRitPar(3) As Object
        Dim Sqlq As String
        Dim rdr As SqlClient.SqlDataReader

        Dim destinatario As String
        Dim idDocumento As String
        Log.Debug(oOperatore.Codice & ":Inizio " & SFunzione)


        Try
            destinatario = vParm(Dic_FODocumentale.vc_Elenco_Messaggi.c_destinatario)
            If Trim(destinatario) = "" Then
                destinatario = oOperatore.Codice
            End If

            idDocumento = vParm(Dic_FODocumentale.vc_Elenco_Messaggi.c_IdDocumento) & ""

            vRitPar(0) = 0
            vRitPar(1) = ""

            Call Scarica_Messaggi(destinatario)

            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
            If Not String.IsNullOrEmpty(idDocumento) Then

                If vParm(Dic_FODocumentale.vc_Elenco_Messaggi.c_inviati) = 1 Then
                    Sqlq = "SELECT     Messaggi.Msg_id, './risorse/immagini/inviato.gif'  AS img, " &
                       "            destinatari.Op_Cognome + ' ' + destinatari.Op_Nome AS mittente, mittente.Op_Cognome + ' ' + mittente.Op_Nome AS destinatario, " &
                       "        CONVERT(date, Casella_Messaggi_Utente.Cmu_Data_Notifica,102) , isnull(Messaggi.Msg_testo ,'') as Msg_testo ,  '' as link " &
                       " FROM         Messaggi LEFT OUTER JOIN " &
                       "                       Tab_Operatori mittente ON Messaggi.Msg_mittente = mittente.Op_Codice_Operatore  LEFT OUTER JOIN " &
                       "                       Tab_Operatori destinatari ON Messaggi.Msg_destinatario = destinatari.Op_Codice_Operatore  " &
                       " INNER JOIN    Casella_Messaggi_Utente ON Casella_Messaggi_Utente.Cmu_idMessaggio = Messaggi.Msg_id " &
                       " WHERE   (Messaggi.Msg_mittente = '" & destinatario & "') "
                    ' la query tira fuori tutti i messaggi inviati, senza tener conto di queli cancellati dal destinatario
                Else
                    Sqlq = "SELECT     Messaggi.Msg_id,case when ISNULL(CAST(Messaggi.Msg_dataLettura AS varchar(30)), '') = '' THEN './risorse/immagini/daleggere.gif' ELSE './risorse/immagini/letto.gif' END   AS img, " &
                     "            mittente.Op_Cognome + ' ' + mittente.Op_Nome AS mittente, destinatari.Op_Cognome + ' ' + destinatari.Op_Nome AS destinatario, " &
                     "          CONVERT(date, Casella_Messaggi_Utente.Cmu_Data_Notifica,102) , isnull(Messaggi.Msg_testo ,'') as Msg_testo ,  '' as link " &
                     " FROM         Messaggi LEFT OUTER JOIN " &
                     "                       Tab_Operatori mittente ON Messaggi.Msg_mittente = mittente.Op_Codice_Operatore  LEFT OUTER JOIN " &
                     "                       Tab_Operatori destinatari ON Messaggi.Msg_destinatario = destinatari.Op_Codice_Operatore  " &
                     " INNER JOIN    Casella_Messaggi_Utente ON Casella_Messaggi_Utente.Cmu_idMessaggio = Messaggi.Msg_id " &
                    " WHERE     (Messaggi.Msg_cancellato = 0)"

                    Sqlq = Sqlq & " AND (Messaggi.Msg_destinatario = '" & destinatario & "') "

                End If

                Sqlq = Sqlq & " AND (Casella_Messaggi_Utente.Cmu_iddocumento = '" & idDocumento & "')"
            Else


                'leggo i messaggi degli atti che nn sn ancora arrivati in archivio.
                If vParm(Dic_FODocumentale.vc_Elenco_Messaggi.c_inviati) = 1 Then
                    Sqlq = "SELECT     Messaggi.Msg_id, './risorse/immagini/inviato.gif'  AS img, " &
                       "            destinatari.Op_Cognome + ' ' + destinatari.Op_Nome AS mittente, mittente.Op_Cognome + ' ' + mittente.Op_Nome AS destinatario, " &
                       "          CONVERT(date, Casella_Messaggi_Utente.Cmu_Data_Notifica,102) , isnull(Messaggi.Msg_testo ,'') as Msg_testo ,  '' as link " &
                       " FROM         Messaggi LEFT OUTER JOIN " &
                       "                       Tab_Operatori mittente ON Messaggi.Msg_mittente = mittente.Op_Codice_Operatore  LEFT OUTER JOIN " &
                       "                       Tab_Operatori destinatari ON Messaggi.Msg_destinatario = destinatari.Op_Codice_Operatore  " &
                       " INNER JOIN    Casella_Messaggi_Utente ON Casella_Messaggi_Utente.Cmu_idMessaggio = Messaggi.Msg_id " &
                       " INNER JOIN      Stato_Istanza_Documento ON Casella_Messaggi_Utente.Cmu_iddocumento = Stato_Istanza_Documento.Doc_Id " &
                      " WHERE   (Messaggi.Msg_mittente = '" & destinatario & "') AND (Messaggi.Msg_cancellato = 0) " 'and   (Stato_Istanza_Documento.Livello_Ufficio <> 'UAR') "
                    ' la query tira fuori tutti i messaggi inviati, senza tener conto di queli cancellati dal destinatario
                Else
                    Sqlq = "SELECT     Messaggi.Msg_id,case when ISNULL(CAST(Messaggi.Msg_dataLettura AS varchar(30)), '') = '' THEN './risorse/immagini/daleggere.gif' ELSE './risorse/immagini/letto.gif' END   AS img, " &
                     "            mittente.Op_Cognome + ' ' + mittente.Op_Nome AS mittente, destinatari.Op_Cognome + ' ' + destinatari.Op_Nome AS destinatario, " &
                     "          CONVERT(date, Casella_Messaggi_Utente.Cmu_Data_Notifica,102) , isnull(Messaggi.Msg_testo ,'') as Msg_testo ,  '' as link " &
                     " FROM         Messaggi LEFT OUTER JOIN " &
                     "                       Tab_Operatori mittente ON Messaggi.Msg_mittente = mittente.Op_Codice_Operatore  LEFT OUTER JOIN " &
                     "                       Tab_Operatori destinatari ON Messaggi.Msg_destinatario = destinatari.Op_Codice_Operatore  " &
                     " INNER JOIN    Casella_Messaggi_Utente ON Casella_Messaggi_Utente.Cmu_idMessaggio = Messaggi.Msg_id " &
                     " INNER JOIN      Stato_Istanza_Documento ON Casella_Messaggi_Utente.Cmu_iddocumento = Stato_Istanza_Documento.Doc_Id " &
                     " WHERE     (Messaggi.Msg_cancellato = 0) " 'and   (Stato_Istanza_Documento.Livello_Ufficio <> 'UAR')"

                    Sqlq = Sqlq & " AND (Messaggi.Msg_destinatario = '" & destinatario & "') "

                End If


            End If

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)

            Dim returnListaMessaggi As New Collections.Generic.List(Of MessaggioInfo)
            Dim messaggio As DllDocumentale.Model.MessaggioInfo
            While (rdr.Read)
                messaggio = New MessaggioInfo
                If Not rdr.IsDBNull(0) Then messaggio.Id = rdr.GetInt32(0).ToString
                If Not rdr.IsDBNull(1) Then messaggio.Img = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then messaggio.Mittente = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then messaggio.Destinatario = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then messaggio.Data = rdr.GetDateTime(4)
                If Not rdr.IsDBNull(5) Then messaggio.Testo = rdr.GetString(5)

                returnListaMessaggi.Add(messaggio)
            End While
            rdr.Close()
            vRitPar(0) = 0
            vRitPar(1) = returnListaMessaggi

        Catch ex As Exception
            Log.Error(oOperatore.Codice & ":" & ex.Message)
            vRitPar(0) = 1
            vRitPar(1) = Nothing
        Finally
            Log.Debug(oOperatore.Codice & ":Fine")
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try
        FO_Elenco_Messaggi = vRitPar

    End Function

    Friend Function FO_Leggi_Messaggio(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Leggi_Messaggio"
        Dim vRitPar(3) As Object
        Dim vRit(4) As Object
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object
        Dim RS As Object

        Dim idMessaggio As String

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        idMessaggio = vParm(Dic_FODocumentale.vc_Leggi_Messaggio.c_idMessaggio) & ""
        If Trim(idMessaggio) = "" Then
            vRitPar(0) = 1
            vRitPar(1) = "Parametri insufficienti"
            GoTo FineSub
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        ' DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Call DB.BeginTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        Sqlq = "SELECT     Tab_Operatori_mittenti.Op_Cognome + ' ' + Tab_Operatori_mittenti.Op_Nome AS nominativoMittente, " &
               "           Tab_Operatori_destinatari.Op_Cognome + ' ' + Tab_Operatori_destinatari.Op_Nome AS nominativoDestinatario, " &
               "           Messaggi.Msg_testo, Messaggi.Msg_dataInoltro , Messaggi.Msg_dataLettura " &
               " FROM         Messaggi INNER JOIN " &
               "           Tab_Operatori Tab_Operatori_mittenti ON Messaggi.Msg_mittente = Tab_Operatori_mittenti.Op_Codice_Operatore INNER JOIN " &
               "           Tab_Operatori Tab_Operatori_destinatari ON Messaggi.Msg_destinatario = Tab_Operatori_destinatari.Op_Codice_Operatore " &
               " WHERE     (Messaggi.Msg_id = " & idMessaggio & ")"

        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        If RS.EOF Then
            vRitPar(0) = 1
            vRitPar(1) = "Il messaggio non esiste"
            GoTo RollTrans
        Else

            If IsDBNull(RS("Msg_dataLettura").value) Then

                Call DB.EditRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    GoTo RollTrans
                End If
                RS("Msg_dataLettura") = Now

                Call DB.UpdateRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    GoTo RollTrans
                End If
            End If
        End If

        vRit(0) = RS("nominativoMittente").Value
        vRit(1) = RS("nominativoDestinatario").Value
        vRit(2) = RS("Msg_testo").Value
        vRit(3) = RS("Msg_dataInoltro").Value
        vRit(4) = RS("Msg_dataLettura").Value

        Call DB.CommitTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        vRitPar(0) = 0
        vRitPar(1) = vRit

FineSub:
        FO_Leggi_Messaggio = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Function

    Friend Function FO_Cancella_Messaggio(ByVal vParm As Object) As Object

        Const SFunzione As String = "FO_Cancella_Messaggio"
        Dim vRitPar(2) As Object
        Dim vP(1, 1) As Object
        Dim vR As Object = Nothing
        Dim sWhere As String
        Dim DB As Object = Nothing

        Dim idMessaggio As String
        Dim cancella As Boolean

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        sWhere = "(Msg_id = " & vParm(0) & ")"
        vP(0, 0) = "Msg_Cancellato"
        vP(0, 1) = 1
        vR = GDB.DBUpdate_SQL(DB, "Messaggi", vP, sWhere)
        If vR(0) <> 0 Then
            vRitPar(0) = vR(0)
            vRitPar(1) = vR(1)
            GoTo FineSub
        End If


        vRitPar(0) = 0
        vRitPar(1) = vR(1)

FineSub:
        FO_Cancella_Messaggio = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Function

    Public Function FO_Elenco_Allegati(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Elenco_Allegati"
        Dim vRitPar(4) As Object
        Dim vRitSql As Object
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        Dim autore As String
        Dim tipoAllegati As Integer
        Dim allDocumento As Boolean
        Dim daStampare As String

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""

        idDocumento = vParm(Dic_FODocumentale.vc_Elenco_Allegati.c_idDocumento) & ""
        autore = vParm(Dic_FODocumentale.vc_Elenco_Allegati.c_autore) & ""
        tipoAllegati = -1
        If Not vParm(Dic_FODocumentale.vc_Elenco_Allegati.c_tipoAllegati) Is Nothing Then
            If IsNumeric(vParm(Dic_FODocumentale.vc_Elenco_Allegati.c_tipoAllegati)) Then
                tipoAllegati = vParm(Dic_FODocumentale.vc_Elenco_Allegati.c_tipoAllegati)
            End If
        End If

        allDocumento = (vParm(Dic_FODocumentale.vc_Elenco_Allegati.c_allDocumento) = 1)
        If allDocumento Then
            tipoAllegati = tipoAllegatoDocumento
        End If

        daStampare = vParm(Dic_FODocumentale.vc_Elenco_Allegati.c_daStampare)

        If Trim(idDocumento) = "" Then
            vRitPar(0) = "1"
            vRitPar(1) = "Parametri insufficienti"
            GoTo FineSub
        End If

        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Dim where As String = ""
        If tipoAllegati >= 0 Then
            where = " AND (Allegati.All_Tipo = " & tipoAllegati & ") "
        End If

        If Not daStampare Is Nothing Then
            where = where & " AND (Tab_Tipo_Allegato.Tta_DaStampare = 1 ) "
        End If

        Sqlq = "SELECT All_idAllegato, Tta_descrizione, All_nome, Tea_nomeEstensione, Autore, l, Tta_annullabile, Modalita, Destinatari " &
         " FROM         (SELECT     Allegati.All_idAllegato, Tab_Tipo_Allegato.Tta_descrizione, CAST(Allegati.All_nome AS varchar(40)) AS All_nome,                                        " &
         "                                               Tab_Estensione_Allegati.Tea_nomeEstensione, Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome AS Autore, '' AS l,            " &
         "                                               Tab_Tipo_Allegato.Tta_annullabile, ISNULL(Allegati.All_Modalita, '') AS Modalita, ISNULL(Allegati.All_destinatari, '') AS Destinatari,     " &
         "                                               Tab_Tipo_Allegato.Tta_inFascicolo                                                                                                 " &
         "                        FROM          Allegati INNER JOIN                                                                                                                        " &
         "                                               Tab_Tipo_Allegato ON Allegati.All_Tipo = Tab_Tipo_Allegato.Tta_tipoAllegato INNER JOIN                                            " &
         "                                               Tab_Estensione_Allegati ON Allegati.All_estensione = Tab_Estensione_Allegati.Tea_codEstensione LEFT OUTER JOIN                    " &
         "                                               Tab_Operatori ON Allegati.All_autore = Tab_Operatori.Op_Codice_Operatore COLLATE Latin1_General_CI_AS                             " &
         "                        WHERE      (Allegati.All_Documento = '" & idDocumento & "') AND (ISNULL(Allegati.All_Annullato, 0) <> 1) AND (Tab_Tipo_Allegato.Tta_inFascicolo > 0) AND " &
         "                                               (Tab_Tipo_Allegato.Tta_VisualizzaTutti = 0) " & where & " AND (Allegati.All_idAllegato IN                                                       " &
         "                                                   (SELECT     MAX(Allegati.All_idAllegato)                                                                                      " &
         "                                                     FROM          Allegati INNER JOIN                                                                                           " &
         "                                                                            Tab_Tipo_Allegato ON Allegati.All_Tipo = Tab_Tipo_Allegato.Tta_tipoAllegato                          " &
         "                                                     WHERE      (Allegati.All_Documento = '" & idDocumento & "') AND (ISNULL(Allegati.All_Annullato, 0) <> 1) AND                " &
         "                                                                            (Tab_Tipo_Allegato.Tta_VisualizzaTutti = 0)  " & where &
         "                                                     GROUP BY Allegati.All_Documento, Allegati.All_Tipo))                                                                        " &
         "                        UNION                                                                                                                                                    " &
         "                        SELECT     Allegati.All_idAllegato, Tab_Tipo_Allegato.Tta_descrizione, CAST(Allegati.All_nome AS varchar(40)) AS All_nome,                               " &
         "                                              Tab_Estensione_Allegati.Tea_nomeEstensione, Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome AS Autore, '' AS l,             " &
         "                                              Tab_Tipo_Allegato.Tta_annullabile, ISNULL(Allegati.All_Modalita, '') AS Modalita, ISNULL(Allegati.All_destinatari, '') AS Destinatari,      " &
         "                                              Tab_Tipo_Allegato.Tta_inFascicolo                                                                                                  " &
         "                        FROM         Allegati INNER JOIN                                                                                                                         " &
         "                                              Tab_Tipo_Allegato ON Allegati.All_Tipo = Tab_Tipo_Allegato.Tta_tipoAllegato INNER JOIN                                             " &
         "                                              Tab_Estensione_Allegati ON Allegati.All_estensione = Tab_Estensione_Allegati.Tea_codEstensione LEFT OUTER JOIN                     " &
         "                                              Tab_Operatori ON Allegati.All_autore = Tab_Operatori.Op_Codice_Operatore COLLATE Latin1_General_CI_AS                              " &
         "                        WHERE     (Allegati.All_Documento = '" & idDocumento & "') " & where & " AND (ISNULL(Allegati.All_Annullato, 0) <> 1) AND (Tab_Tipo_Allegato.Tta_inFascicolo > 0) AND  " &
         "                                              (Tab_Tipo_Allegato.Tta_VisualizzaTutti = 1))Allegati  "

        If Trim(autore) <> "" Then
            Sqlq = Sqlq & " AND ( Allegati.All_autore = '" & autore & "' ) "
        End If
        Sqlq = Sqlq & " ORDER BY Allegati.Tta_inFascicolo "

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)

        vRitPar(0) = vR(0)
        vRitPar(1) = vR(1)
        vRitPar(2) = tipoDocumento

        Sqlq = "SELECT    Max(All_Versione) " &
         "                        FROM         Allegati " &
         "                        WHERE     (Allegati.All_Documento = '" & idDocumento & "') AND (ISNULL(Allegati.All_Annullato, 0) <> 1)  "
        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)
        vRitPar(4) = vR(1)(0, 0)


FineSub:
        FO_Elenco_Allegati = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo FineSub
        ' Resume
    End Function

    Public Function FO_Elenco_Allegati_Da_Stampare(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Elenco_Allegati_Da_Stampare"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        Dim autore As String
        Dim tipoAllegati As Integer
        Dim allDocumento As Boolean

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""

        idDocumento = vParm(Dic_FODocumentale.vc_Elenco_Allegati.c_idDocumento) & ""
        autore = vParm(Dic_FODocumentale.vc_Elenco_Allegati.c_autore) & ""
        tipoAllegati = -1
        If Not vParm(Dic_FODocumentale.vc_Elenco_Allegati.c_tipoAllegati) Is Nothing Then
            If IsNumeric(vParm(Dic_FODocumentale.vc_Elenco_Allegati.c_tipoAllegati)) Then
                tipoAllegati = vParm(Dic_FODocumentale.vc_Elenco_Allegati.c_tipoAllegati)
            End If
        End If

        allDocumento = (vParm(Dic_FODocumentale.vc_Elenco_Allegati.c_allDocumento) = 1)
        If allDocumento Then
            tipoAllegati = tipoAllegatoDocumento
        End If

        If Trim(idDocumento) = "" Then
            vRitPar(0) = "1"
            vRitPar(1) = "Parametri insufficienti"
            GoTo FineSub
        End If

        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        ' DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Sqlq = "SELECT  Allegati.All_idAllegato ,  Tab_Tipo_Allegato.Tta_descrizione, cast(Allegati.All_nome as varchar(40))  as All_nome, Tab_Estensione_Allegati.Tea_nomeEstensione, " &
              "           Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome as Autore , '' as l, Tab_Tipo_Allegato.Tta_annullabile , isnull(All_modalita,'') , isnull(All_destinatari,'')   " &
              " FROM         Allegati INNER JOIN " &
              "              Tab_Tipo_Allegato ON Allegati.All_Tipo = Tab_Tipo_Allegato.Tta_tipoAllegato INNER JOIN " &
              "              Tab_Estensione_Allegati ON Allegati.All_estensione = Tab_Estensione_Allegati.Tea_codEstensione  LEFT OUTER JOIN " &
              "              Tab_Operatori ON Allegati.All_autore = Tab_Operatori.Op_Codice_Operatore COLLATE Latin1_General_CI_AS " &
              " WHERE ( All_Documento = '" & idDocumento & "' ) AND  (ISNULL(Allegati.All_Annullato, 0) <> 1) " &
              "         AND ( Tab_Tipo_Allegato.Tta_inFascicolo > 0 )  "

        If tipoAllegati >= 0 Then
            Sqlq = Sqlq & " AND (Allegati.All_Tipo = " & tipoAllegati & ") "
        End If

        If Trim(autore) <> "" Then
            Sqlq = Sqlq & " AND ( All_autore = '" & autore & "' ) "
        End If
        Sqlq = Sqlq & " ORDER BY Tab_Tipo_Allegato.Tta_inFascicolo "

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)

        vRitPar(0) = vR(0)
        vRitPar(1) = vR(1)
        vRitPar(2) = tipoDocumento

FineSub:
        FO_Elenco_Allegati_Da_Stampare = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo FineSub
        ' Resume
    End Function

    Friend Function FO_Elenco_Lettere(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Elenco_Lettere"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        Dim tipoLettere As Integer
        Dim statoLettera As String

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""

        'utente.Codice = vParm(Dic_FODocumentale.vc_Elenco_Lettere.c_utente)
        tipoLettere = -1
        If Not vParm(Dic_FODocumentale.vc_Elenco_Lettere.c_tipoLettera) Is Nothing Then
            If IsNumeric(vParm(Dic_FODocumentale.vc_Elenco_Lettere.c_tipoLettera)) Then
                tipoLettere = vParm(Dic_FODocumentale.vc_Elenco_Lettere.c_tipoLettera)
            End If
        End If
        statoLettera = 0
        If Not vParm(Dic_FODocumentale.vc_Elenco_Lettere.c_statoLettera) Is Nothing Then
            If IsNumeric(vParm(Dic_FODocumentale.vc_Elenco_Lettere.c_statoLettera)) Then
                statoLettera = vParm(Dic_FODocumentale.vc_Elenco_Lettere.c_statoLettera)
            End If
        End If
        tipoDocumento = 0
        If Not vParm(Dic_FODocumentale.vc_Elenco_Lettere.c_tipoDocumento) Is Nothing Then
            If IsNumeric(vParm(Dic_FODocumentale.vc_Elenco_Lettere.c_tipoDocumento)) Then
                tipoDocumento = vParm(Dic_FODocumentale.vc_Elenco_Lettere.c_tipoDocumento)
            End If
        End If

        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Sqlq = "SELECT DISTINCT Lettere_Documenti.Ltd_tipoLettera,   Tab_Tipo_Lettera.Ttl_descrizione, Tab_Tipo_Lettera.Ttl_memo " &
               " FROM    Lettere_Documenti INNER JOIN " &
               "         Tab_Tipo_Lettera ON Lettere_Documenti.Ltd_tipoLettera = Tab_Tipo_Lettera.Ttl_tipoLettera " &
               " WHERE Lettere_Documenti.Ltd_ufficio = '" & oOperatore.oUfficio.CodUfficio & "' " &
               " " ' AND (isnull(Ltd_idAllegato,'') = '') AND (isnull(Ltd_Stampata,0) = 0)"

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)
        If vR(0) <> 0 Then
            vRitPar(0) = 1
            vRitPar(1) = vR(1)
            GoTo FineSub
        End If
        vRitPar(0) = 0
        vRitPar(1) = vR(1)

        Select Case statoLettera
            Case Is <= 0 'lettera da produrre
                Sqlq = "SELECT     Lettere_Documenti.Ltd_idDocumento, ISNULL(Documento.Doc_numero, Documento.Doc_numeroProvvisorio) AS doc_numero, " &
                    " Documento.Doc_oggetto , Lettere_Documenti.Ltd_data  " &
                    " FROM Lettere_Documenti INNER JOIN " &
                    " Documento ON Lettere_Documenti.Ltd_idDocumento = Documento.Doc_Id INNER JOIN " &
                    " Tab_Tipo_Lettera ON Lettere_Documenti.Ltd_tipoLettera = Tab_Tipo_Lettera.Ttl_tipoLettera " &
                    " WHERE (Lettere_Documenti.Ltd_ufficio = '" & oOperatore.oUfficio.CodUfficio & "')"
            Case Is > 0
                Sqlq = " SELECT  distinct   Lettere_Documenti.Ltd_idAllegato, Lettere_Documenti.Ltd_descrizione , CONVERT(varchar(10), Lettere_Documenti.Ltd_data, 103), isnull(Lettere_Documenti.Ltd_idAllegato,'') " &
                    " FROM Lettere_Documenti INNER JOIN " &
                    " Documento ON Lettere_Documenti.Ltd_idDocumento = Documento.Doc_Id INNER JOIN " &
                    " Tab_Tipo_Lettera ON Lettere_Documenti.Ltd_tipoLettera = Tab_Tipo_Lettera.Ttl_tipoLettera " &
                    " WHERE (Lettere_Documenti.Ltd_ufficio = '" & oOperatore.oUfficio.CodUfficio & "')"
        End Select


        If tipoLettere < 0 Then
            tipoLettere = vR(1)(0, 0)
        End If
        Sqlq = Sqlq & " AND (Tab_Tipo_Lettera.Ttl_tipoLettera = " & tipoLettere & ") "

        If tipoDocumento >= 0 Then
            Sqlq = Sqlq & " AND (Tab_Tipo_Lettera.Ttl_documento = " & tipoDocumento & ") "
        End If

        Select Case statoLettera
            Case Is <= 0 'lettera da produrre
                Sqlq = Sqlq & " AND (isnull(Lettere_Documenti.Ltd_idAllegato,'') = '') AND (isnull(Lettere_Documenti.Ltd_Stampata,0) = 0) "
            Case 1 'lettera prodotta, da stampare
                Sqlq = Sqlq & " AND (isnull(Lettere_Documenti.Ltd_idAllegato,'') <> '') AND (isnull(Lettere_Documenti.Ltd_Stampata,0) = 0) "
            Case 2 'lettera prodotta, stampata, da ristampare
                Sqlq = Sqlq & " AND (isnull(Lettere_Documenti.Ltd_idAllegato,'') <> '') AND (isnull(Lettere_Documenti.Ltd_Stampata,0) <> 0) "
            Case Else
        End Select


        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)

        vRitPar(0) = vR(0)
        vRitPar(2) = vR(1)

FineSub:
        FO_Elenco_Lettere = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo FineSub
        ' Resume
    End Function


    Public Function FO_Aggiorna_Appendice(ByVal vParm As Object, Optional ByVal DBChiamante As Object = Nothing, Optional ByVal AvviaTransazione As Boolean = True) As Object
        Const SFunzione As String = "FO_Aggiorna_Appendice"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim DBLOG As Object = Nothing
        Dim RS As Object = Nothing

        Dim idAllegato As String

        Dim binarioAllegato() As Byte

        Dim vP(2) As Object
        Dim vR As Object = Nothing




        On Error GoTo Herr

        idAllegato = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_idAllegato) & ""
        binarioAllegato = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_binarioAllegato)


        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If


        If IsNothing(DBChiamante) Then
            VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
            'DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

            Call DB.ApriDB()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo FineSub
            End If
        Else
            DB = DBChiamante
        End If






        'salvo il riferimento alla versione che sto firmando o caricando




        If AvviaTransazione Then
            Call DB.BeginTrans()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
        End If


        Sqlq = "SELECT     All_idAllegato, All_Documento, All_versione, All_Tipo, All_Allegato, All_nome, All_estensione, " &
          "           All_firmato, All_autore, All_dataRegistrazione, All_Operatore,All_destinatari,All_modalita,All_riferimento_Appendice " &
          " FROM         Allegati " &
          " WHERE (All_idAllegato = '" & idAllegato & "') "

        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        If RS.EOF Then
            'errore allegato non trovato 
        Else
            Call DB.EditRS(RS)
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If

        End If

        RS.Fields("All_Allegato").AppendChunk(binarioAllegato)


        Call DB.UpdateRS(RS)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If





        If AvviaTransazione Then
            Call DB.CommitTrans()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
        End If

        vRitPar(0) = 0
        vRitPar(1) = idAllegato

FineSub:
        FO_Aggiorna_Appendice = vRitPar
        On Error Resume Next
        If Not DB Is Nothing And IsNothing(DBChiamante) Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If
        If Not DBLOG Is Nothing Then
            Call DBLOG.ChiudiDB()
            DBLOG = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

RollTrans:
        If AvviaTransazione Then
            If Not DB Is Nothing Then
                Call DB.RollTrans()
                If DB.errore <> 0 Then
                    Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
                End If
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Function



    Public Function FO_Registra_Allegato(ByVal vParm As Object, Optional ByVal DBChiamante As Object = Nothing, Optional ByVal AvviaTransazione As Boolean = True) As Object
        Const SFunzione As String = "FO_Registra_Allegato"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim DBLOG As Object = Nothing
        Dim RS As Object = Nothing

        Dim idAllegato As String
        Dim codTipo As Integer
        Dim descTipo As String
        Dim binarioAllegato() As Byte
        Dim nome As String
        Dim codEstensione As Integer
        Dim descEstensione As String
        Dim firmato As Integer
        Dim autore As String
        Dim vP(2) As Object
        Dim vR As Object = Nothing
        Dim tipoAttivita As String
        Dim versioneAllegato As Integer
        Dim destinatari As String
        Dim modalita As String
        Dim controlloIstanzaPerUtente As Boolean
        Dim flagRegistraAttivita As Boolean
        Dim riferimento_Appendice As String
        Dim flagTrasformaInPdf As Boolean

        On Error GoTo Herr

        idAllegato = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_idAllegato) & ""
        idDocumento = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_idDocumento) & ""
        codTipo = IIf(IsNumeric(vParm(Dic_FODocumentale.vc_Registra_Allegato.c_codTipo)), CInt(vParm(Dic_FODocumentale.vc_Registra_Allegato.c_codTipo)), -1)
        descTipo = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_descTipo) & ""
        binarioAllegato = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_binarioAllegato)
        nome = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_nome)
        codEstensione = IIf(IsNumeric(vParm(Dic_FODocumentale.vc_Registra_Allegato.c_codEstensione)), CInt(vParm(Dic_FODocumentale.vc_Registra_Allegato.c_codEstensione)), -1)
        descEstensione = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_descEstensione)
        firmato = IIf(vParm(Dic_FODocumentale.vc_Registra_Allegato.c_firmato) = "1", 1, 0)
        autore = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_autore)
        versioneAllegato = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_versioneAllegato)
        destinatari = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_destinatari)
        modalita = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_modalita)
        riferimento_Appendice = "" & vParm(Dic_FODocumentale.vc_Registra_Allegato.c_riferimento_Appendice)

        If vParm(Dic_FODocumentale.vc_Registra_Allegato.c_controlloIstanza) Is Nothing Then
            controlloIstanzaPerUtente = True
        Else
            controlloIstanzaPerUtente = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_controlloIstanza)
        End If
        If vParm(Dic_FODocumentale.vc_Registra_Allegato.c_copiaFirmatoDoc) Then
            codTipo = tipoAllegatoDocumentoFirmato
        End If

        If vParm(Dic_FODocumentale.vc_Registra_Allegato.c_flagRegistraAttivita) Is Nothing Then
            flagRegistraAttivita = True
        Else
            flagRegistraAttivita = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_flagRegistraAttivita)
        End If

        If vParm(Dic_FODocumentale.vc_Registra_Allegato.c_flag_Trasforma_In_Pdf) Is Nothing Then
            flagTrasformaInPdf = True
        Else
            flagTrasformaInPdf = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_flag_Trasforma_In_Pdf)
        End If

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        If Trim(idDocumento) = "" Then
            vRitPar(0) = 1
            vRitPar(1) = "Parametri insufficienti"
            GoTo FineSub
        End If

        If IsNothing(DBChiamante) Then
            VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
            ' DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

            Call DB.ApriDB()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo FineSub
            End If
        Else
            DB = DBChiamante
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE_LOG", DBLOG)
        ' DBLOG = SISTEMA.PROCDB.Item("DOCUMENTALE_LOG")
        Call DBLOG.ApriDB()
        If DBLOG.errore <> 0 Then
            vRitPar(0) = DBLOG.errore
            vRitPar(1) = DBLOG.ErrDescr
            GoTo FineSub
        End If
        If controlloIstanzaPerUtente Then
            Sqlq = "SELECT    Doc_id_WFE  " &
                   " FROM         Documento " &
                   " WHERE (Doc_Id = '" & idDocumento & "')"

            vP(0) = DB
            vP(1) = Sqlq
            vP(2) = 2

            vR = GDB.DBQuery(vP)

            If vR(0) <> 0 And vR(0) <> 1 Then
                vRitPar(0) = vR(0)
                vRitPar(1) = vR(1)
                GoTo FineSub
            End If

            'verifico se la proposta è ancora assegnata all'utente
            idIstanzaWFE = vR(1)(0, 0) + ""

            vR = Leggi_StatoIstanza_WFE(idIstanzaWFE, oOperatore.Codice)

            If vR(0) <> 0 Then
                vRitPar(0) = vR(0)
                vRitPar(1) = vR(1)
                GoTo FineSub
            End If
            Dim attoreCorrente As String
            attoreCorrente = vR(1)(2) & ""
            If UCase(Trim(attoreCorrente)) <> UCase(Trim(oOperatore.Codice)) Then
                vRitPar(0) = "1"
                vRitPar(1) = "L'utente non ha più in carico il documento"
                GoTo FineSub
            End If
        End If


        'controllo se esiste il tipo estensione
        Sqlq = "SELECT     Tea_codEstensione, Tea_nomeEstensione " &
               " FROM         Tab_Estensione_Allegati " &
               " WHERE  ( Tea_codEstensione = '" & codEstensione & "' )"

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)

        If vR(0) <> 0 And vR(0) <> 1 Then
            vRitPar(0) = vR(0)
            vRitPar(1) = vR(1)
            GoTo FineSub
        End If

        If vR(0) = 1 Then
            Sqlq = "SELECT   Tea_codEstensione,  Tea_descrizione, Tea_nomeEstensione , Tes_contentType " &
                   " FROM         Tab_Estensione_Allegati " &
                   " WHERE  ( Tea_nomeEstensione = '" & descEstensione & "' )"

            RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If

            If RS.EOF Then
                Call DB.AddRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    GoTo RollTrans
                End If
                RS("Tea_nomeEstensione") = descEstensione
                RS("Tea_descrizione") = "Sconosciuta"
                RS("Tes_contentType") = ""

                Call DB.UpdateRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    GoTo RollTrans
                End If
            End If
            codEstensione = RS("Tea_codEstensione").value
            Call DB.ChiudiRS(RS)
        End If

        'controllo se esiste il tipo allegato
        Sqlq = "SELECT     Tta_tipoAllegato, Tta_descBreve ,Tta_descrizione  , Tta_attivitaDoc " &
               " FROM         Tab_Tipo_Allegato " &
               " WHERE  ( Tta_tipoAllegato = " & codTipo & " )"

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)

        If vR(0) <> 0 And vR(0) <> 1 Then
            vRitPar(0) = vR(0)
            vRitPar(1) = vR(1)
            GoTo FineSub
        End If

        If vR(0) = 1 Then
            Sqlq = "SELECT     Tta_tipoAllegato,Tta_descBreve , Tta_descrizione , Tta_attivitaDoc " &
                   " FROM         Tab_Tipo_Allegato " &
                   " WHERE  ( Tta_descBreve  = '" & descTipo & "' )"

            vP(0) = DB
            vP(1) = Sqlq
            vP(2) = 2

            vR = GDB.DBQuery(vP)

            If vR(0) <> 0 Then
                vRitPar(0) = vR(0)
                vRitPar(1) = vR(1)
                GoTo FineSub
            End If
            codTipo = vR(1)(0, 0)
        End If
        tipoAttivita = Trim(vR(1)(3, 0) & "")

        'salvo il riferimento alla versione che sto firmando o caricando

        Dim versioneDocumento As String
        If tipoAttivita = "INOLTRO" Or tipoAttivita = "FIRMA" Or tipoAttivita = "RIGETTO" Then
            versioneDocumento = IdUltimaVersioneDocumento(idDocumento)
        Else
            versioneDocumento = ""
        End If

        If AvviaTransazione Then
            Call DB.BeginTrans()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
        End If
        If Trim(idAllegato) = "" Then
            vR = Calcola_Progressivo(DB, "CAD", Year(Now), False)
            If vR(0) <> 0 Then
                vRitPar(0) = vR(0)
                vRitPar(1) = vR(1)
                GoTo RollTrans
            End If
            idAllegato = vR(1)
        End If

        'Escludo i tipi de i file dicui voglio un'unica copia 
        If codTipo = 16 Or codTipo = 21 Or codTipo = 23 Then
            Sqlq = "SELECT     All_idAllegato, All_Documento, All_versione, All_Tipo, All_Allegato, All_nome, All_estensione, " &
                          "           All_firmato, All_autore, All_dataRegistrazione, All_Operatore,All_destinatari,All_modalita,All_riferimento_Appendice " &
                          " FROM         Allegati " &
                          " WHERE (Allegati.All_Tipo = " & codTipo & ") and (All_Documento = '" & idDocumento & "') "
        Else
            Sqlq = "SELECT     All_idAllegato, All_Documento, All_versione, All_Tipo, All_Allegato, All_nome, All_estensione, " &
              "           All_firmato, All_autore, All_dataRegistrazione, All_Operatore,All_destinatari,All_modalita,All_riferimento_Appendice " &
              " FROM         Allegati " &
              " WHERE (All_idAllegato = '" & idAllegato & "') and (All_Documento = '" & idDocumento & "') "
        End If

        'Sqlq = "SELECT     All_idAllegato, All_Documento, All_versione, All_Tipo, All_Allegato, All_nome, All_estensione, " & _
        '       "           All_firmato, All_autore, All_dataRegistrazione, All_Operatore,All_destinatari,All_modalita " & _
        '       " FROM         Allegati " & _
        '       " WHERE (All_idAllegato = '" & idAllegato & "') and (All_Documento = '" & idDocumento & "') "

        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        If RS.EOF Then
            Call DB.AddRS(RS)
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
            RS("All_idAllegato") = idAllegato
            RS("All_Documento") = idDocumento
            RS("All_versione") = versioneAllegato
        Else
            Call DB.EditRS(RS)
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
            RS("All_versione") = RS("All_versione").value + 1
        End If
        RS("All_Tipo") = codTipo
        RS.Fields("All_Allegato").AppendChunk(binarioAllegato)
        RS("All_nome") = nome
        RS("All_estensione") = codEstensione
        RS("All_firmato") = firmato
        RS("All_autore") = autore
        RS("All_dataRegistrazione") = Now
        RS("All_Operatore") = SISTEMA.Client_Operatore
        RS("All_modalita") = modalita
        RS("All_destinatari") = destinatari
        RS("All_riferimento_Appendice") = riferimento_Appendice

        Call DB.UpdateRS(RS)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        If firmato = 1 Then
            Dim codUffPro As String = ""

            Dim dimvc_Funzione As Integer = DllDocumentale.Dic_FODocumentale.dimvc_Leggi_Documento

            Dim vc_Funzione As DllDocumentale.Dic_FODocumentale.vc_Leggi_Documento

            Dim vFunzione(dimvc_Funzione) As Object

            vFunzione(vc_Leggi_Documento.c_idDocumento) = idDocumento
            vFunzione(vc_Leggi_Documento.c_xmlDatiDocumento) = ""

            Dim objDocumento As DllDocumentale.Model.DocumentoInfo = FO_Leggi_Documento_Object(vFunzione)

            codUffPro = objDocumento.Doc_Cod_Uff_Prop

            If LCase(autore) <> LCase(oOperatore.Codice) Then
                Log.Error("Registra Allegato " & " autore:" & autore & " oOperatore.Codice:" & oOperatore.Codice)
            End If

            If oOperatore.Attributo("NASCONDI_FIRMA") & "" <> "1" Or oOperatore.oUfficio.CodUfficio = codUffPro Then

                ''Estrazione certificato
                Dim certificato As System.Security.Cryptography.X509Certificates.X509Certificate = EstraiCertificato(RS.Fields("All_Allegato").GetChunk(RS.Fields("All_Allegato").ActualSize))
                If Not certificato Is Nothing Then
                    Dim vFunzioneInt(DllDocumentale.Dic_FODocumentale.dimvc_Registra_Allegato) As Object
                    Dim vClientInt(4) As Object
                    Dim vParamInt(1) As Object
                    Dim vrInt As Object

                    Dim numero As String = ""
                    Dim data As String = ""
                    If objDocumento.Doc_numero <> "" Then
                        numero = objDocumento.Doc_numero
                        data = objDocumento.Doc_Data
                    End If


                    Dim ritorno As Object = ScriviHTMLCertificati(vParm(vc_Registra_Allegato.c_idDocumento), certificato, oOperatore.Codice, numero, data)
                    vFunzioneInt(vc_Registra_Allegato.c_idAllegato) = ritorno(1)
                    vFunzioneInt(vc_Registra_Allegato.c_idDocumento) = vParm(vc_Registra_Allegato.c_idDocumento)
                    vFunzioneInt(vc_Registra_Allegato.c_binarioAllegato) = ritorno(0)
                    vFunzioneInt(vc_Registra_Allegato.c_descEstensione) = "html"
                    vFunzioneInt(vc_Registra_Allegato.c_copiaFirmatoDoc) = 0
                    vFunzioneInt(vc_Registra_Allegato.c_autore) = autore
                    vFunzioneInt(vc_Registra_Allegato.c_firmato) = 0
                    vFunzioneInt(vc_Registra_Allegato.c_nome) = "Elenco_Firme" 'CStr(vParm(vcFunzioneInt.c_nome)).Substring(0, (CStr(vParm(vcFunzioneInt.c_nome)).Length - 4))
                    vFunzioneInt(vc_Registra_Allegato.c_codTipo) = 16
                    Dim vrRegistraElencoFirma As Object = FO_Registra_Allegato(vFunzioneInt, DB, False)
                    If vrRegistraElencoFirma(0) <> 0 Then
                        Dim compito As String = Definisci_Compito(vParm(vc_Registra_Allegato.c_idDocumento), False, oOperatore)
                        Dim vFunzioneCompito(Dic_FODocumentale.dimvc_Registra_Compito) As Object
                        vFunzioneCompito(DllDocumentale.Dic_FODocumentale.vc_Registra_Compito.c_idDocumento) = vParm(vc_Registra_Allegato.c_idDocumento)
                        vFunzioneCompito(DllDocumentale.Dic_FODocumentale.vc_Registra_Compito.c_utente) = oOperatore.Codice
                        vFunzioneCompito(DllDocumentale.Dic_FODocumentale.vc_Registra_Compito.c_compito) = compito
                        FO_Registra_Compito(vFunzioneCompito)
                        vRitPar(0) = vrRegistraElencoFirma(0)
                        vRitPar(1) = vrRegistraElencoFirma(1)
                        GoTo RollTrans
                    End If


                End If

            End If

        End If


        If tipoAttivita <> "" And flagRegistraAttivita = True Then
            vR = DB_Aggiungi_RSLOG(RS, DBLOG, "Log_Allegati")
            If LCase(autore) <> LCase(oOperatore.Codice) Then
                Log.Error("REgistra Allegato " & " autore:" & autore & " oOperatore.Codice:" & oOperatore.Codice)
            End If
            Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_utente) = oOperatore.Codice
            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_ufficio) = oOperatore.oUfficio.CodUfficio
            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_data) = Now
            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = idDocumento
            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = tipoAttivita
            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_info_attivita) = versioneDocumento

            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_allegato) = idAllegato
            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = oOperatore.Cognome & " " & oOperatore.Nome

            vR = FO_Registra_Attivita(vRegAtt, DB, False)
            If vR(0) <> 0 Then
                vRitPar(0) = vR(0)
                vRitPar(1) = vR(1)
                GoTo RollTrans
            End If

            '--------------------------------------------------------------------------------------------------------------------------------------------------------------
            'Modifica per l'assegnazione della numerazione definitiva al momento della firma

            'If tipoAttivita.Equals("FIRMA") And utente.oUfficio.bUfficioDirigenzaDipartimento = True And UCase(utente.Attributo("LIVELLO_UFFICIO")) = "RESPONSABILE" Then
            '    Dim vR1 As Object
            '    vR1 = Assegna_Numerazione_Definitiva()
            '    If vR1(0) <> 0 Then
            '        vRitPar(0) = vR1(0)
            '        vRitPar(1) = vR1(1)
            '        GoTo RollTrans
            '    End If

            'End If

            'FINE Modifica per l'assegnazione della numerazione definitiva al momento della firma
            '--------------------------------------------------------------------------------------------------------------------------------------------------------------
        End If

        If AvviaTransazione Then
            Call DB.CommitTrans()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
        End If

        vRitPar(0) = 0
        vRitPar(1) = idAllegato

FineSub:
        FO_Registra_Allegato = vRitPar
        On Error Resume Next
        If Not DB Is Nothing And IsNothing(DBChiamante) Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If
        If Not DBLOG Is Nothing Then
            Call DBLOG.ChiudiDB()
            DBLOG = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

RollTrans:
        If AvviaTransazione Then
            If Not DB Is Nothing Then
                Call DB.RollTrans()
                If DB.errore <> 0 Then
                    Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
                End If
            End If
        End If
        GoTo FineSub
Herr:
        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Function

    Public Function FO_Registra_Allegato_Ex(ByVal vParm As Object, Optional ByVal DBChiamante As Object = Nothing, Optional ByVal startTransaction As Boolean = True) As Object
        Const SFunzione As String = "FO_Registra_Allegato_Ex"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim DB As Object = Nothing
        Dim DBLOG As Object = Nothing
        Dim RS As Object = Nothing

        Dim idAllegato As String
        Dim codTipo As Integer
        Dim descTipo As String
        Dim binarioAllegato() As Byte
        Dim nome As String
        Dim codEstensione As Integer
        Dim descEstensione As String
        Dim firmato As Byte
        Dim autore As String
        Dim vP(2) As Object
        Dim vR As Object = Nothing
        Dim tipoAttivita As String
        Dim versioneAllegato As Integer
        Dim destinatari As String
        Dim modalita As String
        Dim controlloIstanzaPerUtente As Boolean
        Dim flagRegistraAttivita As Boolean
        Dim riferimento_Appendice As String
        Dim flagTrasformaInPdf As Boolean

        Dim transactionStarted As Boolean = False

        Try
            idAllegato = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_idAllegato) & ""
            idDocumento = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_idDocumento) & ""
            codTipo = IIf(IsNumeric(vParm(Dic_FODocumentale.vc_Registra_Allegato.c_codTipo)), CInt(vParm(Dic_FODocumentale.vc_Registra_Allegato.c_codTipo)), -1)
            descTipo = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_descTipo) & ""
            binarioAllegato = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_binarioAllegato)
            nome = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_nome)
            codEstensione = IIf(IsNumeric(vParm(Dic_FODocumentale.vc_Registra_Allegato.c_codEstensione)), CInt(vParm(Dic_FODocumentale.vc_Registra_Allegato.c_codEstensione)), -1)
            descEstensione = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_descEstensione)
            firmato = IIf(vParm(Dic_FODocumentale.vc_Registra_Allegato.c_firmato) = "1", 1, 0)
            autore = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_autore)
            versioneAllegato = IIf(IsNumeric(vParm(Dic_FODocumentale.vc_Registra_Allegato.c_versioneAllegato)), CInt(vParm(Dic_FODocumentale.vc_Registra_Allegato.c_versioneAllegato)), -1)
            destinatari = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_destinatari)
            modalita = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_modalita)
            riferimento_Appendice = "" & vParm(Dic_FODocumentale.vc_Registra_Allegato.c_riferimento_Appendice)

            If vParm(Dic_FODocumentale.vc_Registra_Allegato.c_controlloIstanza) Is Nothing Then
                controlloIstanzaPerUtente = True
            Else
                controlloIstanzaPerUtente = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_controlloIstanza)
            End If
            If vParm(Dic_FODocumentale.vc_Registra_Allegato.c_copiaFirmatoDoc) Then
                codTipo = tipoAllegatoDocumentoFirmato
            End If

            If vParm(Dic_FODocumentale.vc_Registra_Allegato.c_flagRegistraAttivita) Is Nothing Then
                flagRegistraAttivita = True
            Else
                flagRegistraAttivita = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_flagRegistraAttivita)
            End If

            If vParm(Dic_FODocumentale.vc_Registra_Allegato.c_flag_Trasforma_In_Pdf) Is Nothing Then
                flagTrasformaInPdf = True
            Else
                flagTrasformaInPdf = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_flag_Trasforma_In_Pdf)
            End If

            vRitPar(0) = 0
            vRitPar(1) = ""
            If SISTEMA.bTRACE Then
                Call SISTEMA.Registra_Trace("Start", SFunzione)
            End If

            If Trim(idDocumento) = "" Then
                vRitPar(0) = 1
                vRitPar(1) = "Parametri insufficienti"
                Exit Function
            End If

            If IsNothing(DBChiamante) Then
                VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
                Call SISTEMA.Registra_Trace("performing open connection...", SFunzione)

                Call DB.ApriDB()
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    Throw New Exception(DB.ErrDescr)
                End If

                Call SISTEMA.Registra_Trace("open connection performed!", SFunzione)
            Else
                DB = DBChiamante
            End If

            VerificaSistema(SISTEMA, "DOCUMENTALE_LOG", DBLOG)
            Call SISTEMA.Registra_Trace("performing open log connection...", SFunzione)

            Call DBLOG.ApriDB()
            If DBLOG.errore <> 0 Then
                vRitPar(0) = DBLOG.errore
                vRitPar(1) = DBLOG.ErrDescr
                Throw New Exception(DB.ErrDescr)
            End If

            Call SISTEMA.Registra_Trace("open log connection performed!", SFunzione)

            If controlloIstanzaPerUtente Then
                Sqlq = "SELECT    Doc_id_WFE  " &
                       " FROM         Documento " &
                       " WHERE (Doc_Id = '" & idDocumento & "')"

                vP(0) = DB
                vP(1) = Sqlq
                vP(2) = 2

                vR = GDB.DBQuery(vP)

                If vR(0) <> 0 And vR(0) <> 1 Then
                    vRitPar(0) = vR(0)
                    vRitPar(1) = vR(1)
                    Exit Function
                End If

                'verifico se la proposta è ancora assegnata all'utente
                idIstanzaWFE = vR(1)(0, 0) + ""

                vR = Leggi_StatoIstanza_WFE(idIstanzaWFE, oOperatore.Codice)

                If vR(0) <> 0 Then
                    vRitPar(0) = vR(0)
                    vRitPar(1) = vR(1)
                    Exit Function
                End If
                Dim attoreCorrente As String
                attoreCorrente = vR(1)(2) & ""
                If UCase(Trim(attoreCorrente)) <> UCase(Trim(oOperatore.Codice)) Then
                    vRitPar(0) = "1"
                    vRitPar(1) = "L'utente non ha più in carico il documento"
                    Exit Function
                End If
            End If

            'controllo se esiste il tipo estensione
            Sqlq = "SELECT     Tea_codEstensione, Tea_nomeEstensione " &
                   " FROM         Tab_Estensione_Allegati " &
                   " WHERE  ( Tea_codEstensione = '" & codEstensione & "' )"

            vP(0) = DB
            vP(1) = Sqlq
            vP(2) = 2

            vR = GDB.DBQuery(vP)

            If vR(0) <> 0 And vR(0) <> 1 Then
                vRitPar(0) = vR(0)
                vRitPar(1) = vR(1)
                Exit Function
            End If

            If vR(0) = 1 Then
                Sqlq = "SELECT   Tea_codEstensione,  Tea_descrizione, Tea_nomeEstensione , Tes_contentType " &
                       " FROM         Tab_Estensione_Allegati " &
                       " WHERE  ( Tea_nomeEstensione = '" & descEstensione & "' )"

                RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    Throw New Exception(DB.ErrDescr)
                End If

                If RS.EOF Then
                    Call DB.AddRS(RS)
                    If DB.errore <> 0 Then
                        vRitPar(0) = DB.errore
                        vRitPar(1) = DB.ErrDescr
                        Throw New Exception(DB.ErrDescr)
                    End If

                    RS("Tea_nomeEstensione") = descEstensione
                    RS("Tea_descrizione") = "Sconosciuta"
                    RS("Tes_contentType") = ""

                    Call DB.UpdateRS(RS)
                    If DB.errore <> 0 Then
                        vRitPar(0) = DB.errore
                        vRitPar(1) = DB.ErrDescr
                        Throw New Exception(DB.ErrDescr)
                    End If
                End If
                codEstensione = RS("Tea_codEstensione").value
                Call DB.ChiudiRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    Throw New Exception(DB.ErrDescr)
                End If
            End If

            'controllo se esiste il tipo allegato
            Sqlq = "SELECT     Tta_tipoAllegato, Tta_descBreve ,Tta_descrizione  , Tta_attivitaDoc " &
                   " FROM         Tab_Tipo_Allegato " &
                   " WHERE  ( Tta_tipoAllegato = " & codTipo & " )"

            vP(0) = DB
            vP(1) = Sqlq
            vP(2) = 2

            vR = GDB.DBQuery(vP)

            If vR(0) <> 0 And vR(0) <> 1 Then
                vRitPar(0) = vR(0)
                vRitPar(1) = vR(1)
                Exit Function
            End If

            If vR(0) = 1 Then
                Sqlq = "SELECT     Tta_tipoAllegato,Tta_descBreve , Tta_descrizione , Tta_attivitaDoc " &
                       " FROM         Tab_Tipo_Allegato " &
                       " WHERE  ( Tta_descBreve  = '" & descTipo & "' )"

                vP(0) = DB
                vP(1) = Sqlq
                vP(2) = 2

                vR = GDB.DBQuery(vP)

                If vR(0) <> 0 Then
                    vRitPar(0) = vR(0)
                    vRitPar(1) = vR(1)
                    Exit Function
                End If
                codTipo = vR(1)(0, 0)
            End If
            tipoAttivita = Trim(vR(1)(3, 0) & "")

            'salvo il riferimento alla versione che sto firmando o caricando
            Dim versioneDocumento As String

            If tipoAttivita = "INOLTRO" Or tipoAttivita = "FIRMA" Or tipoAttivita = "RIGETTO" Then
                versioneDocumento = IdUltimaVersioneDocumento(idDocumento)
            Else
                versioneDocumento = ""
            End If

            If startTransaction Then
                Call SISTEMA.Registra_Trace("performing begin transaction...", SFunzione)
                Call DB.BeginTrans()
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    Throw New Exception(DB.ErrDescr)
                End If
                transactionStarted = True
                Call SISTEMA.Registra_Trace("begin transaction performed", SFunzione)
            End If

            If Trim(idAllegato) = "" Then
                vR = Calcola_Progressivo(DB, "CAD", Year(Now), False)
                If vR(0) <> 0 Then
                    vRitPar(0) = vR(0)
                    vRitPar(1) = vR(1)
                    Throw New Exception(vRitPar(1))
                End If
                idAllegato = vR(1)
            End If

            'Escludo i tipi de i file dicui voglio un'unica copia 
            If codTipo = 16 Or codTipo = 21 Or codTipo = 23 Then
                Sqlq = "SELECT     All_idAllegato, All_Documento, All_versione, All_Tipo, All_Allegato, All_nome, All_estensione, " &
                              "           All_firmato, All_autore, All_dataRegistrazione, All_Operatore,All_destinatari,All_modalita,All_riferimento_Appendice " &
                              " FROM         Allegati " &
                              " WHERE (Allegati.All_Tipo = " & codTipo & ") and (All_Documento = '" & idDocumento & "') "
            Else
                Sqlq = "SELECT     All_idAllegato, All_Documento, All_versione, All_Tipo, All_Allegato, All_nome, All_estensione, " &
                  "           All_firmato, All_autore, All_dataRegistrazione, All_Operatore,All_destinatari,All_modalita,All_riferimento_Appendice " &
                  " FROM         Allegati " &
                  " WHERE (All_idAllegato = '" & idAllegato & "') and (All_Documento = '" & idDocumento & "') "
            End If

            RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                Throw New Exception(DB.ErrDescr)
            End If

            If RS.EOF Then
                Call DB.AddRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    Throw New Exception(DB.ErrDescr)
                End If
                RS("All_idAllegato") = idAllegato
                RS("All_Documento") = idDocumento
                RS("All_versione") = versioneAllegato
            Else
                Call DB.EditRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    Throw New Exception(DB.ErrDescr)
                End If
                versioneAllegato = IIf(IsNumeric(RS("All_versione").value), CInt(RS("All_versione").value), 0)
                RS("All_versione") = versioneAllegato + 1
            End If

            RS("All_Tipo") = codTipo
            RS.Fields("All_Allegato").AppendChunk(binarioAllegato)
            RS("All_nome") = nome
            RS("All_estensione") = codEstensione
            RS("All_firmato") = firmato
            RS("All_autore") = autore
            RS("All_dataRegistrazione") = Now
            RS("All_Operatore") = SISTEMA.Client_Operatore
            RS("All_modalita") = modalita
            RS("All_destinatari") = destinatari
            RS("All_riferimento_Appendice") = riferimento_Appendice

            Call SISTEMA.Registra_Trace("performing update...", SFunzione)

            DB.UpdateRS(RS)
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                Throw New Exception(DB.ErrDescr)
            End If

            Call SISTEMA.Registra_Trace("update performed!", SFunzione)

            If firmato = 1 Then
                Dim codUffPro As String = ""
                Dim dimvc_Funzione As Integer = DllDocumentale.Dic_FODocumentale.dimvc_Leggi_Documento
                Dim vFunzione(dimvc_Funzione) As Object

                vFunzione(vc_Leggi_Documento.c_idDocumento) = idDocumento
                vFunzione(vc_Leggi_Documento.c_xmlDatiDocumento) = ""

                Dim objDocumento As DllDocumentale.Model.DocumentoInfo = FO_Leggi_Documento_Object(vFunzione)

                codUffPro = objDocumento.Doc_Cod_Uff_Prop

                If LCase(autore) <> LCase(oOperatore.Codice) Then
                    Log.Error("Registra Allegato " & " autore:" & autore & " oOperatore.Codice:" & oOperatore.Codice)
                End If

                If oOperatore.Attributo("NASCONDI_FIRMA") & "" <> "1" Or oOperatore.oUfficio.CodUfficio = codUffPro Then
                    'Estrazione certificato
                    Dim certificato As System.Security.Cryptography.X509Certificates.X509Certificate = EstraiCertificato(RS.Fields("All_Allegato").GetChunk(RS.Fields("All_Allegato").ActualSize))
                    If Not certificato Is Nothing Then
                        Dim vFunzioneInt(DllDocumentale.Dic_FODocumentale.dimvc_Registra_Allegato) As Object
                        Dim vClientInt(4) As Object
                        Dim vParamInt(1) As Object
                        Dim numero As String = ""
                        Dim data As String = ""

                        If objDocumento.Doc_numero <> "" Then
                            numero = objDocumento.Doc_numero
                            data = objDocumento.Doc_Data
                        End If

                        Dim ritorno As Object = ScriviHTMLCertificati(vParm(vc_Registra_Allegato.c_idDocumento), certificato, oOperatore.Codice, numero, data)

                        vFunzioneInt(vc_Registra_Allegato.c_idAllegato) = ritorno(1)
                        vFunzioneInt(vc_Registra_Allegato.c_idDocumento) = vParm(vc_Registra_Allegato.c_idDocumento)
                        vFunzioneInt(vc_Registra_Allegato.c_binarioAllegato) = ritorno(0)
                        vFunzioneInt(vc_Registra_Allegato.c_descEstensione) = "html"
                        vFunzioneInt(vc_Registra_Allegato.c_copiaFirmatoDoc) = 0
                        vFunzioneInt(vc_Registra_Allegato.c_autore) = autore
                        vFunzioneInt(vc_Registra_Allegato.c_firmato) = 0
                        vFunzioneInt(vc_Registra_Allegato.c_nome) = "Elenco_Firme"
                        vFunzioneInt(vc_Registra_Allegato.c_codTipo) = 16

                        Dim vrRegistraElencoFirma As Object = FO_Registra_Allegato(vFunzioneInt, DB, False)
                        If vrRegistraElencoFirma(0) <> 0 Then
                            Dim compito As String = Definisci_Compito(vParm(vc_Registra_Allegato.c_idDocumento), False, oOperatore)
                            Dim vFunzioneCompito(Dic_FODocumentale.dimvc_Registra_Compito) As Object
                            vFunzioneCompito(DllDocumentale.Dic_FODocumentale.vc_Registra_Compito.c_idDocumento) = vParm(vc_Registra_Allegato.c_idDocumento)
                            vFunzioneCompito(DllDocumentale.Dic_FODocumentale.vc_Registra_Compito.c_utente) = oOperatore.Codice
                            vFunzioneCompito(DllDocumentale.Dic_FODocumentale.vc_Registra_Compito.c_compito) = compito
                            FO_Registra_Compito(vFunzioneCompito)
                            vRitPar(0) = vrRegistraElencoFirma(0)
                            vRitPar(1) = vrRegistraElencoFirma(1)
                            If transactionStarted Then
                                RollbackTransaction(DB)
                            End If
                            Exit Function
                        End If
                    End If
                End If

                If tipoAttivita <> "" And flagRegistraAttivita = True Then
                    vR = DB_Aggiungi_RSLOG(RS, DBLOG, "Log_Allegati")
                    If LCase(autore) <> LCase(oOperatore.Codice) Then
                        Log.Error("Registra Allegato " & " autore:" & autore & " oOperatore.Codice:" & oOperatore.Codice)
                    End If
                    Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
                    vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_utente) = oOperatore.Codice
                    vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_ufficio) = oOperatore.oUfficio.CodUfficio
                    vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_data) = Now
                    vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = idDocumento
                    vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = tipoAttivita
                    vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_info_attivita) = versioneDocumento

                    vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_allegato) = idAllegato
                    vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = oOperatore.Cognome & " " & oOperatore.Nome

                    vR = FO_Registra_Attivita(vRegAtt, DB, False)
                    If vR(0) <> 0 Then
                        vRitPar(0) = vR(0)
                        vRitPar(1) = vR(1)
                        Throw New Exception(vRitPar(1))
                    End If
                End If
            End If

            If transactionStarted Then
                Call SISTEMA.Registra_Trace("performing commit transaction...", SFunzione)
                Call DB.CommitTrans()
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    Throw New Exception(DB.ErrDescr)
                End If
                transactionStarted = False
                Call SISTEMA.Registra_Trace("commit transaction performed!", SFunzione)
            End If

            Call SISTEMA.Registra_Trace("closing recordSet...", SFunzione)

            Call DB.ChiudiRS(RS)
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                Throw New Exception(DB.ErrDescr)
            End If

            RS = Nothing

            Call SISTEMA.Registra_Trace("recordSet closed!", SFunzione)

            vRitPar(0) = 0
            vRitPar(1) = idAllegato
        Catch exception As Exception
            vRitPar(0) = -1
            vRitPar(1) = exception.Message

            Call SISTEMA.Registra_Log(exception.ToString & Chr(13) & "StackTrace: " & exception.StackTrace, SFunzione)

            If transactionStarted Then
                Call SISTEMA.Registra_Log("exception with transaction started", SFunzione)
                Try
                    If Not DB Is Nothing Then
                        RollbackTransaction(DB)
                        If Not RS Is Nothing Then
                            Call DB.ChiudiRS(RS)
                            If DB.errore <> 0 Then
                                vRitPar(0) = DB.errore
                                vRitPar(1) = DB.ErrDescr
                                Throw New Exception(DB.ErrDescr)
                            End If
                            RS = Nothing
                        End If
                        transactionStarted = False
                    End If
                Catch rollbackException As Exception
                    Call SISTEMA.Registra_Log("rollback exception caught. " & exception.ToString & Chr(13) & "StackTrace: " & exception.StackTrace, SFunzione)
                    exception = New Exception(rollbackException.Message, exception)
                End Try
            End If

            Dim trace_1 As System.Diagnostics.StackTrace = New System.Diagnostics.StackTrace(exception, True)

            Call SISTEMA.Registra_Log("exception caught +++++++++++ (" & trace_1.FrameCount.ToString & ")", SFunzione)
            For i As Integer = 1 To trace_1.FrameCount Step 1
                Call SISTEMA.Registra_Log("Method: " + trace_1.GetFrame(0).GetMethod().Name, SFunzione)
                Call SISTEMA.Registra_Log("  Line: " + trace_1.GetFrame(0).GetFileLineNumber().ToString, SFunzione)
                Call SISTEMA.Registra_Log("Column: " + trace_1.GetFrame(0).GetFileColumnNumber().ToString, SFunzione)
                Call SISTEMA.Registra_Log("---------------------------------------", SFunzione)
            Next
            Call SISTEMA.Registra_Log("exception caught +++++++++++", SFunzione)

            Throw exception
        Finally
            Try
                FO_Registra_Allegato_Ex = vRitPar

                If Not DB Is Nothing And IsNothing(DBChiamante) Then
                    Call SISTEMA.Registra_Trace("closing connection...", SFunzione)
                    DB.ChiudiDB()
                    If DB.errore <> 0 Then
                        vRitPar(0) = DB.errore
                        vRitPar(1) = DB.ErrDescr
                        Throw New Exception(DB.ErrDescr)
                    End If
                    DB = Nothing
                    Call SISTEMA.Registra_Trace("connection closed!", SFunzione)
                End If

                If Not DBLOG Is Nothing Then
                    Call SISTEMA.Registra_Trace("closing log connection...", SFunzione)
                    DBLOG.ChiudiDB()
                    If DBLOG.errore <> 0 Then
                        vRitPar(0) = DB.errore
                        vRitPar(1) = DB.ErrDescr
                        Throw New Exception(DB.ErrDescr)
                    End If
                    DBLOG = Nothing
                    Call SISTEMA.Registra_Trace("log connection closed!", SFunzione)
                End If

                If vRitPar(0) <> 0 Then
                    Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
                End If

                If SISTEMA.bTRACE Then
                    Call SISTEMA.Registra_Trace("End", SFunzione)
                End If
            Catch exception As Exception
                Call SISTEMA.Registra_Log(exception.ToString & Chr(13) & "StackTrace: " & exception.StackTrace, SFunzione)

                Dim trace_1 As System.Diagnostics.StackTrace = New System.Diagnostics.StackTrace(exception, True)

                Call SISTEMA.Registra_Log("finally exception caught ++++++++++++++ (" & trace_1.FrameCount.ToString & ")", SFunzione)
                For i As Integer = 1 To trace_1.FrameCount Step 1
                    Call SISTEMA.Registra_Log("Method: " + trace_1.GetFrame(0).GetMethod().Name, SFunzione)
                    Call SISTEMA.Registra_Log("  Line: " + trace_1.GetFrame(0).GetFileLineNumber().ToString, SFunzione)
                    Call SISTEMA.Registra_Log("Column: " + trace_1.GetFrame(0).GetFileColumnNumber().ToString, SFunzione)
                    Call SISTEMA.Registra_Log("---------------------------------------", SFunzione)
                Next
                Call SISTEMA.Registra_Log("finally exception caught ++++++++++++++", SFunzione)

                Throw exception
            End Try
        End Try
    End Function

    Private Sub RollbackTransaction(ByRef DB As Object)
        If Not DB Is Nothing Then
            Call SISTEMA.Registra_Trace("performing rollback transaction...", "RollbackTransaction")
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Throw New Exception(DB.ErrDescr)
            End If
            Call SISTEMA.Registra_Trace("rollback transaction performed!", "RollbackTransaction")
        End If
    End Sub



    Private Function EstraiCertificato(ByVal bAllegato As Byte()) As System.Security.Cryptography.X509Certificates.X509Certificate

        Dim bCertificato As System.Security.Cryptography.X509Certificates.X509Certificate

        Try
            Dim cadesUtils As DigitalSignatureUtils.CAdESUtils = New DigitalSignatureUtils.CAdESUtils(bAllegato)
            bCertificato = New System.Security.Cryptography.X509Certificates.X509Certificate(cadesUtils.GetRawCertificates(0))

        Catch ex As Exception
            SISTEMA.Registra_Log("Estrai certificato", ex.Message)
        End Try

        Return bCertificato

    End Function
    'modgg 04-08
    Private Function ScriviHTMLCertificati(ByVal documentoId As String, ByVal certificato As System.Security.Cryptography.X509Certificates.X509Certificate, ByVal operatore As String, Optional ByVal numero As String = "", Optional ByVal data As String = "") As Object

        Try


            Dim vRit(1) As Object
            Dim vr As Object = Nothing
            'modifica vparm(2)in
            Dim vparm(Dic_FODocumentale.dimvc_Leggi_Allegato) As Object
            Dim StringaContenutaInDB As String = ""
            Dim informazioni_Nuovo_Certificato As StringBuilder
            Dim tag_html As StringBuilder = Nothing
            vparm(Dic_FODocumentale.vc_Leggi_Allegato.c_idDocumento) = documentoId
            vparm(Dic_FODocumentale.vc_Leggi_Allegato.c_idAllegato) = ""
            vparm(Dic_FODocumentale.vc_Leggi_Allegato.c_tipologiaAllegato) = "16"
            vparm(Dic_FODocumentale.vc_Leggi_Allegato.c_p7m) = "False"



            vr = FO_Leggi_Allegato(vparm)

            'verifica se non ci sono elenchi di firma
            If vr(0) = 1 Then
                tag_html = New StringBuilder
                tag_html.Append("<html><body>")
                tag_html.Append("<h2>Elenco Firme: </h2>")
            Else
                '    StringaContenutaInDB = System.Text.UnicodeEncoding.Unicode.GetString(vr(1))
                StringaContenutaInDB = System.Text.UTF8Encoding.UTF8.GetString(vr(1))
                StringaContenutaInDB = StringaContenutaInDB.Replace("</body></html>", "")
            End If

            informazioni_Nuovo_Certificato = New StringBuilder
            informazioni_Nuovo_Certificato.Append("<p>Numero Certificato: " & certificato.GetSerialNumberString & "</p>")
            informazioni_Nuovo_Certificato.Append("<p>Rilasciato a: " & certificato.Subject.ToString & "</p>")
            informazioni_Nuovo_Certificato.Append("<p>Valido da: " & CDate(certificato.GetEffectiveDateString) & "</p>")
            informazioni_Nuovo_Certificato.Append("<p>fino a: " & CDate(certificato.GetExpirationDateString) & "</p>")
            informazioni_Nuovo_Certificato.Append("<p>documento firmato il : " & Now.Date & "</p>")
            informazioni_Nuovo_Certificato.Append("<hr>")
            If Not tag_html Is Nothing Then
                StringaContenutaInDB = tag_html.ToString
            End If
            If numero <> "" And data <> "" Then
                StringaContenutaInDB = StringaContenutaInDB.Replace("<h2>Elenco Firme: </h2>", "<h2>Elenco Firme del provvedimento n. " & numero & " del " & data & "</h2>")
            End If
            StringaContenutaInDB = StringaContenutaInDB & informazioni_Nuovo_Certificato.ToString
            StringaContenutaInDB = StringaContenutaInDB & "</body></html>"

            'Dim content As Byte() = System.Text.UnicodeEncoding.Unicode.GetBytes(StringaContenutaInDB.ToString)
            Dim content As Byte() = System.Text.UTF8Encoding.UTF8.GetBytes(StringaContenutaInDB.ToString)
            Try
                Dim compito As String
                compito = Definisci_Compito(idDocumento, True, oOperatore)
                Dim vFunzione(Dic_FODocumentale.dimvc_Registra_Compito) As Object
                vFunzione(DllDocumentale.Dic_FODocumentale.vc_Registra_Compito.c_idDocumento) = idDocumento
                vFunzione(DllDocumentale.Dic_FODocumentale.vc_Registra_Compito.c_utente) = oOperatore.Codice
                vFunzione(DllDocumentale.Dic_FODocumentale.vc_Registra_Compito.c_compito) = compito
                vFunzione(DllDocumentale.Dic_FODocumentale.vc_Registra_Compito.c_certificato) = informazioni_Nuovo_Certificato
                FO_Registra_Compito(vFunzione)
            Catch ex As Exception
                Log.Error(Now & "- " & "Definizione Compito non riuscito")
            Finally
                vRit(0) = content
                vRit(1) = vr(7)
            End Try
            vRit(0) = content
            vRit(1) = vr(7)
            Return vRit
        Catch ex As Exception
            Call SISTEMA.Registra_Trace("Errore in scrivihtmlcertificati", ex.Message)
            Call SISTEMA.Registra_Log("Errore in scrivihtmlcertificati", ex.Message)
        End Try
    End Function

    Friend Function FO_Cancella_Allegato(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Cancella_Allegato"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim DBLOG As Object = Nothing
        Dim RS As Object = Nothing

        Dim idAllegato As String
        Dim vP(2) As Object
        Dim vR As Object = Nothing
        Dim tipologiaAllegato As String
        Dim tipoAttivita As String

        On Error GoTo Herr

        idAllegato = vParm(Dic_FODocumentale.vc_Registra_Allegato.c_idAllegato) & ""

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        ' DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Call DB.BeginTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        Sqlq = "SELECT    All_Annullato,  All_dataRegistrazione, All_Operatore , All_Documento, All_tipo " &
               " FROM         Allegati " &
               " WHERE (All_idAllegato = '" & idAllegato & "') "
        '" UNION " & _
        '" SELECT     All_Annullato, All_dataRegistrazione, All_Operatore, All_Documento, All_Tipo" & _
        '" FROM Allegati  " & _
        '" WHERE All_riferimento_Appendice = '" & idAllegato & "')"


        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockOttimistico)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        If RS.EOF Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        idDocumento = RS("All_Documento").value
        tipologiaAllegato = RS("All_tipo").value

        Call DB.EditRS(RS)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If
        RS("All_Annullato") = 1
        RS("All_dataRegistrazione") = Now
        RS("All_Operatore") = SISTEMA.Client_Operatore

        Call DB.UpdateRS(RS)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE_LOG", DBLOG)
        'DBLOG = SISTEMA.PROCDB.Item("DOCUMENTALE_LOG")
        Call DBLOG.ApriDB()
        If DBLOG.errore <> 0 Then
            vRitPar(0) = DBLOG.errore
            vRitPar(1) = DBLOG.ErrDescr
            GoTo FineSub
        End If

        vR = DB_Aggiungi_RSLOG(RS, DBLOG, "Log_Allegati")

        Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
        vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_utente) = oOperatore.Codice
        vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_ufficio) = oOperatore.oUfficio.CodUfficio
        vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_data) = Now
        vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = idDocumento
        Select Case tipologiaAllegato
            Case "0"
                tipoAttivita = "CANCALLEG"
            Case "4"
                tipoAttivita = "CANCDOCUM"
            Case "15"
                tipoAttivita = "CANCRIFALL"
            Case "16"
                tipoAttivita = "CANCELFIR"
            Case "17"
                tipoAttivita = "CANCAPP"
            Case "18"
                tipoAttivita = "CANCAPPDF"
        End Select
        vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = tipoAttivita
        vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_info_attivita) = ""
        vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_allegato) = idAllegato
        vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = idDocumento

        vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = oOperatore.Cognome & " " & oOperatore.Nome
        vR = FO_Registra_Attivita(vRegAtt, DB, False)
        If vR(0) <> 0 Then
            vRitPar(0) = vR(0)
            vRitPar(1) = vR(1)
            GoTo RollTrans
        End If

        Call DB.CommitTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        vRitPar(0) = 0
        vRitPar(1) = ""

FineSub:
        FO_Cancella_Allegato = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If Not DBLOG Is Nothing Then
            Call DBLOG.ChiudiDB()
            DBLOG = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Function

    Friend Function FO_Verifica_Prima_Apertura(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Verifica_Prima_Apertura"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim vR As Object = Nothing
        Dim vP(2) As Object
        Dim rs As Object = Nothing

        Dim idIstanza As String
        Dim numUtenteDoc As String
        Dim tipoDocumento As Integer

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        idDocumento = vParm(Dic_FODocumentale.vc_Verifica_Prima_Apertura.c_idDocumento) & ""
        'utente.Codice = vParm(Dic_FODocumentale.vc_Verifica_Prima_Apertura.c_utente) & ""
        numUtenteDoc = ""

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Sqlq = "SELECT     Doc_id_WFE ,  isnull(Doc_numero,  Doc_numeroProvvisorio) as  Doc_numero , Doc_Tipo " &
               " FROM Documento " &
               " WHERE     (Doc_Id = '" & idDocumento & "') "

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)

        If vR(0) <> 0 Then
            vRitPar(0) = 1
            vRitPar(1) = "Il documento non esiste"
            GoTo FineSub
        End If

        idIstanza = Trim(vR(1)(0, 0))
        numUtenteDoc = Trim(vR(1)(1, 0))
        tipoDocumento = Trim(vR(1)(2, 0))

        Call DB.BeginTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        vR = Leggi_StatoIstanza_WFE(idIstanza, oOperatore.Codice)
        If vR(0) <> 0 Then
            vRitPar(0) = 1
            vRitPar(1) = "Istanza del documento non assegnata all'utente"
            GoTo FineSub
        End If

        Sqlq = " SELECT     Sto_id_Doc, Sto_Prog, Sto_Utente, Sto_Data, Sto_TipoAttivita, " &
               "  Sto_Info_Attivita, Sto_attivita_corrente, Sto_idAllegato " &
               " FROM         Azioni_Utente_Documento " &
               " WHERE   (Sto_id_Doc = '" & idDocumento & "' )  " &
               "        AND (Sto_attivita_corrente = 1) AND (Sto_Utente = '" & oOperatore.Codice & "') and " &
               "         ( Sto_TipoAttivita <> 'ARRIVOWL' AND Sto_TipoAttivita <> 'PRELIEVO'  ) "

        rs = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        'verifico se la proposta è ancora assegnata all'utente
        If rs.EOF Then
            Dim vPRA(Dic_FODocumentale.dimvc_Registra_Attivita) As Object

            vPRA(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = idDocumento
            vPRA(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = "PRIMAVIS"
            vPRA(Dic_FODocumentale.vc_Registra_Attivita.c_data) = Now
            vPRA(Dic_FODocumentale.vc_Registra_Attivita.c_utente) = oOperatore.Codice
            vPRA(Dic_FODocumentale.vc_Registra_Attivita.c_ufficio) = oOperatore.oUfficio.CodUfficio
            vPRA(Dic_FODocumentale.vc_Registra_Attivita.c_info_attivita) = ""
            vPRA(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = oOperatore.Cognome & " " & oOperatore.Nome

            vR = FO_Registra_Attivita(vPRA, DB, False)
            If vR(0) <> 0 Then
                vRitPar(0) = vR(0)
                vRitPar(1) = vR(1)
                GoTo RollTrans
            End If

        End If

        'rocco 11-05-2006 : rivedere la logica di assegnazione della numerazione definitiva
        'vR = Assegna_Numerazione_Definitiva(DB, False)
        'If vR(0) <> 0 Then
        '    vRitPar(0) = vR(0)
        '    vRitPar(1) = vR(1)
        '    GoTo RollTrans
        'ElseIf Not vR(1) Is Nothing Then
        '    numUtenteDoc = vR(1)
        'End If

        ''assegna compito su documento
        'Dim compitoSuDocumento As String
        'compitoSuDocumento = Definisci_Compito()

        ''registro il compito sul documento
        'If compitoSuDocumento <> "" Then
        '    Dim vRegComp(Dic_FODocumentale.dimvc_Registra_Compito) As Object
        '    vRegComp(Dic_FODocumentale.vc_Registra_Compito.c_compito) = compitoSuDocumento

        '    vR = FO_Registra_Compito(vRegComp, DB, False)

        '    If vR(0) <> 0 Then
        '        vRitPar(0) = vR(0)
        '        vRitPar(1) = vR(1)
        '        GoTo RollTrans
        '    End If
        'End If

        Call DB.CommitTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        vRitPar(0) = 0
        vRitPar(1) = numUtenteDoc
        vRitPar(2) = tipoDocumento

FineSub:
        FO_Verifica_Prima_Apertura = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Function

    Public Function Definisci_Compito(ByVal iddocumentoLocale As String, ByVal specifico As Boolean, Optional ByVal operatore_da_verificare As DllAmbiente.Operatore = Nothing) As String
        idDocumento = iddocumentoLocale
        Dim compitoSuDocumento As String = "CONSULTA"

        Dim operatore_Confronto As DllAmbiente.Operatore
        If operatore_da_verificare Is Nothing Then
            operatore_Confronto = oOperatore
        Else
            operatore_Confronto = operatore_da_verificare
        End If
        Try
            Dim statoIstanza As DllDocumentale.StatoIstanzaDocumentoInfo = (New DllDocumentale.svrDocumenti(operatore_Confronto)).Get_StatoIstanzaDocumento(idDocumento)

            If (statoIstanza.LivelloUfficio = "UP" Or statoIstanza.LivelloUfficio = "UDD") And operatore_Confronto.oUfficio.CodUfficio = objDocumento.Doc_Cod_Uff_Prop Then
                If specifico = True Then
                    compitoSuDocumento = "ISTRUTTORE"
                    If UCase(operatore_Confronto.Attributo("LIVELLO_UFFICIO")) = "SUPERVISORE" Then
                        compitoSuDocumento = "POC_ISTRUTTORE"
                    End If
                    If UCase(operatore_Confronto.Attributo("LIVELLO_UFFICIO")) = "4LIVELLO" Then
                        compitoSuDocumento = "4LIVELLO"
                    End If
                Else
                    compitoSuDocumento = "REV_PROPONENTE"
                End If
                If operatore_Confronto.oUfficio.bUfficioDirigenzaDipartimento Then
                    If UCase(operatore_Confronto.Attributo("LIVELLO_UFFICIO")) = "RESPONSABILE" Then
                        If specifico = True Then
                            compitoSuDocumento = "DIRIGENTEGEN"
                        Else
                            compitoSuDocumento = "REV_DIRIGENTEGEN"
                        End If
                    End If
                Else
                    If UCase(operatore_Confronto.Attributo("LIVELLO_UFFICIO")) = "RESPONSABILE" Then
                        If specifico = True Then
                            compitoSuDocumento = "DIRIGENTEUP"
                        Else
                            compitoSuDocumento = "REV_DIRIGENTEUP"
                        End If
                    End If
                End If
            End If

            'se il documento è in arrivo in dirigenza generale
            If operatore_Confronto.oUfficio.CodUfficio <> objDocumento.Doc_Cod_Uff_Prop And statoIstanza.LivelloUfficio = "UDD" Then
                compitoSuDocumento = "REV_DIRIGENZA"
                If UCase(operatore_Confronto.Attributo("LIVELLO_UFFICIO")) = "RESPONSABILE" Then
                    If specifico = True Then
                        compitoSuDocumento = "DIRIGENTEGEN"
                    Else
                        compitoSuDocumento = "REV_DIRIGENTEGEN"
                    End If
                End If
            End If

            'se il documento è in arrivo in segreteria della giunta
            If statoIstanza.LivelloUfficio = "US" Then
                compitoSuDocumento = "REV_SEGRETERIA"
                If UCase(operatore_Confronto.Attributo("LIVELLO_UFFICIO")) = "RESPONSABILE" Or
                    UCase(operatore_Confronto.Attributo("LIVELLO_UFFICIO")) = "SUPERVISORE" Then
                    compitoSuDocumento = "DIR_SEGRETERIA"
                End If
            End If

            'se il documento è in arrivo in controllo amministrativo
            If statoIstanza.LivelloUfficio = "UCA" Then
                compitoSuDocumento = "REV_CONTROLLOAMM"
                If UCase(operatore_Confronto.Attributo("LIVELLO_UFFICIO")) = "RESPONSABILE" Then
                    If specifico = True Then
                        compitoSuDocumento = "DIR_CONTROLLOAMM"
                    Else
                        compitoSuDocumento = "REV_DIR_CONTROLLOAMM"
                    End If

                End If
                If UCase(statoIstanza.Operatore) = UCase(Me.getUtenteArchivio()) Then
                    compitoSuDocumento = "ARCHIVIAZIONE"
                End If
            End If

            'se il documento è in arrivo in in ragioneria
            If statoIstanza.LivelloUfficio = "UR" Then
                compitoSuDocumento = "REV_RAGIONERIA"
                If UCase(operatore_Confronto.Attributo("LIVELLO_UFFICIO")) = "RESPONSABILE" Then
                    If specifico = True Then
                        compitoSuDocumento = "DIR_RAGIONERIA"
                    Else
                        compitoSuDocumento = "REV_DIR_RAGIONERIA"
                    End If
                End If
            End If

            'se il documento è in arrivo in in ragioneria
            If operatore_Confronto.oUfficio.CodUfficio <> objDocumento.Doc_Cod_Uff_Prop And statoIstanza.LivelloUfficio = "UPL" Then
                compitoSuDocumento = "REV_POLITICA"
                If UCase(operatore_Confronto.Attributo("LIVELLO_UFFICIO")) = "RESPONSABILE" Then
                    compitoSuDocumento = "RESP_POLITICO"
                End If
            End If

            'se il documento è in arrivo in UFF. SEGR. DI PRESID. PER CONTROLLO LEGITTIMITA'
            If statoIstanza.LivelloUfficio = "USL" Then
                compitoSuDocumento = "REV_CONTRLEGITT"
                If UCase(operatore_Confronto.Attributo("LIVELLO_UFFICIO")) = "RESPONSABILE" Then
                    If specifico = True Then
                        compitoSuDocumento = "DIR_CONTRLEGITT"
                    Else
                        compitoSuDocumento = "REV_DIR_CONTRLEGITT"
                    End If

                End If
                If UCase(statoIstanza.Operatore) = UCase(Me.getUtenteArchivio()) Then
                    compitoSuDocumento = "ARCHIVIAZIONE"
                End If
            End If

            'se il documento è in arrivo in UFF. SEGR. DI PRESID. PER LA FIRMA DEL SEGRETARIO, PRIMA DEL PRESIDENTE
            If statoIstanza.LivelloUfficio = "USS" Then
                compitoSuDocumento = "REV_SEGRETPRES"
                If UCase(operatore_Confronto.Attributo("LIVELLO_UFFICIO")) = "RESPONSABILE" Then
                    If specifico = True Then
                        compitoSuDocumento = "DIR_SEGRETPRES"
                    Else
                        compitoSuDocumento = "REV_DIR_SEGRETPRES"
                    End If

                End If
                If UCase(statoIstanza.Operatore) = UCase(Me.getUtenteArchivio()) Then
                    compitoSuDocumento = "ARCHIVIAZIONE"
                End If
            End If

            'se il documento è in arrivo in UFF. DI PRESIDENZA PER LA FIRMA DEL PRESIDENTE
            If statoIstanza.LivelloUfficio = "UPRES" Then
                compitoSuDocumento = "REV_DIRPRESIDENTE"
                If UCase(operatore_Confronto.Attributo("LIVELLO_UFFICIO")) = "RESPONSABILE" Then
                    If specifico = True Then
                        compitoSuDocumento = "DIR_PRESIDENTE"
                    Else
                        compitoSuDocumento = "REV_DIR_PRESIDENTE"
                    End If

                End If
                If UCase(statoIstanza.Operatore) = UCase(Me.getUtenteArchivio()) Then
                    compitoSuDocumento = "ARCHIVIAZIONE"
                End If
            End If


        Catch ex As Exception
            compitoSuDocumento = ""
        Finally
            Definisci_Compito = compitoSuDocumento
        End Try
    End Function

    Public Function FO_Elenco_Compiti_Documento(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Elenco_Compiti_Documento"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        idDocumento = vParm(Dic_FODocumentale.vc_Elenco_Compiti_Documento.c_idDocumento) & ""

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If
        If vParm(Dic_FODocumentale.vc_Elenco_Compiti_Documento.c_NomeCognome) & "" = "1" Then
            'è necessario ordinare prima il nome e poi il cognome (per le firme)
            Sqlq = "SELECT     Documento_compito_utente.Dco_utente, Tab_Operatori.Op_Nome + ' ' + Tab_Operatori.Op_Cognome AS nominativo, " &
              "      Documento_compito_utente.Dco_Compito , Tab_Compiti_Documento.Tcd_Descrizione, Dco_DataRegistrazione " &
              " FROM         Tab_Compiti_Documento INNER JOIN " &
              "      Documento_compito_utente ON Tab_Compiti_Documento.Tcd_Compito = Documento_compito_utente.Dco_Compito INNER JOIN " &
              "      Tab_Operatori ON Documento_compito_utente.Dco_utente = Tab_Operatori.Op_Codice_Operatore " &
              " WHERE     (Documento_compito_utente.Dco_id_Documento = '" & idDocumento & "') " &
              " ORDER BY Documento_compito_utente.Dco_DataRegistrazione "

        Else
            Sqlq = "SELECT     Documento_compito_utente.Dco_utente, Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome AS nominativo, " &
                      "      Documento_compito_utente.Dco_Compito , Tab_Compiti_Documento.Tcd_Descrizione, Dco_DataRegistrazione " &
                      " FROM         Tab_Compiti_Documento INNER JOIN " &
                      "      Documento_compito_utente ON Tab_Compiti_Documento.Tcd_Compito = Documento_compito_utente.Dco_Compito INNER JOIN " &
                      "      Tab_Operatori ON Documento_compito_utente.Dco_utente = Tab_Operatori.Op_Codice_Operatore " &
                      " WHERE     (Documento_compito_utente.Dco_id_Documento = '" & idDocumento & "') " &
                      " ORDER BY Documento_compito_utente.Dco_DataRegistrazione "
        End If

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)
        If vR(0) <> 0 Then
            vRitPar(0) = 1
            vRitPar(1) = vR(1)
            GoTo FineSub
        End If

        vRitPar(0) = 0
        vRitPar(1) = vR(1)

FineSub:
        FO_Elenco_Compiti_Documento = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function


Herr:
        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo FineSub
        ' Resume
    End Function

    Public Function Dummy(ByVal vParm As Object) As Object
        Const SFunzione As String = "Dummy"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        DB = SISTEMA.PROCDB.Item("ALIASDB")

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Call DB.BeginTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        vRitPar(0) = 1
        vRitPar(1) = "Funzione in fase di sviluppo"

        Call DB.CommitTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        vRitPar(0) = 0
        vRitPar(1) = ""

FineSub:
        Dummy = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Function

    Public Function FO_Info_HomePage(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Info_HomePage"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim vR As Object = Nothing
        Dim vP(2) As Object

        Dim i As Integer
        Dim j As Integer
        Dim vTipoDocumenti As Object = Nothing
        Dim numTipiElementi As Integer
        Dim vIstanzaWFE As Object
        Dim sInIstanzaDet As New System.Text.StringBuilder

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Sqlq = " SELECT     Ttd_idTipoDocumento, Ttd_descrizione " &
               " FROM         Tab_Tipo_Documenti"

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)

        If vR(0) <> 0 Then
            vRitPar(0) = 1
            vRitPar(1) = "Il documento non esiste"
            GoTo FineSub
        End If

        'conteggio dei documenti in carico all'utente
        vTipoDocumenti = vR(1)
        numTipiElementi = vR(2) - 1
        Dim vRitNumDoc(numTipiElementi, 1) As Object

        For i = 0 To numTipiElementi

            vR = WorkList_Documenti(oOperatore.Codice, vTipoDocumenti(0, i))

            If vR(0) > 1 Then
                vRitPar(0) = vR(0)
                vRitPar(1) = "Problemi con il WorkFlow Engine - " + vR(1)
                GoTo FineSub
            End If

            If vR(0) = 0 Then
                sInIstanzaDet.Remove(0, sInIstanzaDet.Length)
                vIstanzaWFE = vR(1)
                For j = 0 To UBound(vIstanzaWFE, 2)
                    If Trim(vIstanzaWFE(0, j)) <> "" Then
                        If sInIstanzaDet.Length = 0 Then
                            sInIstanzaDet.Remove(0, sInIstanzaDet.Length)
                            sInIstanzaDet.Append("'" & Trim(vIstanzaWFE(0, j)) & "'")
                        Else
                            sInIstanzaDet = sInIstanzaDet.Append(",'" & Trim(vIstanzaWFE(0, j)) & "'")
                        End If
                    End If
                Next

                Sqlq = " select count(*) " &
                       " FROM fn_ElencoDocumenti('" & sInIstanzaDet.Replace("'", "''").ToString & "'," & vTipoDocumenti(0, i) & ",  '" & Format(Now(), "MM/dd/yyyy") & "') "

                vP(0) = DB
                vP(1) = Sqlq
                vP(2) = 2
                vR = GDB.DBQuery(vP)

                If vR(0) <> 0 Then
                    vRitPar(0) = vR(0)
                    vRitPar(1) = vR(1)
                    GoTo FineSub
                End If
                vRitNumDoc(i, 0) = vTipoDocumenti(1, i)
                vRitNumDoc(i, 1) = vR(1)(0, 0)
            Else
                vRitNumDoc(i, 0) = vTipoDocumenti(1, i)
                vRitNumDoc(i, 1) = 0
            End If
        Next

        'conteggio documenti in deposito
        Dim vRitNumDocDeposito(numTipiElementi, 1) As Object
        For i = 0 To numTipiElementi

            vR = WorkList_Documenti(oOperatore.oUfficio.CodUfficio, vTipoDocumenti(0, i))
            If vR(0) > 1 Then
                vRitPar(0) = vR(0)
                vRitPar(1) = "Problemi con il WorkFlow Engine - " + vR(1)
                GoTo FineSub
            End If

            If vR(0) = 0 Then
                sInIstanzaDet.Remove(0, sInIstanzaDet.Length)
                vIstanzaWFE = vR(1)
                For j = 0 To UBound(vIstanzaWFE, 2)
                    If Trim(vIstanzaWFE(0, j)) <> "" Then
                        If sInIstanzaDet.Length = 0 Then
                            sInIstanzaDet.Remove(0, sInIstanzaDet.Length)
                            sInIstanzaDet.Append("'" & Trim(vIstanzaWFE(0, j)) & "'")
                        Else
                            sInIstanzaDet = sInIstanzaDet.Append(",'" & Trim(vIstanzaWFE(0, j)) & "'")
                        End If
                    End If
                Next

                Sqlq = " select count(*) " &
                       " FROM fn_ElencoDocumenti('" & sInIstanzaDet.Replace("'", "''").ToString & "'," & vTipoDocumenti(0, i) & ",  '" & Format(Now(), "MM/dd/yyyy") & "') "

                vP(0) = DB
                vP(1) = Sqlq
                vP(2) = 2
                vR = GDB.DBQuery(vP)

                If vR(0) <> 0 Then
                    vRitPar(0) = vR(0)
                    vRitPar(1) = vR(1)
                    GoTo FineSub
                End If
                vRitNumDocDeposito(i, 0) = vTipoDocumenti(1, i)
                vRitNumDocDeposito(i, 1) = vR(1)(0, 0)
            Else
                vRitNumDocDeposito(i, 0) = vTipoDocumenti(1, i)
                vRitNumDocDeposito(i, 1) = 0
            End If
        Next

        Call Scarica_Messaggi(oOperatore.Codice)

        Dim nuoviMessaggi As Integer

        Sqlq = "SELECT     COUNT(Msg_id) AS numMsg " &
              " FROM  Messaggi  " &
               " WHERE     (Msg_cancellato = 0) AND (Msg_destinatario = '" & oOperatore.Codice & "') " &
               " GROUP BY Msg_dataLettura HAVING      (Msg_dataLettura IS NULL) "

        'Sqlq = "SELECT COUNT(*) AS numMsg " & _
        '        "FROM Messaggi " & _
        '        "INNER JOIN Casella_Messaggi_Utente ON Casella_Messaggi_Utente.Cmu_idMessaggio = Messaggi.Msg_id " & _
        '        "INNER JOIN Stato_Istanza_Documento ON Casella_Messaggi_Utente.Cmu_iddocumento = Stato_Istanza_Documento.Doc_Id " & _
        '        "WHERE (Msg_cancellato = 0) AND (Msg_destinatario = '" & oOperatore.Codice & "')  AND Msg_dataLettura IS NULL " & _
        '        "AND (Stato_Istanza_Documento.Livello_Ufficio <> 'UAR') "

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2
        vR = GDB.DBQuery(vP)

        If vR(0) = 0 Then
            nuoviMessaggi = vR(1)(0, 0)
        Else
            nuoviMessaggi = 0
        End If

        Dim vEsito(Dic_FODocumentale.dimvr_Info_HomePage) As Object
        vEsito(Dic_FODocumentale.vr_Info_HomePage.c_numDoc_TipoDocumento) = vRitNumDoc
        vEsito(Dic_FODocumentale.vr_Info_HomePage.c_numDocDeposito_TipoDocumento) = vRitNumDocDeposito
        vEsito(Dic_FODocumentale.vr_Info_HomePage.c_numNuoviMessaggi) = nuoviMessaggi

        vRitPar(0) = 0
        vRitPar(1) = vEsito

FineSub:
        FO_Info_HomePage = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo FineSub
        ' Resume
    End Function
    Function ContaDocumentiPerDipartimento(ByVal codOperatore As String, ByVal tipoAtto As Integer) As Generic.List(Of ItemContaDocumenti)

        Const SFunzione As String = "ContaDocumentiPerDipartimento"

        Log.Debug(SFunzione & oOperatore.Codice & " ")
        Dim lista As New Generic.List(Of ItemContaDocumenti)

        Dim sqlq As String = "SELECT     conti.totale, conti.Str_padre, Struttura.Str_descrBreve,doc_tipo " &
                            " FROM         (SELECT     COUNT(*) AS totale, Struttura .Str_padre,doc_tipo " &
                            " FROM          Stato_Istanza_Documento INNER JOIN " &
                            " Documento on Stato_Istanza_Documento.Doc_Id =Documento.Doc_Id " &
                            " INNER JOIN " &
                            " Struttura  ON Stato_Istanza_Documento.Cod_Ufficio = Struttura.Str_id " &
                            " WHERE      (Stato_Istanza_Documento.Ruolo <> 'D') AND (Stato_Istanza_Documento.Ruolo <> 'A') AND " &
                            " (Stato_Istanza_Documento.Operatore = '" & codOperatore & "') and doc_tipo=" & tipoAtto & " " &
                            " GROUP BY Struttura.Str_padre,doc_tipo) AS conti INNER JOIN " &
                            " Struttura AS Struttura ON conti.Str_padre = Struttura.Str_id order by Struttura.Str_descrizione "


        Dim item As ItemContaDocumenti = Nothing
        Try
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            Using rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, sqlq, Nothing)
                While rdr.Read()
                    item = New ItemContaDocumenti
                    item.Totale = rdr.GetInt32(0)
                    item.CodiceDipartimento = rdr.GetString(1)
                    item.DescrizioneDipartimento = rdr.GetString(2)
                    item.TipoAtto = rdr.GetInt32(3)
                    lista.Add(item)

                End While
                rdr.Close()
            End Using
        Catch ex As SqlClient.SqlException
            item = Nothing
            lista.Clear()
            Log.Error(SFunzione & oOperatore.Codice & " " & ex.Message)
        Catch ex As Exception
            item = Nothing
            lista.Clear()
            Log.Error(SFunzione & oOperatore.Codice & " " & ex.Message)
        End Try



        Return lista


    End Function

    Function ContaDocumentiUrgentiPerDipartimento(ByVal codOperatore As String, ByVal tipoAtto As Integer) As Generic.Dictionary(Of String, ItemContaDocumenti)

        Const SFunzione As String = "ContaDocumentiUrgentiPerDipartimento"

        Log.Debug(SFunzione & oOperatore.Codice & " ")
        Dim lista As New Generic.Dictionary(Of String, ItemContaDocumenti)

        Dim sqlq As String = "SELECT     conti.totale, conti.Str_padre, Struttura.Str_descrBreve,doc_tipo " &
                            " FROM         (SELECT     COUNT(*) AS totale, Struttura .Str_padre,doc_tipo " &
                            " FROM          Stato_Istanza_Documento INNER JOIN " &
                            " Documento on Stato_Istanza_Documento.Doc_Id =Documento.Doc_Id " &
                            " INNER JOIN " &
                            " Struttura  ON Stato_Istanza_Documento.Cod_Ufficio = Struttura.Str_id " &
                            " INNER JOIN Documento_Attributo on Documento.Doc_Id  = Documento_Attributo.Doc_Id " &
                            " WHERE      (Stato_Istanza_Documento.Ruolo <> 'D') AND (Stato_Istanza_Documento.Ruolo <> 'A') AND " &
                            " (Stato_Istanza_Documento.Operatore = '" & codOperatore & "') and doc_tipo=" & tipoAtto & " " &
                            " AND Cod_Attributo = 'URGENTE' AND Valore = 'TRUE' " &
                            " GROUP BY Struttura.Str_padre,doc_tipo) AS conti INNER JOIN " &
                            " Struttura AS Struttura ON conti.Str_padre = Struttura.Str_id order by Struttura.Str_descrizione "


        Dim item As ItemContaDocumenti = Nothing
        Try
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            Using rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, sqlq, Nothing)
                While rdr.Read()
                    item = New ItemContaDocumenti
                    item.Totale = rdr.GetInt32(0)
                    item.CodiceDipartimento = rdr.GetString(1)
                    item.DescrizioneDipartimento = rdr.GetString(2)
                    item.TipoAtto = rdr.GetInt32(3)
                    lista.Add(item.CodiceDipartimento + "#" + item.TipoAtto, item)

                End While
                rdr.Close()
            End Using
        Catch ex As SqlClient.SqlException
            item = Nothing
            lista.Clear()
            Log.Error(SFunzione & oOperatore.Codice & " " & ex.Message)
        Catch ex As Exception
            item = Nothing
            lista.Clear()
            Log.Error(SFunzione & oOperatore.Codice & " " & ex.Message)
        End Try



        Return lista


    End Function

    Function ContaDocumentiUrgentiPerOperatoreTot(ByVal codOperatore As String, ByVal tipoAtto As Integer) As ItemContaDocumenti

        Const SFunzione As String = "ContaDocumentiUrgentiPerOperatoreTot"

        Log.Debug("***INIZIO " & SFunzione & " Operatore: " & oOperatore.Codice & " - " & Now)

        Dim sqlq As String = " SELECT     COUNT(*) AS totale " &
                            " FROM          Stato_Istanza_Documento INNER JOIN " &
                            " Documento on Stato_Istanza_Documento.Doc_Id =Documento.Doc_Id " &
                            " INNER JOIN Documento_Attributo on Documento.Doc_Id  = Documento_Attributo.Doc_Id " &
                            " WHERE      (Stato_Istanza_Documento.Ruolo <> 'D') AND (Stato_Istanza_Documento.Ruolo <> 'A')  " &
                            " AND Stato_Istanza_Documento.Operatore = '" & codOperatore & "' " &
                            " AND doc_tipo=" & tipoAtto & " " &
                            " AND Cod_Attributo = 'URGENTE' AND Valore = 'TRUE' "


        Dim item As ItemContaDocumenti = Nothing
        Try
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
            Using rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, sqlq, Nothing)
                While rdr.Read()
                    item = New ItemContaDocumenti
                    item.Totale = rdr.GetInt32(0)
                End While
                rdr.Close()
            End Using
        Catch ex As SqlClient.SqlException
            item = Nothing
            Log.Error(SFunzione & oOperatore.Codice & " " & ex.Message)
        Catch ex As Exception
            item = Nothing
            Log.Error(SFunzione & oOperatore.Codice & " " & ex.Message)
        End Try
        Log.Debug("***FINE " & SFunzione & " Operatore: " & oOperatore.Codice & " - " & Now)

        Return item
    End Function

    Function ContaDocumentiUrgentiDepositoUfficio(ByVal codUfficioOperatore As String, ByVal tipoAtto As Integer) As ItemContaDocumenti

        Const SFunzione As String = "ContaDocumentiUrgentiDepositoUfficio"

        Log.Debug(SFunzione & oOperatore.Codice & " ")
        Dim lista As New Generic.Dictionary(Of String, ItemContaDocumenti)

        Dim sqlq As String = " SELECT     COUNT(*) AS totale " &
                            " FROM          Stato_Istanza_Documento INNER JOIN " &
                            " Documento on Stato_Istanza_Documento.Doc_Id =Documento.Doc_Id " &
                            " INNER JOIN Documento_Attributo on Documento.Doc_Id  = Documento_Attributo.Doc_Id " &
                            " WHERE      (Stato_Istanza_Documento.Ruolo = 'D')  " &
                            " AND Stato_Istanza_Documento.Operatore = '" & codUfficioOperatore & "' " &
                            " AND doc_tipo=" & tipoAtto & " " &
                            " AND Cod_Attributo = 'URGENTE' AND Valore = 'TRUE' "


        Dim item As ItemContaDocumenti = Nothing
        Try
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            Using rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, sqlq, Nothing)
                While rdr.Read()
                    item = New ItemContaDocumenti
                    item.Totale = rdr.GetInt32(0)


                End While
                rdr.Close()
            End Using
        Catch ex As SqlClient.SqlException
            item = Nothing
            lista.Clear()
            Log.Error(SFunzione & oOperatore.Codice & " " & ex.Message)
        Catch ex As Exception
            item = Nothing
            lista.Clear()
            Log.Error(SFunzione & oOperatore.Codice & " " & ex.Message)
        End Try



        Return item


    End Function

    Function ContaDocumentiNonConformiTrasparenzaUfficio(ByVal codUfficioOperatore As String, ByVal tipoAtto As Integer) As ItemContaDocumenti
        Const SFunzione As String = "ContaDocumentiNonConformiTrasparenzaUfficio"

        Log.Debug(SFunzione & oOperatore.Codice & " ")
        Dim lista As New Generic.List(Of ItemContaDocumenti)

        Dim sqlq As String = "  "

        Dim item As New ItemContaDocumenti
        Try
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
            Dim parms(1) As SqlParameter
            Dim rdr As SqlClient.SqlDataReader = Nothing
            parms(0) = New SqlParameter("@OPERATORE", SqlDbType.VarChar)
            parms(0).Value = codUfficioOperatore
            parms(1) = New SqlParameter("@DOC_TIPO", SqlDbType.VarChar)
            parms(1).Value = tipoAtto.ToString

            item.Totale = Intema.DBUtility.SqlHelper.ExecuteScalar(strConn, CommandType.StoredProcedure, "sp_getTotDocumenti_nonConformiTrasparenza", parms, -1)

        Catch ex As SqlClient.SqlException
            item = Nothing
            lista.Clear()
            Log.Error(SFunzione & oOperatore.Codice & " " & ex.Message)
        Catch ex As Exception
            item = Nothing
            lista.Clear()
            Log.Error(SFunzione & oOperatore.Codice & " " & ex.Message)
        End Try
        Return item
    End Function



    Public Function FO_Aggiorna_Stato_Lettera(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Aggiorna_Stato_Lettera"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim vP(2) As Object
        Dim vPUp(2, 2) As Object
        Dim vR As Object = Nothing
        Dim RS As Object = Nothing

        Dim tipoLettera As Integer
        Dim idDocumenti As Object
        Dim prossimoStato As Integer
        Dim idAllegatoLettera As String

        tipoLettera = vParm(Dic_FODocumentale.vc_Registra_Lettera.c_tipolettera)
        idDocumenti = vParm(Dic_FODocumentale.vc_Registra_Lettera.c_idDocumenti)
        prossimoStato = vParm(Dic_FODocumentale.vc_Registra_Lettera.c_testo)
        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Dim i As Integer
        Dim sSelect As String = "'"
        For i = 0 To idDocumenti.getupperbound(0) - 1
            sSelect += idDocumenti(i) & "','"
        Next
        sSelect += idDocumenti(i) & "'"

        Call DB.BeginTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        Sqlq = "SELECT  * " &
               "         FROM LETTERE_DOCUMENTI " &
               " WHERE     (Ltd_idAllegato in(" & sSelect & "))  "

        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        If Not RS.EOF Then
            RS.MoveFirst()
            While Not RS.EOF
                Call DB.EditRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    GoTo RollTrans
                End If
                'salvo la chiave della tabella allegati
                idAllegatoLettera = RS("Ltd_idAllegato").Value

                If prossimoStato = 0 Then

                    RS("Ltd_idAllegato").Value = Nothing
                    RS("Ltd_descrizione").Value = Nothing
                    RS("Ltd_stampata").Value = 0
                Else
                    RS("Ltd_stampata").Value = 1
                End If

                Call DB.UpdateRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    GoTo RollTrans
                End If

                RS.MoveNext()
            End While

            Call DB.CommitTrans()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If

        End If

        If prossimoStato <> 0 Then
            vParm(Dic_FODocumentale.vc_Registra_Allegato.c_idAllegato) = idAllegatoLettera

            vR = FO_Cancella_Allegato(vParm)

            If vR(0) <> 0 Then
                vRitPar(0) = vR(0)
                vRitPar(1) = vR(1)
                GoTo RollTrans
            End If
        End If
        vRitPar(0) = 0
        vRitPar(1) = ""

FineSub:
        FO_Aggiorna_Stato_Lettera = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Function

    Public Function FO_Registra_Lettera(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Registra_Lettera"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim vP(2) As Object
        Dim vPUp(2, 2) As Object
        Dim vR As Object = Nothing
        Dim RS As Object = Nothing

        Dim tipoLettera As Integer
        Dim parametriXml As String
        Dim idDocumenti As Object = Nothing
        Dim sTesto As String
        Dim descrTipoLettera As String
        Dim template As String
        Dim idAllegatoLettera As String
        Dim elencoNumeroDocumenti As New StringBuilder

        tipoLettera = vParm(Dic_FODocumentale.vc_Registra_Lettera.c_tipolettera)
        idDocumenti = vParm(Dic_FODocumentale.vc_Registra_Lettera.c_idDocumenti)
        sTesto = vParm(Dic_FODocumentale.vc_Registra_Lettera.c_testo)

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If


        'interrogazione tipo lettera
        Sqlq = "SELECT     Ttl_tipoLettera, Ttl_path_template, Ttl_documento, Ttl_descrizione, Ttl_parametri " &
               " FROM         Tab_Tipo_Lettera " &
               " WHERE (Ttl_tipoLettera = " & tipoLettera & " )"

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)
        If vR(0) <> 0 Then
            vRitPar(0) = vR(0)
            vRitPar(1) = vR(1)
            GoTo FineSub
        End If

        template = vR(1)(1, 0)
        descrTipoLettera = vR(1)(3, 0)
        parametriXml = vR(1)(4, 0)
        Dim xmlDati As New StringBuilder
        'interrogazione su tutti i documenti

        Sqlq = "SELECT     Struttura.Str_descrizione, Struttura_Dip.Str_descrizione " &
               " FROM         Struttura INNER JOIN " &
               "       Struttura Struttura_Dip ON Struttura.Str_padre = Struttura_Dip.Str_id " &
               " WHERE     (Struttura.Str_id = '" & oOperatore.oUfficio.CodUfficio & "')"

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)
        If vR(0) <> 0 Then
            vRitPar(0) = vR(0)
            vRitPar(1) = vR(1)
            GoTo FineSub
        End If

        xmlDati.Append("<ufficio>" & vR(1)(0, 0) & "</ufficio>")
        xmlDati.Append("<dipartimento>" & vR(1)(1, 0) & "</dipartimento>")
        xmlDati.Append("<oggetto>" & sTesto & "</oggetto>")
        xmlDati.Append(parametriXml)

        Dim i As Integer
        Dim sSelect As String = "'"
        For i = 0 To idDocumenti.getupperbound(0) - 1
            sSelect += idDocumenti(i) & "','"
        Next
        sSelect += idDocumenti(i) & "'"

        Sqlq = "select isnull(Doc_numero,Doc_numeroProvvisorio) as Doc_numero,isnull(Doc_Oggetto,''), Struttura.Str_descrizione " &
               " FROM DOCUMENTO " &
               " INNER JOIN Struttura ON Documento.Doc_Cod_Uff_Prop = Struttura.Str_id " &
               " where doc_id in(" & sSelect & ")"

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)
        If vR(0) <> 0 Then
            vRitPar(0) = vR(0)
            vRitPar(1) = vR(1)
            GoTo FineSub
        End If

        For i = 0 To (vR(2) - 1)
            xmlDati.Append("<documento>")
            xmlDati.Append("<ord>" & CStr(i + 1) & "</ord>")
            xmlDati.Append("<numero>" & vR(1)(0, i) & "</numero>")
            xmlDati.Append("<oggetto>" & vR(1)(1, i) & "</oggetto>")
            xmlDati.Append("<uffProp>" & vR(1)(2, i) & "</uffProp>")
            xmlDati.Append("</documento>")

            elencoNumeroDocumenti.Append(vR(1)(0, i) & ",")
        Next

        'creo lettera
        vR = Crea_Documento_XHTML(template, "<datilettera>" & xmlDati.ToString & "</datilettera>")
        If vR(0) <> 0 Then
            vRitPar(0) = vR(0)
            vRitPar(1) = vR(1)
            GoTo FineSub
        End If
        Dim bfile() As Byte
        bfile = vR(1)

        Call DB.BeginTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        Dim vRegAll(Dic_FODocumentale.dimvc_Registra_Allegato) As Object
        vRegAll(Dic_FODocumentale.vc_Registra_Allegato.c_descTipo) = "LETTERA_ACCOMP"
        vRegAll(Dic_FODocumentale.vc_Registra_Allegato.c_descEstensione) = "pdf"
        vRegAll(Dic_FODocumentale.vc_Registra_Allegato.c_nome) = "Lettera " + idDocumento
        vRegAll(Dic_FODocumentale.vc_Registra_Allegato.c_idDocumento) = "0"
        vRegAll(Dic_FODocumentale.vc_Registra_Allegato.c_binarioAllegato) = bfile

        vR = FO_Registra_Allegato(vRegAll, DB, False)
        If vR(0) <> 0 Then
            vRitPar(0) = vR(0)
            vRitPar(1) = vR(1)
            GoTo RollTrans
        End If

        idAllegatoLettera = vR(1)

        Sqlq = "SELECT      Ltd_idAllegato,  Ltd_descrizione , Ltd_data " &
               "         FROM LETTERE_DOCUMENTI " &
               " WHERE     (Ltd_idDocumento in(" & sSelect & ")) AND (isnull(Ltd_idAllegato,'') = '') " &
               "          AND (Ltd_stampata = 0) AND (Ltd_ufficio = '" & oOperatore.oUfficio.CodUfficio & "')"

        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        If Not RS.EOF Then
            RS.MoveFirst()
            While Not RS.EOF
                Call DB.EditRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    GoTo RollTrans
                End If

                RS("Ltd_idAllegato").Value = idAllegatoLettera
                RS("Ltd_descrizione").Value = descrTipoLettera & " documenti  " & elencoNumeroDocumenti.ToString
                RS("Ltd_data").Value = Now
                Call DB.UpdateRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    GoTo RollTrans
                End If

                RS.MoveNext()
            End While
        End If

        Call DB.CommitTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        vRitPar(0) = 0
        vRitPar(1) = ""

FineSub:
        FO_Registra_Lettera = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Function

    '    Friend Function FO_Elenco_Documenti_GIOVANNA(ByVal vParm As Object) As Object
    '        Const SFunzione As String = "FO_Elenco_Documenti"
    '        Dim vRitPar(3) As Object
    '        Dim Sqlq As String = ""
    '        Dim sWhere As String = ""

    '        Dim vR As Object = Nothing
    '        Dim tipoDocumento As Integer
    '        Dim data_inizio As String = ""
    '        Dim data_fine As String = ""
    '        Dim oggetto As String = ""
    '        Dim cod_ufficio As String = ""
    '        Dim cod_dip As String = ""
    '        Dim num_doc As String = ""
    '        Dim descr_ufficio As String = ""
    '        Dim vIstanzaWFE As Object = Nothing
    '        Dim sInIstanzaDet As New System.Text.StringBuilder
    '        Dim i As Integer = 0


    '        Dim visualizzaLaTipRigetto As String = ""

    '        vRitPar(0) = 0
    '        vRitPar(1) = ""
    '        If SISTEMA.bTRACE Then
    '            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
    '        End If

    '        If IsNumeric(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_tipoDocumento)) Then
    '            tipoDocumento = vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_tipoDocumento) & ""
    '        Else
    '            tipoDocumento = -1
    '        End If

    '        If IsDate(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_data_inizio)) Then
    '            data_inizio = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_data_inizio) & "")
    '        End If
    '        If IsDate(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_data_fine)) Then
    '            data_fine = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_data_fine) & "")
    '        End If
    '        oggetto = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_oggetto) & "")
    '        cod_ufficio = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_cod_ufficio) & "")
    '        cod_dip = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_cod_dip) & "")
    '        num_doc = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_numero_doc) & "")
    '        visualizzaLaTipRigetto = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_tipo_Rigetto) & "")


    '        Sqlq = " select Documento.Doc_Id , isnull(Doc_numero,Doc_numeroProvvisorio) as Doc_numero ,doc_data  , " & _
    '               "         dbo.fn_ReplaceCaratteriSpeciali(isnull(Doc_Oggetto,'')) as Doc_Oggetto ,Doc_Cod_Uff_Prop ,  doc_dataRicezione,isnull(Doc_isContabile,0) as Doc_isContabile  " & _
    '               " FROM Documento inner join Stato_Istanza_Documento on Documento.[Doc_Id] = Stato_Istanza_Documento.[Doc_Id] and Stato_Istanza_Documento.[Ruolo] <> 'A' "

    '        If vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_utente) <> oOperatore.Codice Then
    '            sWhere = sWhere & " where Stato_Istanza_Documento.operatore ='" & vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_utente) & "'"
    '        Else
    '            sWhere = sWhere & " where Stato_Istanza_Documento.operatore ='" & oOperatore.Codice & "'"
    '        End If
    '        sWhere = sWhere & " AND doc_tipo=" & tipoDocumento
    '        If data_inizio <> "" Then
    '            sWhere = sWhere & IIf(Trim(sWhere) = "", " WHERE ", " AND ") & " ( Doc_Data >= CONVERT(DATETIME, '" & Format(CDate(data_inizio), "MM/dd/yyyy") & " 00:00:00',102) ) "
    '        End If
    '        If data_fine <> "" Then
    '            sWhere = sWhere & IIf(Trim(sWhere) = "", " WHERE ", " AND ") & "  ( Doc_Data <= CONVERT(DATETIME, '" & Format(CDate(data_fine), "MM/dd/yyyy") & " 23:59:59',102) ) "
    '        End If

    '        Dim queryoggetto As String = SplitStringOggettoDoc_Oggetto(oggetto)
    '        If queryoggetto <> "" Then
    '            sWhere = sWhere & IIf(Trim(sWhere) = "", " WHERE ", " AND ") & " ( " & queryoggetto & " ) "
    '        End If

    '        If cod_ufficio <> "" Or descr_ufficio <> "" Or cod_dip <> "" Then
    '            Sqlq = Sqlq & " left OUTER  join Struttura on Doc_Cod_Uff_Prop = Struttura.Str_id COLLATE Sql_latin1_general_cp1_ci_as "
    '        End If

    '        If cod_dip <> "" Then
    '            sWhere = sWhere & IIf(Trim(sWhere) = "", " WHERE ", " AND ") & "  ( Struttura.Str_padre = '" & cod_dip & "' ) "
    '        End If

    '        If cod_ufficio <> "" Then
    '            sWhere = sWhere & IIf(Trim(sWhere) = "", " WHERE ", " AND ") & "  ( Struttura.Str_id = '" & cod_ufficio & "' ) "
    '        End If


    '        If descr_ufficio <> "" Then
    '            sWhere = sWhere & IIf(Trim(sWhere) = "", " WHERE ", " AND ") & "  ( Struttura.Str_descrizione like '%" & descr_ufficio & "%' ) "
    '        End If

    '        If num_doc <> "" Then
    '            sWhere = sWhere & IIf(Trim(sWhere) = "", " WHERE ", " AND ") & "  ( Doc_numero like '%" & num_doc & "%' ) "
    '        End If

    '        Dim lstrOrderBy As String = "" & oOperatore.Attributo("ORDER_ELENCO_DOCUMENTI")

    '        If lstrOrderBy = "" Then
    '            sWhere = sWhere & " ORDER BY  CAST(RIGHT(Doc_numero, 5) as int) ASC, Doc_data DESC, LEFT(Doc_numero, 4) ASC"
    '        Else
    '            sWhere = sWhere & " ORDER BY " & lstrOrderBy
    '        End If

    '        Sqlq = Sqlq & sWhere

    '        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

    '        Dim rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)


    '        Dim contaRighe As Integer = 0
    '        Dim arr(6, contaRighe) As Object
    '        Try


    '            While (rdr.Read())
    '                ReDim Preserve arr(6, contaRighe)

    '                For col As Integer = 0 To 6
    '                    arr(col, contaRighe) = rdr(col)
    '                Next
    '                contaRighe = contaRighe + 1


    '            End While
    '            rdr.Close()
    '            rdr = Nothing

    '            vRitPar(0) = IIf(contaRighe > 0, 0, 1)
    '            vRitPar(1) = IIf(contaRighe > 0, arr, "Nessun Record Trovato")

    '        Catch ex As Exception
    '            contaRighe = 0
    '            rdr = Nothing
    '            vRitPar(0) = 9999
    '            vRitPar(1) = ex.Message
    '        End Try



    '        If vRitPar(0) = 0 Then


    '            Dim vRisultati(12, UBound(arr, 2)) As String

    '            Dim contatoreRigheinserite As Integer = 0
    '            For i = 0 To UBound(arr, 2)
    '                vRisultati(0, contatoreRigheinserite) = arr(0, i) & ""
    '                vRisultati(1, contatoreRigheinserite) = arr(1, i) & ""
    '                vRisultati(2, contatoreRigheinserite) = arr(2, i) & ""
    '                vRisultati(3, contatoreRigheinserite) = arr(3, i) & ""
    '                vRisultati(4, contatoreRigheinserite) = ""

    '                vRisultati(5, contatoreRigheinserite) = arr(4, i) & ""
    '                vRisultati(6, contatoreRigheinserite) = arr(5, i)


    '                'modgg 10-06 4
    '                Sqlq = "SELECT     Sto_Prog " & _
    '                    " FROM Azioni_Utente_Documento " & _
    '                    " WHERE     (Sto_id_Doc = '" & vRisultati(0, contatoreRigheinserite) & "') AND (Sto_TipoAttivita = 'firma') AND (Sto_Prog > " & _
    '                    " (SELECT     MAX(Sto_Prog) AS Expr1 " & _
    '                    " FROM Azioni_Utente_Documento " & _
    '                    " WHERE      (Sto_id_Doc = '" & vRisultati(0, contatoreRigheinserite) & "') AND (Sto_TipoAttivita = 'PRODDOC' OR  Sto_TipoAttivita = 'arrivoWl'))) AND (Sto_Utente = '" & oOperatore.Codice & "')"




    '                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)


    '                Dim contaRighe2 As Integer = 0
    '                Dim arr2(0, contaRighe2) As Object
    '                Try


    '                    While (rdr.Read())
    '                        ReDim Preserve arr2(0, contaRighe2)

    '                        For col As Integer = 0 To 0
    '                            arr2(col, contaRighe2) = rdr(col)
    '                        Next
    '                        contaRighe2 = contaRighe2 + 1

    '                    End While
    '                    rdr.Close()
    '                    rdr = Nothing
    '                Catch ex As Exception
    '                    contaRighe2 = 0
    '                    rdr = Nothing
    '                    vRitPar(0) = 9999
    '                    vRitPar(1) = ex.Message
    '                End Try



    '                If contaRighe2 > 0 Then
    '                    'documento firmato
    '                    vRisultati(7, contatoreRigheinserite) = "./risorse/immagini/firma.gif"
    '                Else
    '                    'documento non firmato
    '                    vRisultati(7, contatoreRigheinserite) = ""
    '                End If
    '                vRisultati(8, contatoreRigheinserite) = ""
    '                vRisultati(9, contatoreRigheinserite) = arr(6, i) & ""
    '                vRisultati(10, contatoreRigheinserite) = ""
    '                vRisultati(11, contatoreRigheinserite) = ""
    '                vRisultati(12, contatoreRigheinserite) = ""
    '                Dim listaInoltriRigettiUffici As IList = UltimeOperazioniInoltroRigetto(vRisultati(0, i))
    '                For Each Item As Object In listaInoltriRigettiUffici
    '                    Select Case CStr(Item(0))
    '                        Case "UFFICIO_DIRIGENZA_DIPARTIMENTO"
    '                            vRisultati(10, contatoreRigheinserite) = "./risorse/immagini/" & getImageWorklist(Item(1))
    '                        Case "UFFICIO_CONTROLLO_AMMINISTRATIVO"
    '                            vRisultati(11, contatoreRigheinserite) = "./risorse/immagini/" & getImageWorklist(Item(1))
    '                        Case "UFFICIO_RAGIONERIA"
    '                            vRisultati(12, contatoreRigheinserite) = "./risorse/immagini/" & getImageWorklist(Item(1))

    '                    End Select

    '                Next

    '                Select Case visualizzaLaTipRigetto
    '                    Case ""
    '                        contatoreRigheinserite += 1
    '                    Case "UDD"
    '                        If vRisultati(10, contatoreRigheinserite).Contains(getImageWorklist("RIGETTO")) Then
    '                            contatoreRigheinserite += 1
    '                        End If
    '                    Case "UCA"
    '                        If vRisultati(11, contatoreRigheinserite).Contains(getImageWorklist("RIGETTO")) Then
    '                            contatoreRigheinserite += 1
    '                        End If
    '                    Case "UR"
    '                        If vRisultati(12, contatoreRigheinserite).Contains(getImageWorklist("RIGETTO")) Then
    '                            contatoreRigheinserite += 1
    '                        End If


    '                End Select



    '                ' contatoreRigheinserite += 1

    '            Next


    '            ReDim Preserve vRisultati(12, contatoreRigheinserite - 1)


    '            vRitPar(1) = vRisultati
    '        End If

    'FineSub:
    '        FO_Elenco_Documenti_GIOVANNA = vRitPar

    '        sInIstanzaDet = Nothing

    '        If vRitPar(0) <> 0 Then
    '            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
    '        End If
    '        If SISTEMA.bTRACE Then
    '            Call SISTEMA.Registra_Trace("Fine", SFunzione)
    '        End If



    '        ' Resume
    '    End Function
    Public Function UltimeOperazioniInoltroRigetto(ByVal idDocumento As String, Optional ByVal tipoDocumento As Integer = -1) As IList
        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim sqlUltimeOperazioniUfficio As String = ""


        '        Dim sqlUltimeOperazioniUfficioRigetto As String = " SELECT     Struttura_Attributi.Sta_attributo, Azioni_Utente_Documento.Sto_TipoAttivita, Sto_id_Doc " & _
        '" FROM         Azioni_Utente_Documento INNER JOIN  Tab_Operatori_Gruppi ON Azioni_Utente_Documento.Sto_Utente = Tab_Operatori_Gruppi.TOG_Operatore  LEFT OUTER JOIN " & _
        '"                      Struttura_Attributi ON Azioni_Utente_Documento.Sto_Ufficio = Struttura_Attributi.Sta_id RIGHT OUTER JOIN " & _
        '"                          (SELECT     MAX(Sto_Prog) AS Sto_Prog, Sto_Ufficio " & _
        '"                            FROM          Azioni_Utente_Documento AS Azioni_Utente_Documento_1 " & _
        '"                            WHERE      (Sto_id_Doc = '" & idDocumento & "') AND ( Sto_TipoAttivita = 'INOLTRO' OR Sto_TipoAttivita = 'RIGETTO') " & _
        '"                            GROUP BY Sto_Ufficio) AS ultimaOp ON Azioni_Utente_Documento.Sto_id_Doc = '" & idDocumento & "' AND  " & _
        '"                      Azioni_Utente_Documento.Sto_Prog = ultimaOp.Sto_Prog " & _
        '"WHERE  Sto_TipoAttivita = 'RIGETTO' AND (Tab_Operatori_Gruppi.TOG_Gruppo LIKE 'RespUf%') AND   ( (Struttura_Attributi.Sta_attributo = 'UFFICIO_DIRIGENZA_DIPARTIMENTO') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_RAGIONERIA') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_CONTROLLO_AMMINISTRATIVO'))"

        '        Dim sqlUltimeOperazioniUfficioInoltro As String = " SELECT     Struttura_Attributi.Sta_attributo, Azioni_Utente_Documento.Sto_TipoAttivita, Sto_id_Doc " & _
        '" FROM         Azioni_Utente_Documento LEFT OUTER JOIN " & _
        '"                      Struttura_Attributi ON Azioni_Utente_Documento.Sto_Ufficio = Struttura_Attributi.Sta_id RIGHT OUTER JOIN " & _
        '"                          (SELECT     MAX(Sto_Prog) AS Sto_Prog, Sto_Ufficio " & _
        '"                            FROM          Azioni_Utente_Documento AS Azioni_Utente_Documento_1 " & _
        '"                            WHERE      (Sto_id_Doc = '" & idDocumento & "') AND (Sto_TipoAttivita = 'INOLTRO' OR " & _
        '"                                                   Sto_TipoAttivita = 'RIGETTO') " & _
        '"                            GROUP BY Sto_Ufficio) AS ultimaOp ON Azioni_Utente_Documento.Sto_id_Doc = '" & idDocumento & "' AND  " & _
        '"                      Azioni_Utente_Documento.Sto_Prog = ultimaOp.Sto_Prog " & _
        '"WHERE  Sto_TipoAttivita = 'INOLTRO' AND (  (Struttura_Attributi.Sta_attributo = 'UFFICIO_DIRIGENZA_DIPARTIMENTO') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_RAGIONERIA') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_CONTROLLO_AMMINISTRATIVO') )"
        '        sqlUltimeOperazioniUfficio = " SELECT DISTINCT Sta_attributo, Sto_TipoAttivita, Sto_id_Doc FROM         ( " & sqlUltimeOperazioniUfficioRigetto & " UNION " & sqlUltimeOperazioniUfficioInoltro & " ) as sqlSub "



        '        Dim sqlUltimeOperazioniUfficioInoltro As String = " SELECT  Azioni_Utente_Documento.Sto_Prog,   Struttura_Attributi.Sta_attributo, Azioni_Utente_Documento.Sto_TipoAttivita, Sto_id_Doc " & _
        '" FROM         Azioni_Utente_Documento INNER JOIN  Tab_Operatori_Gruppi ON Azioni_Utente_Documento.Sto_Utente = Tab_Operatori_Gruppi.TOG_Operatore  LEFT OUTER JOIN " & _
        '"                      Struttura_Attributi ON Azioni_Utente_Documento.Sto_Ufficio = Struttura_Attributi.Sta_id RIGHT OUTER JOIN " & _
        '"                          (SELECT     MAX(Sto_Prog) AS Sto_Prog, Sto_Ufficio " & _
        '"                            FROM          Azioni_Utente_Documento AS Azioni_Utente_Documento_1 " & _
        '"                            WHERE      (Sto_id_Doc = '" & idDocumento & "') AND ( Sto_TipoAttivita = 'INOLTRO' OR Sto_TipoAttivita = 'RIGETTO') " & _
        '"                            GROUP BY Sto_Ufficio) AS ultimaOp ON Azioni_Utente_Documento.Sto_id_Doc = '" & idDocumento & "' AND  " & _
        '"                      Azioni_Utente_Documento.Sto_Prog = ultimaOp.Sto_Prog " & _
        '"WHERE  Sto_TipoAttivita = 'INOLTRO' AND (Tab_Operatori_Gruppi.TOG_Gruppo LIKE 'RespUf%') AND   ( (Struttura_Attributi.Sta_attributo = 'UFFICIO_DIRIGENZA_DIPARTIMENTO') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_RAGIONERIA') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_CONTROLLO_AMMINISTRATIVO')OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_SEGR_PRESIDENZA_LEGITTIMITA') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_SEGR_PRESIDENZA_SEGRETARIO') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_PRESIDENZA'))"

        '        Dim sqlUltimeOperazioniUfficioRigetto As String = " SELECT   Azioni_Utente_Documento.Sto_Prog,  Struttura_Attributi.Sta_attributo, Azioni_Utente_Documento.Sto_TipoAttivita, Sto_id_Doc " & _
        '" FROM         Azioni_Utente_Documento LEFT OUTER JOIN " & _
        '"                      Struttura_Attributi ON Azioni_Utente_Documento.Sto_Ufficio = Struttura_Attributi.Sta_id RIGHT OUTER JOIN " & _
        '"                          (SELECT     MAX(Sto_Prog) AS Sto_Prog, Sto_Ufficio " & _
        '"                            FROM          Azioni_Utente_Documento AS Azioni_Utente_Documento_1 " & _
        '"                            WHERE      (Sto_id_Doc = '" & idDocumento & "') AND (Sto_TipoAttivita = 'INOLTRO' OR " & _
        '"                                                   Sto_TipoAttivita = 'RIGETTO') " & _
        '"                            GROUP BY Sto_Ufficio) AS ultimaOp ON Azioni_Utente_Documento.Sto_id_Doc = '" & idDocumento & "' AND  " & _
        '"                      Azioni_Utente_Documento.Sto_Prog = ultimaOp.Sto_Prog " & _
        '"WHERE  Sto_TipoAttivita = 'RIGETTO' AND (  (Struttura_Attributi.Sta_attributo = 'UFFICIO_DIRIGENZA_DIPARTIMENTO') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_RAGIONERIA') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_CONTROLLO_AMMINISTRATIVO') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_SEGR_PRESIDENZA_LEGITTIMITA') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_SEGR_PRESIDENZA_SEGRETARIO') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_PRESIDENZA'))"
        '        sqlUltimeOperazioniUfficio = " SELECT DISTINCT Sto_Prog, Sta_attributo, Sto_TipoAttivita, Sto_id_Doc FROM         ( " & sqlUltimeOperazioniUfficioRigetto & " UNION " & sqlUltimeOperazioniUfficioInoltro & " ) as sqlSub "

        'MODIFICA 04/05/2017 CHECK FIRMA USL Elenco Monitor Delibere
        Dim sqlUltimeOperazioniUfficioInoltro As String = " SELECT  Azioni_Utente_Documento.Sto_Prog,   Struttura_Attributi.Sta_attributo, Azioni_Utente_Documento.Sto_TipoAttivita, Sto_id_Doc, Azioni_Utente_Documento.Sto_Livello " &
" FROM         Azioni_Utente_Documento INNER JOIN  Tab_Operatori_Gruppi ON Azioni_Utente_Documento.Sto_Utente = Tab_Operatori_Gruppi.TOG_Operatore  LEFT OUTER JOIN " &
"                      Struttura_Attributi ON Azioni_Utente_Documento.Sto_Ufficio = Struttura_Attributi.Sta_id RIGHT OUTER JOIN " &
"                          (SELECT     MAX(Sto_Prog) AS Sto_Prog, Sto_Ufficio " &
"                            FROM          Azioni_Utente_Documento AS Azioni_Utente_Documento_1 " &
"                            WHERE      (Sto_id_Doc = '" & idDocumento & "') AND ( Sto_TipoAttivita = 'INOLTRO' OR Sto_TipoAttivita = 'RIGETTO') " &
"                            GROUP BY Sto_Ufficio) AS ultimaOp ON Azioni_Utente_Documento.Sto_id_Doc = '" & idDocumento & "' AND  " &
"                      Azioni_Utente_Documento.Sto_Prog = ultimaOp.Sto_Prog " &
"WHERE  Sto_TipoAttivita = 'INOLTRO' AND (Tab_Operatori_Gruppi.TOG_Gruppo LIKE 'RespUf%') AND   ( (Struttura_Attributi.Sta_attributo = 'UFFICIO_DIRIGENZA_DIPARTIMENTO') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_RAGIONERIA') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_CONTROLLO_AMMINISTRATIVO')OR ((Struttura_Attributi.Sta_attributo = 'UFFICIO_SEGR_PRESIDENZA_LEGITTIMITA') AND Sto_Livello ='USL') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_SEGR_PRESIDENZA_SEGRETARIO') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_PRESIDENZA'))"

        Dim sqlUltimeOperazioniUfficioRigetto As String = " SELECT   Azioni_Utente_Documento.Sto_Prog,  Struttura_Attributi.Sta_attributo, Azioni_Utente_Documento.Sto_TipoAttivita, Sto_id_Doc, Azioni_Utente_Documento.Sto_Livello " &
" FROM         Azioni_Utente_Documento LEFT OUTER JOIN " &
"                      Struttura_Attributi ON Azioni_Utente_Documento.Sto_Ufficio = Struttura_Attributi.Sta_id RIGHT OUTER JOIN " &
"                          (SELECT     MAX(Sto_Prog) AS Sto_Prog, Sto_Ufficio " &
"                            FROM          Azioni_Utente_Documento AS Azioni_Utente_Documento_1 " &
"                            WHERE      (Sto_id_Doc = '" & idDocumento & "') AND (Sto_TipoAttivita = 'INOLTRO' OR " &
"                                                   Sto_TipoAttivita = 'RIGETTO') " &
"                            GROUP BY Sto_Ufficio) AS ultimaOp ON Azioni_Utente_Documento.Sto_id_Doc = '" & idDocumento & "' AND  " &
"                      Azioni_Utente_Documento.Sto_Prog = ultimaOp.Sto_Prog " &
"WHERE  Sto_TipoAttivita = 'RIGETTO' AND (  (Struttura_Attributi.Sta_attributo = 'UFFICIO_DIRIGENZA_DIPARTIMENTO') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_RAGIONERIA') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_CONTROLLO_AMMINISTRATIVO') OR ((Struttura_Attributi.Sta_attributo = 'UFFICIO_SEGR_PRESIDENZA_LEGITTIMITA') AND Sto_Livello ='USL') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_SEGR_PRESIDENZA_SEGRETARIO') OR (Struttura_Attributi.Sta_attributo = 'UFFICIO_PRESIDENZA'))"
        sqlUltimeOperazioniUfficio = " SELECT DISTINCT Sto_Prog, Sta_attributo, Sto_TipoAttivita, Sto_id_Doc,Sto_Livello FROM         ( " & sqlUltimeOperazioniUfficioRigetto & " UNION " & sqlUltimeOperazioniUfficioInoltro & " ) as sqlSub "



        Dim lista As IList = New ArrayList
        Dim rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, sqlUltimeOperazioniUfficio, Nothing)
        Dim lstr_ProgInotroDir As String = ""
        Dim lstr_ProgInotroDirSegrLegittimita As String = ""
        Try

            While rdr.Read
                Dim uff(2) As String
                uff(0) = rdr(1)

                uff(1) = rdr(2)
                'Aggiunto Prog
                uff(2) = rdr(0)
                If tipoDocumento = -1 Then
                    If uff(0) = "UFFICIO_DIRIGENZA_DIPARTIMENTO" And uff(1) = "INOLTRO" Then
                        lstr_ProgInotroDir = uff(2)
                    End If
                ElseIf tipoDocumento = 1 Then
                    If uff(0) = "UFFICIO_SEGR_PRESIDENZA_LEGITTIMITA" And uff(1) = "INOLTRO" Then
                        lstr_ProgInotroDirSegrLegittimita = uff(2)
                    End If
                End If
                lista.Add(uff)
            End While
            rdr.Close()
        Catch ex As Exception
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
        End Try
        For Each Item As Object In lista
            If tipoDocumento = -1 Then
                If lstr_ProgInotroDir = "" OrElse CInt(Item(2)) < CInt(lstr_ProgInotroDir) Then
                    If Item(0) <> "UFFICIO_DIRIGENZA_DIPARTIMENTO" Then
                        Item(0) = ""
                        Item(1) = ""
                    End If
                End If
            ElseIf tipoDocumento = 1 Then
                If lstr_ProgInotroDirSegrLegittimita = "" OrElse CInt(Item(2)) < CInt(lstr_ProgInotroDirSegrLegittimita) Then
                    If Item(0) <> "UFFICIO_SEGR_PRESIDENZA_LEGITTIMITA" Then
                        Item(0) = ""
                        Item(1) = ""
                    End If
                End If
            End If
        Next

        Return lista


    End Function
    Friend Function getImageWorklist(ByVal value As String) As String
        Select Case value
            Case "INOLTRO"
                Return "visto.gif' alt='Validato'  title='Validato'"
            Case "RIGETTO"
                Return "x.gif' alt='Rifiutato' title='Rifiutato'"
            Case "NO"
                Return "NO_icon32.png' alt='Non comporta operazione contabile' title='Non comporta operazione contabile'"
            Case "NOTE"
                Return "warning.gif' alt='Sono presenti delle osservazioni' title='Sono presenti delle osservazioni'"
            Case "SuggPositivo"
                Return "SuggPositivo.gif' alt='Segnalato come da inoltrare' title='Segnalato come da inoltrare'"
            Case "SuggNegativo"
                Return "SuggNegativo.gif' alt='Segnalato come da rigettare'  title='Segnalato come da rigettare'"
            Case "URGENTE"
                Return "esclamazione_red_36x42.png' alt='Urgente' title='Urgente'"
            Case Else
                Return "blank.gif'"
        End Select
    End Function
    Friend Function FO_Elenco_DocumentiUfficio(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Elenco_DocumentiUfficio"
        Dim vRitPar(3) As Object
        Dim Sqlq As String = ""
        Dim tipoDocumento As Integer
        Dim i As Integer = 0

        vRitPar(0) = 0
        vRitPar(1) = ""
        Try


            If SISTEMA.bTRACE Then
                Call SISTEMA.Registra_Trace("Inizio", SFunzione)
            End If
            If IsNumeric(vParm(Dic_FODocumentale.vc_Elenco_DocumentiUfficio.c_tipoDocumento)) Then
                tipoDocumento = vParm(Dic_FODocumentale.vc_Elenco_DocumentiUfficio.c_tipoDocumento) & ""
            Else
                tipoDocumento = -1
            End If

            Dim lstr_listaUtenti As String = ""


            If IsArray(vParm(Dic_FODocumentale.vc_Elenco_DocumentiUfficio.c_ufficio)) Then
                Dim lstr_listaTemp As String = ""
                For i = 0 To UBound(vParm(Dic_FODocumentale.vc_Elenco_DocumentiUfficio.c_ufficio), 1)
                    lstr_listaTemp = ListaUtenti_PerUfficio(vParm(Dic_FODocumentale.vc_Elenco_DocumentiUfficio.c_ufficio)(i), tipoDocumento)
                    If Not String.IsNullOrEmpty(lstr_listaTemp) Then
                        lstr_listaUtenti = lstr_listaUtenti & "," & lstr_listaTemp
                        lstr_listaTemp = ""
                    End If
                Next
            Else

                lstr_listaUtenti = ListaUtenti_PerUfficio(vParm(Dic_FODocumentale.vc_Elenco_DocumentiUfficio.c_ufficio), tipoDocumento)
            End If
            If lstr_listaUtenti.StartsWith(",") Then
                lstr_listaUtenti = lstr_listaUtenti.Substring(1)
            End If


            Sqlq = " SELECT * from (" &
                      " select Documento.Doc_Id , isnull(Doc_numero,Doc_numeroProvvisorio) as Doc_numero ,doc_data  , " &
                      "         dbo.fn_ReplaceCaratteriSpeciali(isnull(Doc_Oggetto,'')) as Doc_Oggetto ,  isnull(Tab_Operatori.Op_Cognome,'') + ' ' + isnull(Tab_Operatori.Op_Nome,'') as desc_op  ,   Doc_Cod_Uff_Prop , doc_dataRicezione, isnull(Doc_isContabile,0) as Doc_isContabile " &
                      " FROM Documento inner join  Stato_Istanza_Documento on Documento.[Doc_Id] = Stato_Istanza_Documento.[Doc_Id] and Stato_Istanza_Documento.[Ruolo] <> 'A' " &
                        " Left join Tab_Operatori on Tab_Operatori.Op_Codice_operatore = Stato_Istanza_Documento.operatore " &
                        " where  Stato_Istanza_Documento.operatore in (" & lstr_listaUtenti & " ) and  Documento.Doc_Tipo=" & tipoDocumento & " )a " &
                        " inner join struttura on struttura.Str_id = a.Doc_Cod_Uff_Prop "

            Dim lstrOrderBy As String = "" & oOperatore.Attributo("ORDER_ELENCO_DOCUMENTIUFFICIO")

            If lstrOrderBy = "" Then
                Sqlq = Sqlq & " ORDER BY  CAST(RIGHT(Doc_numero, 5) as int) ASC, Doc_data DESC, LEFT(Doc_numero, 4) ASC"
            Else
                Sqlq = Sqlq & " ORDER BY " & lstrOrderBy
            End If

            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
            Dim rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)


            Dim contaRighe As Integer = 0
            Dim arr(10, contaRighe) As Object
            Try

                While (rdr.Read())
                    ReDim Preserve arr(10, contaRighe)

                    For col As Integer = 0 To 7
                        arr(col, contaRighe) = rdr(col)
                    Next

                    arr(8, contaRighe) = ""
                    arr(9, contaRighe) = ""
                    arr(10, contaRighe) = ""
                    contaRighe = contaRighe + 1

                End While

                rdr.Close()
                rdr = Nothing
            Catch ex As Exception
                contaRighe = 0
                rdr = Nothing
                vRitPar(0) = 9999
                vRitPar(1) = ex.Message
            End Try

            vRitPar(0) = IIf(contaRighe > 0, 0, 1)
            vRitPar(1) = IIf(contaRighe > 0, arr, "Non sono stati trovati documenti che rispondono ai criteri di ricerca impostati")

        Catch ex As Exception
            vRitPar(0) = 9999
            vRitPar(1) = ex.Message
        End Try

        If vRitPar(0) <> 0 Then
            GoTo FineSub
        End If

        Dim vRisultati(9, UBound(vRitPar(1), 2)) As String
        Dim str As String = ""
        For i = 0 To UBound(vRitPar(1), 2)
            vRisultati(0, i) = vRitPar(1)(0, i) & ""
            vRisultati(1, i) = vRitPar(1)(1, i) & ""
            vRisultati(2, i) = vRitPar(1)(2, i) & ""
            vRisultati(3, i) = vRitPar(1)(3, i) & ""

            str = vRisultati(3, i)
            'comm per eliminazione xml
            'str = str.Replace("&amp;", Chr(38))
            'str = str.Replace("&aps;", Chr(39))
            'str = str.Replace("&gt;", Chr(62))
            'str = str.Replace("&lt;", Chr(60))
            'str = str.Replace("&quot;", Chr(34))
            vRisultati(3, i) = str
            vRisultati(4, i) = vRitPar(1)(4, i)   'utente descrizione
            vRisultati(5, i) = vRitPar(1)(5, i) & ""
            'LU Aggiunto per il link Alle stampe archivio
            vRisultati(6, i) = "" & vRitPar(1)(0, i)
            'mod
            vRisultati(7, i) = "" & vRitPar(1)(8, i)
            vRisultati(8, i) = "" & vRitPar(1)(9, i)
            vRisultati(9, i) = "" & vRitPar(1)(10, i)
        Next
        vRitPar(1) = vRisultati

FineSub:
        FO_Elenco_DocumentiUfficio = vRitPar

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If

        Exit Function

    End Function
    Friend Function FO_Elenco_Documenti(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Elenco_Documenti"
        Dim vRitPar(3) As Object
        Dim Sqlq As String = ""
        Dim sWhere As String = ""
        Dim tipoData As Integer = 1
        Dim data_inizio As String = ""
        Dim data_fine As String = ""
        Dim oggetto As String = ""
        Dim cod_ufficio As String = ""
        Dim cod_dip As String = ""
        Dim num_doc As String = ""
        Dim idDocumentoLocale As String = ""
        Dim descr_ufficio As String = ""
        Dim visualizzaLaTipRigetto As String = ""
        Dim visualizzaFlagStatoStampato As String = ""
        Dim suggerimento As Integer = -1
        Dim tipologiaRicercaBeneficiario As String = ""
        Dim beneficiario As String = ""
        Dim tipologiaRicercaDestinatario As String = ""
        Dim destinatario As String = ""
        Dim visualizzaAnnullati As Boolean = False
        Dim codiceCUP As String = ""
        Dim codiceCIG As String = ""
        Dim idTipologiaDocumentoTrasp As Integer = -1
        Dim autorizzazionePubblicazione As String = ""
        Dim visualizzaUrgenti As Boolean = False
        Dim visualizzaNonTrasp As Boolean = False
        Dim tipoDocumento As Integer
        Dim i As Integer
        Dim strConn As String
        Dim rdr As SqlClient.SqlDataReader

        Dim ufficio_competenza As String = ""
        Dim utente_competenza As String = ""


        vRitPar(0) = 0
        vRitPar(1) = ""
        Try


            If SISTEMA.bTRACE Then
                Call SISTEMA.Registra_Trace("Inizio", SFunzione)
            End If

            If IsNumeric(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_tipoDocumento)) Then
                tipoDocumento = vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_tipoDocumento) & ""
            Else
                tipoDocumento = -1
            End If

            If IsDate(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_data_inizio)) Then
                data_inizio = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_data_inizio) & "")
            End If
            If IsDate(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_data_fine)) Then
                data_fine = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_data_fine) & "")
            End If
            oggetto = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_oggetto) & "")
            cod_ufficio = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_cod_ufficio) & "")
            cod_dip = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_cod_dip) & "")
            num_doc = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_numero_doc) & "")
            visualizzaLaTipRigetto = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_tipo_Rigetto) & "")
            ufficio_competenza = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_ufficio_competenza) & "")
            utente_competenza = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_utente_competenza) & "")
            idDocumentoLocale = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_idDocumento) & "")
            tipologiaRicercaBeneficiario = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_tipologia_ricerca_beneficiario) & "")
            beneficiario = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_beneficiario) & "")
            codiceCUP = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_codiceCUP) & "")
            codiceCIG = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_codiceCIG) & "")
            visualizzaUrgenti = vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_visualizzaUrgenti)
            visualizzaNonTrasp = vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_visualizzaNonTrasp)
            visualizzaFlagStatoStampato = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_FlagStampato) & "")
            idTipologiaDocumentoTrasp = vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_id_tipologia_documento)
            autorizzazionePubblicazione = vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_autorizzazione_pubblicazione)
            tipologiaRicercaDestinatario = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_tipologia_ricerca_destinatario) & "")
            destinatario = Trim(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_destinatario) & "")
            visualizzaAnnullati = vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_visualizzaAnnullati)
            tipoData = vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_tipo_data & "")
            Dim lstr_listaUtenti As String = ""


            lstr_listaUtenti = "'" & vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_utente) & "'"

            Dim tipologia As String = ""

            'modifica per visualizzare anche il numero cronologico, lì dove presente.
            'Sqlq = " SELECT a.Doc_Id, isnull(a.Doc_numero,'')+'', a.doc_data,a.Doc_Oggetto, a.Doc_isContabile,a.Livello_Ufficio, a.osservazioniLivello  from (" & _
            '          " select Documento.Doc_Id , isnull(Doc_numero,Doc_numeroProvvisorio) as Doc_numero ,doc_data  , " & _
            '          "         dbo.fn_ReplaceCaratteriSpeciali(isnull(Doc_Oggetto,'')) as Doc_Oggetto , Doc_id_WFE ,'' as doc_tipoScadenza,   Doc_Cod_Uff_Prop , doc_dataRicezione, isnull(Doc_isContabile,0) as Doc_isContabile ,isnull(Doc_FlagStampato,0) as  Doc_FlagStampato " & _
            '          " , Stato_Istanza_Documento.[Livello_Ufficio] as Livello_Ufficio,isnull(Dno_testo,'') as osservazioniLivello " & _
            '          " FROM Documento inner join  Stato_Istanza_Documento on Documento.[Doc_Id] = Stato_Istanza_Documento.[Doc_Id] and Stato_Istanza_Documento.[Ruolo] <> 'A' " & _
            '          " left join Documento_noteosservazioni on Stato_Istanza_Documento.[Doc_Id]=Documento_noteosservazioni.[Dno_id_documento] and Stato_Istanza_Documento.[Livello_Ufficio]=Documento_noteosservazioni.[Dno_tipo]" & _
            '          " where  Stato_Istanza_Documento.operatore in (" & lstr_listaUtenti & " ) and Documento.Doc_Tipo= " & tipoDocumento & " )a " & _
            '               " inner join struttura on struttura.Str_id = a.Doc_Cod_Uff_Prop "



            If visualizzaAnnullati Then
                Sqlq = " SELECT a.Doc_Id, case when isnull(a.Doc_NumDefinitivo ,'') = '' then isnull(a.Doc_numero,'')+'' else isnull(a.Doc_NumDefinitivo,'')+' - '+isnull(a.Doc_numero,'')+'' end, a.doc_data, a.Data_Seduta, a.Doc_Oggetto, a.Doc_isContabile,a.Livello_Ufficio, a.osservazioniLivello, a.Doc_TipoOpCont  from (" &
                      " select Documento.Doc_Id , " &
                      " case when Stato_Istanza_Documento.Ruolo = 'A' " &
                      " then '<ANN>'+Doc_numero else Doc_numero end as Doc_numero " &
                      " , doc_data, Documento_Dati_Seduta.Dds_DataSeduta as Data_Seduta, dbo.fn_ReplaceCaratteriSpeciali(isnull(Doc_Oggetto,'')) as Doc_Oggetto , Doc_id_WFE ,'' as doc_tipoScadenza,   Doc_Cod_Uff_Prop , doc_dataRicezione, isnull(Doc_isContabile,0) as Doc_isContabile ,isnull(Doc_FlagStampato,0) as  Doc_FlagStampato " &
                      " , Stato_Istanza_Documento.[Livello_Ufficio] as Livello_Ufficio,isnull(Dno_testo,'') as osservazioniLivello, Doc_NumDefinitivo as Doc_NumDefinitivo, Doc_TipoOpCont " &
                      " FROM Documento inner join  Stato_Istanza_Documento on Documento.[Doc_Id] = Stato_Istanza_Documento.[Doc_Id]  " &
                      " left join Documento_noteosservazioni on Stato_Istanza_Documento.[Doc_Id]=Documento_noteosservazioni.[Dno_id_documento] and Stato_Istanza_Documento.[Livello_Ufficio]=Documento_noteosservazioni.[Dno_tipo]" &
              " left join Documento_Dati_Seduta on Documento_Dati_Seduta.[Dds_doc_id] =  Documento.[Doc_Id]" &
                      " where (Stato_Istanza_Documento.operatore in (" & lstr_listaUtenti & ") or Stato_Istanza_Documento.Ruolo = 'A') and Documento.Doc_Tipo= " & tipoDocumento & " and Doc_numero <> '' )a " &
                      " inner join struttura on struttura.Str_id = a.Doc_Cod_Uff_Prop "
            Else
                Sqlq = " SELECT a.Doc_Id, case when isnull(a.Doc_NumDefinitivo ,'') = '' then isnull(a.Doc_numero,'')+'' else isnull(a.Doc_NumDefinitivo,'')+' - '+isnull(a.Doc_numero,'')+'' end, a.doc_data, a.Data_Seduta, a.Doc_Oggetto, a.Doc_isContabile,a.Livello_Ufficio, a.osservazioniLivello, a.Doc_TipoOpCont  from (" &
                      " select Documento.Doc_Id , isnull(Doc_numero,Doc_numeroProvvisorio) as Doc_numero, doc_data, Documento_Dati_Seduta.Dds_DataSeduta as Data_Seduta, " &
                      "         dbo.fn_ReplaceCaratteriSpeciali(isnull(Doc_Oggetto,'')) as Doc_Oggetto , Doc_id_WFE ,'' as doc_tipoScadenza,   Doc_Cod_Uff_Prop , doc_dataRicezione, isnull(Doc_isContabile,0) as Doc_isContabile ,isnull(Doc_FlagStampato,0) as  Doc_FlagStampato " &
                      " , Stato_Istanza_Documento.[Livello_Ufficio] as Livello_Ufficio,isnull(Dno_testo,'') as osservazioniLivello, Doc_NumDefinitivo as Doc_NumDefinitivo, Doc_TipoOpCont " &
                      " FROM Documento inner join  Stato_Istanza_Documento on Documento.[Doc_Id] = Stato_Istanza_Documento.[Doc_Id] and Stato_Istanza_Documento.[Ruolo] <> 'A' " &
                      " left join Documento_noteosservazioni on Stato_Istanza_Documento.[Doc_Id]=Documento_noteosservazioni.[Dno_id_documento] and Stato_Istanza_Documento.[Livello_Ufficio]=Documento_noteosservazioni.[Dno_tipo]" &
              " left join Documento_Dati_Seduta on Documento_Dati_Seduta.[Dds_doc_id] =  Documento.[Doc_Id]" &
                      " where Stato_Istanza_Documento.operatore in (" & lstr_listaUtenti & " ) and Documento.Doc_Tipo= " & tipoDocumento & " )a " &
                      " inner join struttura on struttura.Str_id = a.Doc_Cod_Uff_Prop "
            End If

            'Sqlq = " SELECT a.Doc_Id, case when isnull(a.Doc_NumDefinitivo ,'') = '' then isnull(a.Doc_numero,'')+'' else isnull(a.Doc_NumDefinitivo,'')+' - '+isnull(a.Doc_numero,'')+'' end, a.doc_data,a.Doc_Oggetto, a.Doc_isContabile,a.Livello_Ufficio, a.osservazioniLivello, a.Doc_TipoOpCont  from (" & _
            '          " select Documento.Doc_Id , isnull(Doc_numero,Doc_numeroProvvisorio) as Doc_numero ,doc_data  , " & _
            '          "         dbo.fn_ReplaceCaratteriSpeciali(isnull(Doc_Oggetto,'')) as Doc_Oggetto , Doc_id_WFE ,'' as doc_tipoScadenza,   Doc_Cod_Uff_Prop , doc_dataRicezione, isnull(Doc_isContabile,0) as Doc_isContabile ,isnull(Doc_FlagStampato,0) as  Doc_FlagStampato " & _
            '          " , Stato_Istanza_Documento.[Livello_Ufficio] as Livello_Ufficio,isnull(Dno_testo,'') as osservazioniLivello, Doc_NumDefinitivo as Doc_NumDefinitivo, Doc_TipoOpCont " & _
            '          " FROM Documento inner join  Stato_Istanza_Documento on Documento.[Doc_Id] = Stato_Istanza_Documento.[Doc_Id] and Stato_Istanza_Documento.[Ruolo] <> 'A' " & _
            '          " left join Documento_noteosservazioni on Stato_Istanza_Documento.[Doc_Id]=Documento_noteosservazioni.[Dno_id_documento] and Stato_Istanza_Documento.[Livello_Ufficio]=Documento_noteosservazioni.[Dno_tipo]" & _
            '          " where Stato_Istanza_Documento.operatore in (" & lstr_listaUtenti & " ) and Documento.Doc_Tipo= " & tipoDocumento & " )a " & _
            '          " inner join struttura on struttura.Str_id = a.Doc_Cod_Uff_Prop "



            'If Not String.IsNullOrEmpty(ufficio_competenza) Then
            '    Sqlq = Sqlq & " join Documento_Uff_Competenza on a.Doc_Id=Documento_Uff_Competenza.duc_idDocumento and duc_ufficiCompetenza='" & ufficio_competenza & "' "
            'End If

            'If Not String.IsNullOrEmpty(utente_competenza) Then
            '    Sqlq = Sqlq & " join Documento_Utenti_Competenza on a.Doc_Id=Documento_Utenti_Competenza.duc_idDocumento and duc_accountUtentiCompetenza='" & utente_competenza & "' "
            'End If

            If visualizzaUrgenti = True Then
                Sqlq = Sqlq & " inner join dbo.Documento_Attributo on Documento_Attributo.Doc_Id = a.Doc_Id "
            End If

            'se l'ufficio di competenze è null allora sono nel menu Det/disp di competenza
            ' e quindi filtro per quello che l'utente è abilitato a vedere
            If String.IsNullOrEmpty(ufficio_competenza) Then
                If Not vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_ufficio_creazione) Is Nothing AndAlso DirectCast(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_ufficio_creazione), Array).Length <> 0 Then
                    Dim ufficio As New DllAmbiente.Ufficio
                    tipologia = ufficio.leggiTipologiaUfficio(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_ufficio_creazione)(0))
                    'effettuo controllo su cosa posso vedere
                    Dim stringaWhere As String = ""


                    Dim e As Integer
                    For e = 0 To UBound(DirectCast(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_ufficio_creazione), Array)) - 1
                        stringaWhere = stringaWhere & DirectCast(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_ufficio_creazione), Array)(e) & "' , '"
                    Next
                    stringaWhere = stringaWhere & DirectCast(vParm(Dic_FODocumentale.vc_Elenco_Documenti.c_ufficio_creazione), Array)(e)

                    If UCase(tipologia) = "DIP" Then
                        If cod_dip <> "" And stringaWhere.IndexOf(cod_dip) >= 0 Then
                            stringaWhere = cod_dip
                        End If

                        sWhere = sWhere & " WHERE  (struttura.Str_padre in  ('" & stringaWhere & "')) "

                        If cod_ufficio <> "" Then
                            sWhere = " AND ( Doc_Cod_Uff_Prop = '" & cod_ufficio & "') "
                        End If


                    ElseIf UCase(tipologia) = "UFF" Then
                        If cod_ufficio <> "" And stringaWhere.IndexOf(cod_ufficio) >= 0 Then
                            stringaWhere = cod_ufficio
                        End If

                        sWhere = sWhere & " WHERE (Doc_Cod_Uff_Prop in ('" & stringaWhere & "')) "
                    ElseIf UCase(tipologia) = "ENTE" Then
                        If cod_ufficio <> "" And stringaWhere.IndexOf(cod_ufficio) >= 0 Then
                            stringaWhere = cod_ufficio
                        End If
                        sWhere = sWhere & " WHERE   (Struttura.Str_radice in ('" & stringaWhere & "')) "

                        If cod_ufficio <> "" Then
                            sWhere = " AND ( Doc_Cod_Uff_Prop = '" & cod_ufficio & "') "
                        End If

                    End If

                Else

                    If cod_dip <> "" Then
                        sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & "  ( Struttura.Str_padre = '" & cod_dip & "' ) "
                    End If

                    If cod_ufficio <> "" And cod_ufficio <> "ARCHIVIO" Then
                        sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & "  ( Struttura.Str_id = '" & cod_ufficio & "' ) "
                    End If


                    If descr_ufficio <> "" Then
                        sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & "  ( Struttura.Str_descrizione like '%" & descr_ufficio & "%' ) "
                    End If
                End If
            End If

            Dim queryoggetto As String = SplitStringOggettoDoc_Oggetto(oggetto)
            If queryoggetto <> "" Then
                sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & " ( " & queryoggetto & " ) "
            End If

            If num_doc <> "" Then
                sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & "  (CAST(RIGHT(Doc_numero, 5) AS int)  = '" & Trim(num_doc) & "'  ) "
            End If

            If tipoData <> 2 Then
                If data_inizio <> "" Then
                    sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & " ( Doc_Data >= CONVERT(DATETIME, '" & Format(CDate(data_inizio), "MM/dd/yyyy") & " 00:00:00',102) ) "
                End If
                If data_fine <> "" Then
                    sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & "  ( Doc_Data <= CONVERT(DATETIME, '" & Format(CDate(data_fine), "MM/dd/yyyy") & " 23:59:59',102) ) "
                End If

            Else
                If data_inizio <> "" Then
                    sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & " ( Data_Seduta >= CONVERT(DATETIME, '" & Format(CDate(data_inizio), "MM/dd/yyyy") & " 00:00:00',102) ) "
                End If
                If data_fine <> "" Then
                    sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & "  ( Data_Seduta <= CONVERT(DATETIME, '" & Format(CDate(data_fine), "MM/dd/yyyy") & " 23:59:59',102) ) "
                End If
            End If

            If idDocumentoLocale <> "" Then
                sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & "  ( Doc_Id = '" & idDocumentoLocale & "' ) "
            End If

            If visualizzaFlagStatoStampato <> "" Then
                sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & "  ( Doc_FlagStampato = " & visualizzaFlagStatoStampato & " ) "
            End If

            If Not String.IsNullOrEmpty(beneficiario) Then

                sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") &
                    "  ( a.Doc_Id IN (SELECT Id_Documento FROM Documento_Liquidazione_Beneficiario ben WHERE "

                If (tipologiaRicercaBeneficiario = "DenominazioneBeneficiario") Then
                    sWhere = sWhere & "ben.Denominazione like '%" & Trim(beneficiario) & "%'"
                ElseIf (tipologiaRicercaBeneficiario = "CFBeneficiario") Then
                    sWhere = sWhere & "ben.CodiceFiscale = '" & Trim(beneficiario) & "'"
                ElseIf (tipologiaRicercaBeneficiario = "PIVABeneficiario") Then
                    sWhere = sWhere & "ben.Partita_Iva = '" & Trim(beneficiario) & "'"
                ElseIf (tipologiaRicercaBeneficiario = "CodiceSICBeneficiario") Then
                    sWhere = sWhere & "ben.ID_anagrafica = '" & Trim(beneficiario) & "'"
                End If

                sWhere = sWhere & ")) "
            End If

            If Not String.IsNullOrEmpty(destinatario) Then
                sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") &
                    "  ( a.Doc_Id IN (SELECT IdDocumento FROM Documento_Destinatari dest WHERE "

                If (tipologiaRicercaDestinatario = "DenominazioneDestinatario") Then
                    sWhere = sWhere & "dest.Denominazione like '%" & Trim(destinatario) & "%'"
                ElseIf (tipologiaRicercaDestinatario = "CFDestinatario") Then
                    sWhere = sWhere & "dest.CodiceFiscale = '" & Trim(destinatario) & "'"
                ElseIf (tipologiaRicercaDestinatario = "PIVADestinatario") Then
                    sWhere = sWhere & "dest.PartitaIva = '" & Trim(destinatario) & "'"
                ElseIf (tipologiaRicercaDestinatario = "CodiceSICDestinatario") Then
                    sWhere = sWhere & "dest.IdSIC = '" & Trim(destinatario) & "'"
                End If

                sWhere = sWhere & ")) "
            End If

            If Not String.IsNullOrEmpty(codiceCUP) Or Not String.IsNullOrEmpty(codiceCIG) Then
                If Not String.IsNullOrEmpty(codiceCUP) Then
                    sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") &
                    " ( a.Doc_Id IN ( SELECT Doc_Id FROM Documento_Attributo docAttribs WHERE "
                    sWhere = sWhere & "docAttribs.Valore = '" & Trim(codiceCUP) & "' AND docAttribs.Cod_Attributo = 'CUP'"
                    sWhere = sWhere & ")) "
                End If

                If Not String.IsNullOrEmpty(codiceCIG) Then
                    sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") &
                    " ( a.Doc_Id IN ( SELECT Doc_Id FROM Documento_Attributo docAttribs WHERE "
                    sWhere = sWhere & "docAttribs.Valore = '" & Trim(codiceCIG) & "' AND docAttribs.Cod_Attributo = 'CIG'"
                    sWhere = sWhere & ")) "
                End If
            End If

            If visualizzaUrgenti = True Then
                sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & "  (Cod_Attributo = 'URGENTE' AND Valore = 'TRUE' ) "
            End If



            If visualizzaNonTrasp = True Then
                sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") &
                    "  ( (a.Doc_IsContabile = 1 AND CHARINDEX('1',SUBSTRING(a.Doc_TipoOpCont ,0, 6)) <> 0) AND a.Doc_Id NOT IN ( SELECT   Trasparenza.id_documento " &
                  " FROM          Stato_Istanza_Documento INNER JOIN " &
                  " Documento on Stato_Istanza_Documento.Doc_Id =Documento.Doc_Id " &
                  " INNER JOIN Trasparenza on Documento.Doc_Id  = Trasparenza.id_documento " &
                  " WHERE      (Stato_Istanza_Documento.Ruolo <> 'D') AND (Stato_Istanza_Documento.Ruolo <> 'A') " &
                  " AND Stato_Istanza_Documento.Operatore  in (" & lstr_listaUtenti & " ) " &
                  " AND Stato_Istanza_Documento.Livello_Ufficio = 'UP' " &
                  " AND doc_tipo= " & tipoDocumento & " " &
                  " AND ( ( autorizzazione_pubblicazione = 'true' " &
                  "         AND ufficio_responsabile_procedimento is not null AND ufficio_responsabile_procedimento <> '' " &
                  "         AND funzionario_responsabile_procedimento is not null AND funzionario_responsabile_procedimento <> '' " &
                  "         AND modalita_individuazione_beneficiario is not null AND modalita_individuazione_beneficiario <> '' " &
                  "         AND norma_attribuzione_beneficio is not null AND norma_attribuzione_beneficio <> '' " &
                  "        ) OR (autorizzazione_pubblicazione = 'false' AND  note_pubblicazione is not null AND note_pubblicazione <> ''))" &
                  " )) "
            End If





            If idTipologiaDocumentoTrasp > 0 Then
                Dim sqlTipologia As String = "( a.Doc_Id IN (SELECT id_documento FROM Documento_Tipologia doc_tipologia WHERE "
                If idTipologiaDocumentoTrasp > -1 Then
                    sqlTipologia = sqlTipologia & IIf(Trim(sqlTipologia).EndsWith("WHERE"), " ", " AND ") &
                        " doc_tipologia.id_tipologia_provvedimento = '" & idTipologiaDocumentoTrasp & "'"
                End If
                sqlTipologia = sqlTipologia & ")) "
                sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & sqlTipologia
            End If

            If autorizzazionePubblicazione = "True" Or autorizzazionePubblicazione = "False" Then
                Dim sqlTrasp As String = "( a.Doc_Id IN (SELECT id_documento FROM Trasparenza doc_trasp WHERE "
                sqlTrasp = sqlTrasp & IIf(Trim(sqlTrasp).EndsWith("WHERE"), " ", " AND ") &
                    " doc_trasp.autorizzazione_pubblicazione = '" & autorizzazionePubblicazione & "'"
                sqlTrasp = sqlTrasp & ")) "
                sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & sqlTrasp
            ElseIf autorizzazionePubblicazione = "NonSpecificato" Then
                Dim sqlTrasp As String = "( a.Doc_Id NOT IN (SELECT id_documento FROM Trasparenza doc_trasp  "
                sqlTrasp = sqlTrasp & ")) "
                sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") & sqlTrasp
            End If



            If Not String.IsNullOrEmpty(ufficio_competenza) AndAlso Not String.IsNullOrEmpty(utente_competenza) Then
                sWhere = sWhere & IIf(Trim(sWhere).EndsWith("WHERE"), " ", " AND ") &
                    "  ( a.Doc_Id IN ( SELECT   Documento_Uff_Competenza.duc_idDocumento " &
                  " FROM          Documento_Uff_Competenza   " &
                  " WHERE   Documento_Uff_Competenza.duc_idDocumento= a.Doc_Id and Documento_Uff_Competenza.duc_ufficiCompetenza = '" & ufficio_competenza & "' ) " &
                  " OR a.Doc_Id IN ( SELECT   Documento_Utenti_Competenza.duc_idDocumento " &
                  "  FROM          Documento_Utenti_Competenza   " &
                  " WHERE   Documento_Utenti_Competenza.duc_idDocumento= a.Doc_Id and Documento_Utenti_Competenza.duc_accountUtentiCompetenza = '" & utente_competenza & "' ) " &
                  " ) "
            End If


            If sWhere.StartsWith(" AND") Then
                sWhere = " WHERE " & sWhere.Substring(4)
            End If





            If Not Trim(sWhere).EndsWith("WHERE") Then
                Sqlq = Sqlq & sWhere
            End If




            Dim lstrOrderBy As String = "" & oOperatore.Attributo("ORDER_ELENCO_DOCUMENTIUFFICIO")

            If lstrOrderBy = "" Then
                Sqlq = Sqlq & " ORDER BY  CAST(RIGHT(Doc_numero, 5) as int) ASC, Doc_data DESC, LEFT(Doc_numero, 4) ASC"
            Else
                Sqlq = Sqlq & " ORDER BY " & lstrOrderBy
            End If




            strConn = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)

            Dim flagEliminaUltimo As Boolean = False

            Dim contaRighe As Integer = 0
            Dim arr(10, contaRighe) As Object
            Try

                While (rdr.Read())




                    flagEliminaUltimo = False

                    ReDim Preserve arr(10, contaRighe)


                    'For col As Integer = 0 To 4
                    '    arr(col, contaRighe) = rdr(col)
                    'Next
                    'arr(0, contaRighe) = rdr(0) 'id
                    'arr(1, contaRighe) = rdr(1) 'numero
                    'arr(2, contaRighe) = rdr(2) 'data
                    'arr(3, contaRighe) = rdr(3) 'oggetto
                    'arr(4, contaRighe) = rdr(4) 'iscontabile

                    arr(0, contaRighe) = rdr(0) 'id
                    arr(1, contaRighe) = "./risorse/immagini/blank.gif" 'urgente
                    arr(2, contaRighe) = rdr(1) 'numero
                    arr(3, contaRighe) = rdr(2) 'data
                    arr(4, contaRighe) = rdr(3) 'Data seduta
                    arr(5, contaRighe) = rdr(4) 'oggetto
                    arr(6, contaRighe) = rdr(5) 'iscontabile


                    Dim livelloCorrente As String = "" & rdr(6)
                    Dim notelivelloCorrente As String = "" & rdr(7)

                    arr(7, contaRighe) = "./risorse/immagini/blank.gif"
                    arr(8, contaRighe) = "./risorse/immagini/blank.gif"
                    arr(9, contaRighe) = "./risorse/immagini/blank.gif"
                    arr(10, contaRighe) = "./risorse/immagini/blank.gif"


                    Dim docAttributo As New DllDocumentale.Documento_attributo
                    docAttributo.Doc_id = rdr(0)
                    docAttributo.Cod_attributo = "URGENTE"
                    docAttributo.Ente = ConfigurationManager.AppSettings("NOME_ENTE_INSTALLAZIONE")
                    Dim listaDocAttributo As Generic.List(Of Documento_attributo) = FO_Get_Documento_Attributi(docAttributo)
                    For Each item As Documento_attributo In listaDocAttributo
                        If item.Valore = True Then
                            arr(1, contaRighe) = "'./risorse/immagini/" & getImageWorklist("URGENTE")
                        End If

                    Next



                    Dim listaInoltriRigettiUffici As IList = UltimeOperazioniInoltroRigetto(arr(0, contaRighe), tipoDocumento)
                    For Each Item As Object In listaInoltriRigettiUffici
                        If tipoDocumento <> 1 Then
                            Select Case CStr(Item(0))
                                Case "UFFICIO_DIRIGENZA_DIPARTIMENTO"
                                    arr(7, contaRighe) = "'./risorse/immagini/" & getImageWorklist(Item(1))
                                Case "UFFICIO_CONTROLLO_AMMINISTRATIVO"
                                    arr(8, contaRighe) = "'./risorse/immagini/" & getImageWorklist(Item(1))
                                Case "UFFICIO_RAGIONERIA"
                                    arr(9, contaRighe) = "'./risorse/immagini/" & getImageWorklist(Item(1))
                            End Select
                        ElseIf tipoDocumento = 1 Then
                            Select Case CStr(Item(0))
                                Case "UFFICIO_SEGR_PRESIDENZA_LEGITTIMITA"
                                    arr(7, contaRighe) = "'./risorse/immagini/" & getImageWorklist(Item(1))
                                Case "UFFICIO_RAGIONERIA"
                                    arr(8, contaRighe) = "'./risorse/immagini/" & getImageWorklist(Item(1))
                                Case "UFFICIO_SEGR_PRESIDENZA_SEGRETARIO"
                                    arr(9, contaRighe) = "'./risorse/immagini/" & getImageWorklist(Item(1))
                                Case "UFFICIO_PRESIDENZA"
                                    arr(10, contaRighe) = "'./risorse/immagini/" & getImageWorklist(Item(1))
                            End Select
                        End If
                    Next
                    If arr(6, contaRighe) = 0 Then
                        'se il documento non è contabile scrivo NO
                        If tipoDocumento = 1 Then
                            arr(8, contaRighe) = "'./risorse/immagini/" & getImageWorklist("NO")
                        Else
                            arr(9, contaRighe) = "'./risorse/immagini/" & getImageWorklist("NO")
                        End If

                    End If
                    Dim ultimoContaRigheValido As Integer = contaRighe
                    If tipoDocumento = 1 Then
                        Select Case visualizzaLaTipRigetto
                            Case ""
                                contaRighe += 1
                            Case "USL"
                                If arr(7, contaRighe).Contains(getImageWorklist("RIGETTO")) Then
                                    contaRighe += 1
                                Else
                                    flagEliminaUltimo = True
                                End If
                            Case "UR"
                                If arr(8, contaRighe).Contains(getImageWorklist("RIGETTO")) Then
                                    contaRighe += 1
                                Else
                                    flagEliminaUltimo = True
                                End If
                            Case "USS"
                                If arr(9, contaRighe).Contains(getImageWorklist("RIGETTO")) Then
                                    contaRighe += 1
                                Else
                                    flagEliminaUltimo = True
                                End If
                            Case "UPRES"
                                If arr(10, contaRighe).Contains(getImageWorklist("RIGETTO")) Then
                                    contaRighe += 1
                                Else
                                    flagEliminaUltimo = True
                                End If
                        End Select
                    Else
                        Select Case visualizzaLaTipRigetto
                            Case ""
                                contaRighe += 1
                            Case "UDD"
                                If arr(7, contaRighe).Contains(getImageWorklist("RIGETTO")) Then
                                    contaRighe += 1
                                Else
                                    flagEliminaUltimo = True
                                End If
                            Case "UCA"
                                If arr(8, contaRighe).Contains(getImageWorklist("RIGETTO")) Then
                                    contaRighe += 1
                                Else
                                    flagEliminaUltimo = True
                                End If
                            Case "UR"
                                If arr(9, contaRighe).Contains(getImageWorklist("RIGETTO")) Then
                                    contaRighe += 1
                                Else
                                    flagEliminaUltimo = True
                                End If
                        End Select
                    End If


                    If "" & ConfigurationManager.AppSettings("NOTE_" & livelloCorrente) = "1" Then
                        If tipoDocumento = 1 Then
                            Select Case livelloCorrente
                                Case "USL"
                                    If Not String.IsNullOrEmpty(notelivelloCorrente) Then
                                        arr(7, ultimoContaRigheValido) = "'./risorse/immagini/" & getImageWorklist("NOTE")
                                    End If
                                Case "UR"
                                    If Not String.IsNullOrEmpty(notelivelloCorrente) Then
                                        arr(8, ultimoContaRigheValido) = "'./risorse/immagini/" & getImageWorklist("NOTE")
                                    End If

                                Case "USS"
                                    If Not String.IsNullOrEmpty(notelivelloCorrente) Then
                                        arr(9, ultimoContaRigheValido) = "'./risorse/immagini/" & getImageWorklist("NOTE")
                                    End If
                                Case "UPRES"
                                    If Not String.IsNullOrEmpty(notelivelloCorrente) Then
                                        arr(10, ultimoContaRigheValido) = "'./risorse/immagini/" & getImageWorklist("NOTE")
                                    End If
                            End Select
                        Else
                            Select Case livelloCorrente
                                Case "UDD"
                                    If Not String.IsNullOrEmpty(notelivelloCorrente) Then
                                        arr(7, ultimoContaRigheValido) = "'./risorse/immagini/" & getImageWorklist("NOTE")
                                    End If
                                Case "UCA"
                                    If Not String.IsNullOrEmpty(notelivelloCorrente) Then
                                        arr(8, ultimoContaRigheValido) = "'./risorse/immagini/" & getImageWorklist("NOTE")
                                    End If

                                Case "UR"
                                    If Not String.IsNullOrEmpty(notelivelloCorrente) Then
                                        arr(9, ultimoContaRigheValido) = "'./risorse/immagini/" & getImageWorklist("NOTE")
                                    End If
                            End Select
                        End If

                    End If
                    If oOperatore.oUfficio.Test_Attributo("ATTIVA_SUGGERIMENTO", True) Then
                        Dim obj As New ItemSuggerimento
                        Dim listaSugg As New Generic.List(Of ItemSuggerimento)
                        obj.Doc_Id = arr(0, ultimoContaRigheValido)
                        listaSugg = FO_Get_Suggerimenti_Documento(obj)
                        If listaSugg.Count > 0 Then
                            If tipoDocumento = 1 Then
                                Select Case livelloCorrente
                                    'imposto l'ultimo suggerimento inserimento
                                    Case "USL"
                                        For Each sugg As ItemSuggerimento In listaSugg
                                            arr(7, ultimoContaRigheValido) = "'./risorse/immagini/" & getImageWorklist(Get_Suggerimento(listaSugg.Item(listaSugg.Count - 1).Id_Suggerimento).DescrizioneBreve)
                                        Next
                                    Case "UR"
                                        For Each sugg As ItemSuggerimento In listaSugg
                                            arr(8, ultimoContaRigheValido) = "'./risorse/immagini/" & getImageWorklist(Get_Suggerimento(listaSugg.Item(listaSugg.Count - 1).Id_Suggerimento).DescrizioneBreve)
                                        Next
                                    Case "USS"
                                        arr(9, ultimoContaRigheValido) = "'./risorse/immagini/" & getImageWorklist(Get_Suggerimento(listaSugg.Item(listaSugg.Count - 1).Id_Suggerimento).DescrizioneBreve)
                                    Case "UPRES"
                                        arr(10, ultimoContaRigheValido) = "'./risorse/immagini/" & getImageWorklist(Get_Suggerimento(listaSugg.Item(listaSugg.Count - 1).Id_Suggerimento).DescrizioneBreve)
                                End Select
                            Else
                                Select Case livelloCorrente
                                    'imposto l'ultimo suggerimento inserimento
                                    Case "UDD"
                                        For Each sugg As ItemSuggerimento In listaSugg
                                            arr(7, ultimoContaRigheValido) = "'./risorse/immagini/" & getImageWorklist(Get_Suggerimento(listaSugg.Item(listaSugg.Count - 1).Id_Suggerimento).DescrizioneBreve)
                                        Next
                                    Case "UCA"
                                        For Each sugg As ItemSuggerimento In listaSugg
                                            arr(8, ultimoContaRigheValido) = "'./risorse/immagini/" & getImageWorklist(Get_Suggerimento(listaSugg.Item(listaSugg.Count - 1).Id_Suggerimento).DescrizioneBreve)
                                        Next
                                    Case "UR"
                                        arr(9, ultimoContaRigheValido) = "'./risorse/immagini/" & getImageWorklist(Get_Suggerimento(listaSugg.Item(listaSugg.Count - 1).Id_Suggerimento).DescrizioneBreve)
                                End Select
                            End If

                        End If

                    End If
                End While

                rdr.Close()
                rdr = Nothing
            Catch ex As Exception
                contaRighe = 0
                rdr = Nothing
                vRitPar(0) = 9999
                vRitPar(1) = ex.Message
            End Try


            If flagEliminaUltimo Then
                contaRighe -= 1
                ReDim Preserve arr(11, contaRighe)
            End If

            vRitPar(0) = IIf(contaRighe > 0, 0, 1)
            vRitPar(1) = IIf(contaRighe > 0, arr, "Non sono stati trovati documenti che rispondono ai criteri di ricerca impostati")

        Catch ex As Exception
            vRitPar(0) = 9999
            vRitPar(1) = ex.Message
        End Try

        If vRitPar(0) <> 0 Then
            GoTo FineSub
        End If

        'Dim vRisultati(6, UBound(vRitPar(1), 2)) As String
        'Dim vRisultati(8, UBound(vRitPar(1), 2)) As String
        Dim vRisultati(11, UBound(vRitPar(1), 2)) As String
        Dim str As String = ""
        For i = 0 To UBound(vRitPar(1), 2)

            'vRisultati(0, i) = vRitPar(1)(0, i) & "" 'idDocumento
            'vRisultati(1, i) = vRitPar(1)(1, i) & "" 'Numero Documento (provvisorio o definitivo)
            'vRisultati(2, i) = vRitPar(1)(2, i) & "" 'Data provvedimento

            'str = vRitPar(1)(3, i) 'Oggetto
            ''comm per eliminazione xml
            ''str = str.Replace("&amp;", Chr(38))
            ''str = str.Replace("&aps;", Chr(39))
            ''str = str.Replace("&gt;", Chr(62))
            ''str = str.Replace("&lt;", Chr(60))
            ''str = str.Replace("&quot;", Chr(34))
            'vRisultati(3, i) = str 'Oggetto Replace caratteri speciali
            'vRisultati(4, i) = "" 'utilizzato per link APRI

            'Dim verificafirma As Integer = VERIFICA_FIRMA_UTENTE(vRisultati(0, i), oOperatore.Codice)

            'If verificafirma > 0 Then
            '    'documento firmato
            '    ' vRisultati(5, i) = "'./risorse/immagini/firma.gif' alt='Il documento risulta correttamente firmato, click per visionarlo' onclick=location.href='AnteprimaAllegatoAction.aspx?key=" & arr2(1, contaRighe2 - 1) & "' style='cursor:hand'"
            '    vRisultati(5, i) = "'./risorse/immagini/firma.gif' alt='Il documento risulta correttamente firmato'"

            'Else
            '    'documento non firmato
            '    vRisultati(5, i) = "'./risorse/immagini/blank.gif' title='Il documento non risulta firmato' alt='Il documento non risulta firmato' "
            'End If

            'vRisultati(6, i) = "" & vRitPar(1)(5, i) 'icona rigetto UDG
            'vRisultati(7, i) = "" & vRitPar(1)(6, i) 'icona rigetto UCA
            'vRisultati(8, i) = "" & vRitPar(1)(7, i) 'icona rigetto UR



            vRisultati(0, i) = vRitPar(1)(0, i) & "" 'idDocumento
            vRisultati(1, i) = vRitPar(1)(1, i) & "" 'urgente
            vRisultati(2, i) = vRitPar(1)(2, i) & "" 'Numero Documento (provvisorio o definitivo)
            vRisultati(3, i) = vRitPar(1)(3, i) & "" 'Data provvedimento
            vRisultati(4, i) = vRitPar(1)(4, i) & "" 'Data seduta

            str = vRitPar(1)(5, i) 'Oggetto
            'comm per eliminazione xml
            'str = str.Replace("&amp;", Chr(38))
            'str = str.Replace("&aps;", Chr(39))
            'str = str.Replace("&gt;", Chr(62))
            'str = str.Replace("&lt;", Chr(60))
            'str = str.Replace("&quot;", Chr(34))
            vRisultati(5, i) = str 'Oggetto Replace caratteri speciali
            vRisultati(6, i) = "" 'utilizzato per link APRI


            Dim stato As StatoIstanzaDocumentoInfo = Get_StatoIstanzaDocumento(vRisultati(0, i))
            If stato.LivelloUfficio.Equals("UAR") Then
                vRisultati(7, i) = "'./risorse/immagini/firma.gif' alt='Il documento risulta correttamente firmato'"
            Else

                Dim verificafirma As Integer = VERIFICA_FIRMA_UTENTE(vRisultati(0, i), oOperatore.Codice)

                If verificafirma > 0 Then
                    'documento firmato
                    ' vRisultati(5, i) = "'./risorse/immagini/firma.gif' alt='Il documento risulta correttamente firmato, click per visionarlo' onclick=location.href='AnteprimaAllegatoAction.aspx?key=" & arr2(1, contaRighe2 - 1) & "' style='cursor:hand'"
                    vRisultati(7, i) = "'./risorse/immagini/firma.gif' alt='Il documento risulta correttamente firmato'"

                Else
                    'documento non firmato
                    vRisultati(7, i) = "'./risorse/immagini/blank.gif' title='Il documento non risulta firmato' alt='Il documento non risulta firmato' "
                End If
            End If

            If tipoDocumento = 1 Then
                vRisultati(8, i) = "" & vRitPar(1)(7, i) 'icona rigetto UR
                vRisultati(9, i) = "" & vRitPar(1)(8, i) 'icona rigetto USS
                vRisultati(10, i) = "" & vRitPar(1)(9, i) 'icona rigetto UPRES
                vRisultati(11, i) = "" & vRitPar(1)(10, i) 'icona rigetto UPRES
            Else
                vRisultati(8, i) = "" & vRitPar(1)(7, i) 'icona rigetto UDD
                vRisultati(9, i) = "" & vRitPar(1)(8, i) 'icona rigetto UCA
                vRisultati(10, i) = "" & vRitPar(1)(9, i) 'icona rigetto UR
                vRisultati(11, i) = "" & vRitPar(1)(10, i)
            End If





        Next
        vRitPar(1) = vRisultati

FineSub:
        FO_Elenco_Documenti = vRitPar

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If

        Exit Function

    End Function


    Function SplitStringOggettoDoc_Oggetto(ByVal str_oggetto As String) As String
        Dim query As String = ""
        For Each strSplitOggetto As String In str_oggetto.Split(" ")
            strSplitOggetto = Trim(strSplitOggetto)
            If strSplitOggetto <> "" Then
                query = query & " Doc_Oggetto like '%" & strSplitOggetto & "%' AND"
            End If
        Next
        If query.EndsWith("AND") Then
            query = query.Substring(0, query.LastIndexOf("AND"))
        End If
        If query <> "" Then
            query = "( " & query & ")"
        End If
        Return query
    End Function

    Friend Function Calcola_Progressivo(ByVal DB As Object, ByVal TipoContatore As Object, Optional ByVal Anno As Integer = 0, Optional ByVal RacchiudiTransazione As Boolean = True, Optional ByVal struttura As String = "0", Optional ByVal sFormato As String = "") As Object
        Const sfun As String = "Calcola_Progressivo"
        Dim RS As Object = Nothing
        Dim Progressivo As String
        Dim Sqlq As String
        Dim vRit(1) As Object
        Dim vR As Object = Nothing
        Dim Formato As String
        Dim Prefisso As String
        Dim PresidioContatore As String
        Dim vParam(2) As Object
        Dim contatoreFormattato As String

        On Error GoTo Herr
        If RacchiudiTransazione Then
            Call DB.BeginTrans()
            If DB.errore <> 0 Then
                vRit(0) = DB.errore
                vRit(1) = DB.ErrDescr
                Call SISTEMA.Registra_Log(vRit(1), sfun)
                GoTo FineSub
            End If
        End If

        Sqlq = "SELECT TCO_Struttura, TCo_Codice, Tco_Anno, Tco_Formato, Tco_Contatore, Tco_Descrizione, TCO_PREFISSO FROM Tab_Contatori WHERE Tco_Codice = '" & TipoContatore & "' AND Tco_Anno = " & Anno
        If struttura <> "0" Then
            Sqlq = Sqlq & " AND Tco_Struttura='" & struttura & "'"
        End If

        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        If DB.errore <> 0 Then
            vRit(0) = DB.errore
            vRit(1) = DB.ErrDescr
            Call SISTEMA.Registra_Log(vRit(1), sfun)
            GoTo RollTrans
        End If

        If RS.EOF And RS.BOF Then
            vParam(0) = DB
            vParam(1) = "Select * from Tab_Tipo_Contatore where Tco_Codice='" & TipoContatore & "'"
            vParam(2) = 2
            vR = GDB.DBQuery(vParam)
            If vR(0) = 0 Then
                Formato = vR(1)(2, 0) & ""
                Prefisso = vR(1)(3, 0) & ""
            Else
                If sFormato <> "" Then
                    Formato = sFormato
                Else
                    Formato = struttura + Trim(Str(Anno) & "00000")
                End If
            End If
            Formato = Replace(Formato, "%ANNO%", Anno)

            Formato = Replace(Formato, "%UFFICIO%", oOperatore.oUfficio.leggiUfficioPubblico(oOperatore.oUfficio.CodUfficio))

            Call DB.AddRS(RS)
            If DB.errore <> 0 Then
                vRit(0) = DB.errore
                vRit(1) = DB.ErrDescr
                Call SISTEMA.Registra_Log(vRit(1), sfun)
                GoTo RollTrans
            End If
            RS("Tco_Struttura").Value = struttura
            RS("Tco_Contatore").Value = 1
            RS("Tco_Anno").Value = Anno
            RS("Tco_Codice").Value = TipoContatore
            RS("Tco_Formato").Value = Formato
            RS("Tco_Prefisso").Value = Prefisso
            contatoreFormattato = (RS("Tco_Formato").Value).replace(".", "_")
            Progressivo = RS("Tco_Prefisso").Value + Format(RS("Tco_Contatore").Value, contatoreFormattato)
            If Progressivo.IndexOf("_") > 0 Then
                Progressivo = Progressivo.Replace("_", ".")
            End If
        Else
            Call DB.EditRS(RS)
            If DB.errore <> 0 Then
                vRit(0) = DB.errore
                vRit(1) = DB.ErrDescr
                Call SISTEMA.Registra_Log(vRit(1), sfun)
                GoTo RollTrans
            End If
            RS("Tco_Contatore").Value = RS("Tco_Contatore").Value + 1
            contatoreFormattato = (RS("Tco_formato").Value).replace(".", "_")
            Progressivo = Format(RS("Tco_Contatore").Value, contatoreFormattato)
            If Progressivo.IndexOf("_") > 0 Then
                Progressivo = Progressivo.Replace("_", ".")
            End If
            Progressivo = RS("Tco_Prefisso").Value & "" & Progressivo
        End If

        Call DB.UpdateRS(RS)
        If DB.errore <> 0 Then
            vRit(0) = DB.errore
            vRit(1) = DB.ErrDescr
            Call SISTEMA.Registra_Log(vRit(1), sfun)
            GoTo RollTrans
        End If

        If RacchiudiTransazione Then
            Call DB.CommitTrans()
            If DB.errore <> 0 Then
                vRit(0) = DB.errore
                vRit(1) = DB.ErrDescr
                Call SISTEMA.Registra_Log(vRit(1), sfun)
                GoTo RollTrans
            End If
        End If
        vRit(0) = 0
        vRit(1) = Progressivo

FineSub:
        Calcola_Progressivo = vRit
        Exit Function

RollTrans:
        If RacchiudiTransazione Then
            If Not DB Is Nothing Then
                Call DB.RollTrans()
                If DB.errore <> 0 Then
                    Call SISTEMA.Registra_Log(DB.ErrDescr, sfun)
                End If
            End If
        End If
        GoTo FineSub

Herr:
        vRit(0) = Err.Number
        vRit(1) = Err.Description
        Call SISTEMA.Registra_Log(vRit(1), sfun)
        GoTo RollTrans
        Resume
    End Function


    Friend Function DB_Aggiungi_RSLOG(ByVal RS As Object, ByVal DB As Object, ByVal sTabLog As String) As Object
        Const SFunzione As String = "DB_Aggiungi_RSLOG"
        Dim vRitPar(3) As Object
        Dim Sqlq As String
        Dim RSLog As Object = Nothing
        Dim vR As Object = Nothing
        Dim i As Integer
        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        On Error GoTo Herr

        RSLog = DB.ApriRS(sTabLog, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If
        Call DB.AddRS(RSLog)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If
        On Error Resume Next
        For i = 0 To RS.Fields.Count - 1
            RSLog(RS(i).Name) = RS(i).Value
        Next i
        On Error GoTo 0

        Call DB.UpdateRS(RSLog)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        vRitPar(0) = 0
        vRitPar(1) = ""

FineSub:
        DB_Aggiungi_RSLOG = vRitPar
        On Error Resume Next
        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

Herr:
        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo FineSub
        ' Resume
    End Function

    Friend Function Passo_Possibile() As Boolean
        Dim bPassoPossibile As Boolean
        bPassoPossibile = (pDirD <> "" _
                   And pDirU <> "" _
                   And pProssimoAttore <> "")
        If bPassoPossibile Then
            Errore = "0"
            ErrDesc = ""
        Else
            Errore = "1"
            ErrDesc = "Parametri di configurazione per il passo non disponibili"
        End If
        Return bPassoPossibile
    End Function

    Friend Sub Esegui_Attivita(ByVal indice As Integer)
        'esegue i-esima attivita

        Dim tipoAttivita As String
        Dim nomeAttivita As String
        Dim dataBase As String
        Dim nomeOggetto As String

        tipoAttivita = pAttivita(0, indice) & ""
        nomeAttivita = pAttivita(1, indice) & ""
        nomeOggetto = pAttivita(2, indice) & ""
        dataBase = pAttivita(3, indice) & ""
        pParametriAttivita = IIf(IsDBNull(pAttivita(4, indice)), "", pAttivita(4, indice))

        Select Case UCase(tipoAttivita)
            Case "DLL"
                Log.Info("***INIZIO Esegui_Attivita - Passo WF - tipoAttivita: " & tipoAttivita & ",numeroNomeAttivita: " & nomeAttivita & " - " & Now)

                ChiamaDll(nomeOggetto, nomeAttivita)

                Log.Info("***FINE Esegui_Attivita - Passo WF - tipoAttivita: " & tipoAttivita & ",numeroNomeAttivita: " & nomeAttivita & " - " & Now)

            Case "WES"
                ChiamaWes(nomeOggetto, nomeAttivita)
            Case "FSQL"
                ChiamaFSQL(nomeOggetto, dataBase)
            Case "SPSQL"
                Log.Info("***INIZIO Esegui_Attivita - Passo WF - tipoAttivita: " & tipoAttivita & ",nomeAttivita: " & nomeAttivita & ",nomeOggetto:" & nomeOggetto & ",dataBase:" & dataBase & " - " & Now)
                ChiamaSPSQL(nomeOggetto, dataBase)
                Log.Info("***FINE Esegui_Attivita - Passo WF - tipoAttivita: " & tipoAttivita & ",nomeAttivita: " & nomeAttivita & ",nomeOggetto:" & nomeOggetto & ",dataBase:" & dataBase & " - " & Now)
        End Select

    End Sub

    Overridable Sub ChiamaDll(ByVal nomeOggetto As String, ByVal nomeAttivita As String)
        If nomeOggetto = "DllDocumentale.svrDocumenti" Then
            'chiamata ad una funzione dell'oggetto PassoDetermina
            Me.ElaboraPasso(CInt(nomeAttivita))
        Else
            'chiama oggetto esterno
        End If

    End Sub

    Private Sub ElaboraPasso(ByVal cFunzione As Integer)
        Try
            Select Case cFunzione
                Case vFunzioniPassoDocumento.cf_MESSAGGIO_INOLTRO
                    Call MESSAGGIO_INOLTRO()
                Case vFunzioniPassoDocumento.cf_VERIFICA_FIRMA_INOLTRO
                    Call VERIFICA_FIRMA_INOLTRO()
                Case vFunzioniPassoDocumento.cf_VERIFICA_FIRMA_RIGETTO
                    Call VERIFICA_FIRMA_RIGETTO()
                Case vFunzioniPassoDocumento.cf_ATTIVA_SCADENZA
                    Call ATTIVA_SCADENZA()
                Case vFunzioniPassoDocumento.cf_DISATTIVA_SCADENZA
                    Call DISATTIVA_SCADENZA()
                Case vFunzioniPassoDocumento.cf_LETTERE_DOCUMENTI
                    Call LETTERE_DOCUMENTI()
                Case vFunzioniPassoDocumento.cf_MESSAGGIO_ARCHIVIO
                    'Dim t As New Thread(New ThreadStart(AddressOf MESSAGGIO_ARCHIVIO))
                    't.Priority = Threading.ThreadPriority.Normal
                    't.Start()
                    Call MESSAGGIO_ARCHIVIO()
                Case vFunzioniPassoDocumento.cf_SEGNA_MESSAGGIO_COME_VISTO_DOPO_INOLTRO
                    Call SEGNA_MESSAGGIO_COME_VISTO_DOPO_INOLTRO()
                Case vFunzioniPassoDocumento.cf_ASSEGNA_NUMERAZIONE_DEFINITIVA
                    Call Assegna_Numerazione_Definitiva()
                Case vFunzioniPassoDocumento.cf_ASSEGNA_NUMERAZIONE_CRONOLOGIA
                    Call Assegna_Numerazione_Cronologia()
                Case "10000"
                    Call Messagio_WebServiceNotifica()
                Case vFunzioniPassoDocumento.cf_MESSAGGIO_ARCHIVIO_COMPETENZA
                    Dim t As New Thread(New ThreadStart(AddressOf MESSAGGIO_ARCHIVIO_COMPETENZA))
                    t.Priority = Threading.ThreadPriority.Normal
                    t.Start()
                    'Call MESSAGGIO_ARCHIVIO_COMPETENZA()

                    'Case vFunzioniPassoDocumento.cf_UPDATE_DOCUMENTO_CONSERVAZIONE_ATTO
                    '    Call UPDATE_DOCUMENTO_CONSERVAZIONE_ATTO()
            End Select
        Catch ex As Exception
            Errore = Err.Number
            ErrDesc = Err.Description
        End Try
    End Sub

    Friend Sub ChiamaWes(ByVal nomeOggetto As String, ByVal nomeAttivita As String)

    End Sub

    Friend Sub ChiamaFSQL(ByVal nomeOggetto As String, ByVal dataBase As String)
        Const SFunzione As String = "ChiamaFSQL"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        Dim parametriFSQL As String = ""
        Dim vParametriFSQL As Object = Nothing
        Dim i As Integer

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If


        vParametriFSQL = Split(pParametriAttivita & ",", ",")
        For i = 0 To UBound(vParametriFSQL)
            Select Case CStr(UCase(vParametriFSQL(i)))
                Case "IDDOCUMENTO"
                    parametriFSQL = IIf(parametriFSQL <> "", ",", "") & "'" & idDocumento & "'"
                Case "UTENTE"
                    parametriFSQL = IIf(parametriFSQL <> "", ",", "") & "'" & oOperatore.Codice & "'"
                Case "OGGI"
                    parametriFSQL = IIf(parametriFSQL <> "", ",", "") & "'" & Format(Now, "MM/dd/yyyy") & "'"
            End Select
        Next



        DB = SISTEMA.PROCDB.Item(dataBase)

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Sqlq = " select Esito, Messaggio  " & _
               " FROM " & nomeOggetto & "(" & parametriFSQL & ") "

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2
        vR = GDB.DBQuery(vP)

        If vR(0) <> 0 Then
            vRitPar(0) = vR(0)
            vRitPar(1) = vR(1)
            GoTo FineSub
        End If


        vRitPar(0) = 0
        vRitPar(1) = ""

FineSub:
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Sub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        GoTo FineSub
        ' Resume

    End Sub

    Friend Sub ChiamaSPSQL(ByVal nomeOggetto As String, ByVal dataBase As String)
        Const SFunzione As String = "ChiamaSPSQL"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        Dim parametriFSQL As String = ""
        Dim vParametriFSQL As Object = Nothing
        Dim i As Integer

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If


        vParametriFSQL = Split(pParametriAttivita & ",", ",")
        For i = 0 To UBound(vParametriFSQL)
            Select Case CStr(UCase(vParametriFSQL(i)))
                Case "IDDOCUMENTO"
                    parametriFSQL = parametriFSQL & IIf(parametriFSQL <> "", ",", "") & "'" & idDocumento & "'"
                Case "UTENTE"
                    parametriFSQL = parametriFSQL & IIf(parametriFSQL <> "", ",", "") & "'" & oOperatore.Codice & "'"
                Case "OGGI"
                    parametriFSQL = parametriFSQL & IIf(parametriFSQL <> "", ",", "") & "'" & Format(Now, "MM/dd/yyyy") & "'"
            End Select
        Next

        Sqlq = " EXECUTE " & nomeOggetto & " " & parametriFSQL & "  "

        vP(0) = dataBase
        vP(1) = Sqlq
        'If GDB.SISTEMA Is Nothing Then

        '    DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

        '    Call DB.ApriDB()
        '    If DB.errore <> 0 Then
        '        vRitPar(0) = DB.errore
        '        vRitPar(1) = DB.ErrDescr
        '        GoTo FineSub
        '    End If

        '    '    GDB = New clGestDB
        '    '    DB = SISTEMA.PROCDB.Item("TABCENTR")

        '    '    Call DB.ApriDB()
        '    '    If DB.errore <> 0 Then
        '    '        GoTo FineSub
        '    '    End If

        '    '    GDB.SISTEMA = SISTEMA
        'End If

        '  vR = GDB.DBExecute_Transazione(vP)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, Sqlq, Nothing)







        'If vR(0) <> 0 Then
        '    vRitPar(0) = vR(0)
        '    vRitPar(1) = vR(1)

        '    GoTo FineSub
        'End If


        vRitPar(0) = 0
        vRitPar(1) = ""

FineSub:
        On Error Resume Next

        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        Errore = vRitPar(0)
        ErrDesc = vRitPar(1)
        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Sub

Herr:

        'vRitPar(0) = Err.Number
        'vRitPar(1) = Err.Description

        vRitPar(0) = 0
        vRitPar(1) = ""
        GoTo FineSub
    End Sub

    Friend Function Leggi_StatoIstanza_WFE(ByVal idIstanza As String, ByVal utente As String) As Object
        Dim vRit(1) As Object

        Try
            vRit(0) = 0
            Dim statoIstanza As StatoIstanzaDocumentoInfo = Get_StatoIstanzaDocumento(idIstanza)
            vRit(1) = New Object() {statoIstanza.LivelloUfficioAsString, statoIstanza.RuoloAsString, statoIstanza.Operatore, 0}

        Catch ex As Exception
            vRit(0) = Err.Number
            vRit(1) = Err.Description
        End Try

        Return vRit

    End Function




    Friend Function Istanzia_Flusso_Documento(ByVal dirD As String, ByVal dirU As String, ByVal utente As String, ByVal idDocumento As String) As Object
        Dim vRit(1) As Object

        ' Insert in tabella Stato_Istanza_Documento

        Try
            Dim istanza As StatoIstanzaDocumentoInfo = New StatoIstanzaDocumentoInfo
            istanza.Doc_id = idDocumento
            istanza.Operatore = utente
            Dim op As DllAmbiente.Operatore = New DllAmbiente.Operatore()
            op.Codice = utente
            istanza.CodiceUfficio = op.oUfficio.CodUfficio
            If dirD <> "StessoUfficio" Then
                istanza.LivelloUfficio = dirD
            End If
            istanza.Ruolo = dirU
            Insert_StatoIstanzaDocumento(istanza)
            vRit(0) = 0
            vRit(1) = istanza.Doc_id
        Catch ex As Exception
            vRit(0) = Err.Number
            vRit(1) = Err.Description
        End Try

        Return vRit
    End Function

    'Friend Function Istanzia_Flusso_Delibera(ByVal dirD As String, ByVal dirU As String, ByVal utente As String) As Object
    '    Dim xmlParam As String
    '    Dim xmlRit As String
    '    Dim vXmlRit As Array
    '    Dim vRit(1) As Object

    '    Try
    '        vRit(0) = 0
    '        vRit(1) = ""

    '        xmlParam = "xmlParam=crea_delibera##%prefIstanza%$%dirD%$%dirU%$%utente%"

    '        xmlParam = Replace(xmlParam, "%prefIstanza%", "DL" & idDocumento & "_", , , CompareMethod.Text)
    '        xmlParam = Replace(xmlParam, "%dirD%", dirD, , , CompareMethod.Text)
    '        xmlParam = Replace(xmlParam, "%dirU%", dirU, , , CompareMethod.Text)
    '        xmlParam = Replace(xmlParam, "%utente%", LCase(utente), , , CompareMethod.Text)

    '        xmlRit = STRUMENTI_Chiamate.ChiamaWes(WESZOPE, xmlParam)

    '        vXmlRit = Split(xmlRit + "#", "#")

    '        If vXmlRit(0) = 0 Then
    '            vRit(0) = vXmlRit(0)
    '            vRit(1) = vXmlRit(1)
    '        Else
    '            vRit(0) = vXmlRit(0)
    '            vRit(1) = vXmlRit(1)
    '        End If
    '    Catch ex As Exception
    '        vRit(0) = Err.Number
    '        vRit(1) = Err.Description
    '    Finally
    '        Istanzia_Flusso_Delibera = vRit
    '    End Try

    'End Function

    Friend Function WorkList_Documenti(ByVal utente As String, ByVal tipoDocumento As Integer) As Object

        Dim vRit(1) As Object

        Try
            vRit(0) = 0
            vRit(1) = ""
            Dim istanze As Generic.List(Of StatoIstanzaDocumentoInfo) = Get_StatoIstanzaDocumento(utente, tipoDocumento)

            Dim vvElencoIstanzaWFE(1, istanze.Count - 1) As String

            Dim j As Integer = 0
            For j = 0 To istanze.Count - 1
                vvElencoIstanzaWFE(0, j) = istanze.Item(j).Doc_id
                vvElencoIstanzaWFE(1, j) = 0
            Next

            vRit(1) = vvElencoIstanzaWFE
        Catch ex As Exception
            vRit(0) = Err.Number
            vRit(1) = Err.Description
        End Try

        Return vRit
    End Function

    Friend Function Passo_Documento(ByVal idIstanza As String, ByVal idWorkitem As String, ByVal attStatoDet As String, ByVal attStatoUff As String, ByVal attAttore As String, ByVal dirD As String, ByVal dirU As String, ByVal attore As String, Optional ByRef trans As SqlTransaction = Nothing) As Object

        If (oOperatore.Test_Attributo("LIVELLO_UFFICIO", "Responsabile")) Then
            Log.Info("***INIZIO Passo_Documento - idDocumento: " & idDocumento & " Operatore: " & oOperatore.Codice & " " & Now)
        End If

        Dim vRit(1) As Object
        Try
            Try
                Dim unico As Boolean
                unico = Verifica_Compito_Utente(idDocumento)
                If Not unico Then
                    Dim compito As String = Definisci_Compito(idDocumento, False)
                    Dim vparm(Dic_FODocumentale.dimvc_Registra_Compito) As Object
                    vparm(0) = idDocumento
                    vparm(2) = compito
                    FO_Registra_Compito(vparm)
                End If
            Catch ex As Exception
                Log.Error("Impossibile registrare il compito dell'utente " & oOperatore.Codice & " sul documento " & idDocumento)
            End Try
            Dim istanza As StatoIstanzaDocumentoInfo = Get_StatoIstanzaDocumento(idIstanza, trans)
            istanza.Operatore = attore
            If dirD <> "StessoUfficio" Then
                istanza.LivelloUfficio = dirD
            End If
            istanza.Ruolo = dirU
            Update_StatoIstanzaDocumento(istanza, trans)
            If istanza.LivelloUfficio.Equals("UAR") Then
                UPDATE_DOCUMENTO_CONSERVAZIONE_ATTO(istanza.DataUltimaOperazione)
            End If

            vRit(0) = 0
            vRit(1) = New Object() {istanza.Doc_id, 0}

        Catch ex As Exception
            vRit(0) = Err.Number
            vRit(1) = Err.Description
        End Try
        If (oOperatore.Test_Attributo("LIVELLO_UFFICIO", "Responsabile")) Then
            Log.Info("***FINE Passo_Documento - idDocumento " & idDocumento & " Operatore: " & oOperatore.Codice & " " & Now)
        End If
        Return vRit

    End Function

    Function RipristinaPassoDocumento(ByVal codDocumento As String) As Boolean
        Dim result As Boolean = False

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim trans As SqlClient.SqlTransaction = Nothing
        Try

            conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
            conn.Open()
            trans = conn.BeginTransaction


            FO_Delete_Ultima_Azione_Utente_Documento(codDocumento, trans)
            Dim ultimAzioneUtenteDocumento As ItemAzioneUtenteDocumento = FO_Get_Ultima_Azione_Utente_Documento(codDocumento, trans)

            If Not ultimAzioneUtenteDocumento Is Nothing Then
                Dim istanza As StatoIstanzaDocumentoInfo = Get_StatoIstanzaDocumento(codDocumento, trans)

                If ultimAzioneUtenteDocumento.Sto_Info_Attivita = "ARRIVOUF" Then
                    Dim ufficioIstanza As New DllAmbiente.Ufficio
                    ufficioIstanza.CodUfficio = ultimAzioneUtenteDocumento.Sto_Ufficio

                    istanza.LivelloUfficio = ufficioIstanza.livelloUfficioAsSigla(ufficioIstanza)
                    istanza.Ruolo = "D"
                    istanza.Operatore = ultimAzioneUtenteDocumento.Sto_Ufficio

                ElseIf ultimAzioneUtenteDocumento.Sto_Info_Attivita = "ARRIVOWL" Then
                    Dim operatoreIstanza As New DllAmbiente.Operatore
                    operatoreIstanza.Codice = ultimAzioneUtenteDocumento.Sto_Utente
                    Dim isCollaboratore As Boolean = oOperatore.Test_Gruppo("CollUfPr")

                    If isCollaboratore Then
                        istanza.Ruolo = "C"
                    Else
                        Dim isSupervisore As Boolean = oOperatore.Test_Gruppo("SupUfPr")
                        If isSupervisore Then
                            istanza.Ruolo = "S"
                        Else
                            istanza.Ruolo = "R"
                        End If
                    End If

                    Dim ufficioIstanza As New DllAmbiente.Ufficio
                    ufficioIstanza.CodUfficio = ultimAzioneUtenteDocumento.Sto_Ufficio

                    istanza.LivelloUfficio = ufficioIstanza.livelloUfficioAsSigla(ufficioIstanza)
                    istanza.Operatore = ultimAzioneUtenteDocumento.Sto_Utente
                Else
                    istanza.LivelloUfficio = ultimAzioneUtenteDocumento.Sto_Livello
                    istanza.Operatore = ultimAzioneUtenteDocumento.Sto_Utente

                    Dim operatoreIstanza As New DllAmbiente.Operatore
                    operatoreIstanza.Codice = ultimAzioneUtenteDocumento.Sto_Utente
                    Dim isCollaboratore As Boolean = oOperatore.Test_Gruppo("CollUfPr")

                    If isCollaboratore Then
                        istanza.Ruolo = "C"
                    Else
                        Dim isSupervisore As Boolean = oOperatore.Test_Gruppo("SupUfPr")
                        If isSupervisore Then
                            istanza.Ruolo = "S"
                        Else
                            istanza.Ruolo = "R"
                        End If
                    End If

                End If

                Update_StatoIstanzaDocumento(istanza, trans)

            End If

            trans.Commit()
            result = True
        Catch ex As Exception
            result = False
            If Not trans Is Nothing Then
                trans.Rollback()
            End If
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try

        Return result
    End Function

    Friend Sub MESSAGGIO_ARCHIVIO(Optional ByVal codMessaggio As Integer = -1, Optional ByVal mittente As String = "", Optional ByVal destinatario As String = "", Optional ByVal dataScadenza As String = "")
        Const SFunzione As String = "MESSAGGIO_ARCHIVIO"

        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim RS As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing
        Dim templateMessaggio As String = ""
        On Error GoTo Herr
        Dim flagInviato As Boolean = False

        Dim vParm(1) As Object
        vParm(1) = idDocumento
        Dim vRit As Object

        vRit = FO_Elenco_Compiti_Documento(vParm)
        If vRit(0) = 0 Then
            Dim ht As New Hashtable
            Dim lstr_Destinatario As String = ""
            Dim lstr_Mittente As String = "Sistema"
            Dim conta As Integer = 0


            For conta = 0 To UBound(vRit(1), 2)
                If conta = 0 Then
                    VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
                    'DB = SISTEMA.PROCDB.Item("DOCUMENTALE

                    Call DB.ApriDB()
                    If DB.errore <> 0 Then
                        vRitPar(0) = DB.errore
                        vRitPar(1) = DB.ErrDescr
                        GoTo FineSub
                    End If

                    Call DB.BeginTrans()
                    If DB.errore <> 0 Then
                        vRitPar(0) = DB.errore
                        vRitPar(1) = DB.ErrDescr
                        GoTo RollTrans
                    End If
                End If

                lstr_Destinatario = Trim(vRit(1)(0, conta))
                Dim destinatariTutti As Boolean = False
                destinatariTutti = IIf(ConfigurationManager.AppSettings("MESSAGGIO_TUTTI") = 1, True, False)

                If destinatariTutti = True Or vRit(1)(2, conta).ToString.Contains("DIR_CONTROLLOAMM") Or vRit(1)(2, conta).ToString.Contains("DIRIGENTEGEN") Or vRit(1)(2, conta).ToString.Contains("DIRIGENTEUP") Or vRit(1)(2, conta).Contains("ISTRUTTORE") Or vRit(1)(2, conta).Contains("POC_ISTRUTTORE") Then

                    If ht(lstr_Destinatario) Is Nothing Then
                        Dim operatore_destinatario As New DllAmbiente.Operatore
                        operatore_destinatario.pCodice = lstr_Destinatario
                        Dim messaggi_con_note As Boolean
                        If operatore_destinatario.Attributo("MESSAGGI_CON_NOTE") = "" Then
                            messaggi_con_note = False
                        Else
                            messaggi_con_note = CBool(operatore_destinatario.Attributo("MESSAGGI_CON_NOTE"))
                        End If

                        Dim messaggio As XmlDocument = Me.GetXmlDati(IIf(codMessaggio = -1, 0, codMessaggio))
                        Dim nodo As XmlNode = (messaggio.SelectSingleNode("dati")).SelectSingleNode("note")
                        If "" & nodo.InnerText() <> "" Or (messaggi_con_note = False) Then
                            vRitPar(0) = 0
                            vRitPar(1) = ""
                            Log.Info("***INIZIO " & SFunzione & " " & "idDocumento: " & idDocumento & " " & Now)

                            Dim azione As String = "Archivio"

                            If (verificaAzioneInoltroMessaggio(pParametriAttivita)) Then
                                azione = pParametriAttivita
                            End If
                            If codMessaggio < 0 Then
                                Sqlq = "SELECT     Tms_ID, Tms_Descrizione   FROM Tab_Messaggi " & _
                                       " WHERE     (Tms_usoMessaggi = '" & azione & "')"

                                vP(0) = DB
                                vP(1) = Sqlq
                                vP(2) = 2

                                vR = GDB.DBQuery(vP)

                                If vR(0) <> 0 Then
                                    vRitPar(0) = DB.errore
                                    vRitPar(1) = DB.ErrDescr
                                    GoTo FineSub
                                End If
                                codMessaggio = vR(1)(0, 0)
                                templateMessaggio = vR(1)(1, 0)
                            End If

                            Sqlq = "SELECT     Cmu_Mittente, Cmu_Destinatario, Cmu_Data_Notifica, " & _
                                   "           Cmu_Avvisato, Cmu_Dati, Cmu_Id_Messaggio , Cmu_iddocumento" & _
                                   " FROM      Casella_Messaggi_Utente  "

                            RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
                            If DB.errore <> 0 Then
                                vRitPar(0) = DB.errore
                                vRitPar(1) = DB.ErrDescr
                                GoTo RollTrans
                            End If


                            Call DB.AddRS(RS)
                            If DB.errore <> 0 Then
                                vRitPar(0) = DB.errore
                                vRitPar(1) = DB.ErrDescr
                                GoTo RollTrans
                            End If
                            RS("Cmu_Mittente") = lstr_Mittente
                            RS("Cmu_Destinatario") = lstr_Destinatario


                            RS("Cmu_Avvisato") = 0
                            Dim outerXml As String = Me.GetXmlDati(codMessaggio).OuterXml
                            RS("Cmu_Dati") = outerXml
                            RS("Cmu_Id_Messaggio") = codMessaggio
                            RS("Cmu_iddocumento") = idDocumento
                            RS("Cmu_Data_Notifica") = Now

                            Log.Info("***INIZIO INVIO MESSAGGIO_ARCHIVIO di sistema - Operatore Destinatario: " & lstr_Destinatario & " idDocumento: " & idDocumento & " " & Now)

                            Call DB.UpdateRS(RS)

                            Log.Info("***FINE INVIO MESSAGGIO_ARCHIVIO di sistema - Operatore Destinatario: " & lstr_Destinatario & " idDocumento: " & idDocumento & " " & Now)

                            If DB.errore <> 0 Then
                                vRitPar(0) = DB.errore
                                vRitPar(1) = DB.ErrDescr
                                GoTo RollTrans
                            End If
                            'Invio messaggio solo 1 volta
                            If Not flagInviato Then

                                Dim xmlDatiMessaggio As System.Xml.XmlDocument = New System.Xml.XmlDocument
                                xmlDatiMessaggio.LoadXml(outerXml)
                                Dim lstr_messaggio As String = templateMessaggio

                                lstr_messaggio = lstr_messaggio.Replace("link", "numero")
                                For Each nodoDatiMessaggio As System.Xml.XmlNode In xmlDatiMessaggio.FirstChild
                                    lstr_messaggio = Replace(lstr_messaggio, "%" & nodoDatiMessaggio.Name & "%", nodoDatiMessaggio.InnerText, , , CompareMethod.Text)
                                Next
                                Messagio_WebServiceNotifica(1, codMessaggio, lstr_messaggio)
                                flagInviato = True
                            End If

                            ''Inivio Email
                            Dim dest As String = RS("Cmu_Destinatario").VALUE
                            Dim operDest As New DllAmbiente.Operatore
                            operDest.Codice = dest
                            'verificare se il dest vuole la tipologia di messaggio
                            Dim mitt As String = RS("Cmu_Mittente").VALUE

                            If operDest.OpzioniMessaggi(codMessaggio) > 0 Then
                                If String.IsNullOrEmpty(operDest.Email) Or operDest.Email = "-" Then
                                    Log.Info("Impossibile inviare una mail Operatarore " & dest & " indirizzo mail non settato ")
                                Else
                                    InvioEmail(outerXml, templateMessaggio, mitt, dest, operDest.Email)
                                End If

                            End If

                            ht.Add(lstr_Destinatario, 1)
                        End If
                    End If
                End If
            Next

            Call DB.CommitTrans()
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
        End If

        vRitPar(0) = 0
        vRitPar(1) = ""
FineSub:
        On Error Resume Next
        Errore = vRitPar(0)
        ErrDesc = vRitPar(1)
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Log.Info(vRitPar(1) & " " & SFunzione)
        End If
        Log.Info("***FINE " & SFunzione & " " & " - idDocumento: " & idDocumento & " " & Now)

        On Error GoTo 0
        Exit Sub

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Log.Error(DB.ErrDescr & " " & SFunzione)
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Log.Error(vRitPar(1) & " " & SFunzione)
        GoTo RollTrans






        ' Resume
    End Sub

    Friend Sub MESSAGGIO_ARCHIVIO_COMPETENZA(Optional ByVal mittente As String = "", Optional ByVal destinatario As String = "", Optional ByVal dataScadenza As String = "")

        Const SFunzione As String = "MESSAGGIO_ARCHIVIO_COMPETENZA"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim RS As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing
        Dim templateMessaggio As String = ""
        On Error GoTo Herr

        Dim lstr_Mittente As String = "Sistema"
        Dim lstr_Destinatario As String = ""


        Dim vParm(1) As Object
        vParm(1) = idDocumento
        Dim vRit As Object

        Dim listaUfficiCompetenza As Collections.Generic.IList(Of DllAmbiente.StrutturaInfo)

        listaUfficiCompetenza = Get_Lista_Documento_Uffici_Competenza(idDocumento)
        Dim listaDipendentiGlobale As New Hashtable
        For Each struttura As DllAmbiente.StrutturaInfo In listaUfficiCompetenza
            Dim ufficio As New DllAmbiente.Ufficio
            ufficio.CodUfficio = struttura.CodiceInterno


            Dim listaDipendentiUfficio As Hashtable = ufficio.UtentiUfficio("")

            If Not listaDipendentiUfficio Is Nothing Then
                For Each key As String In listaDipendentiUfficio.Keys
                    If listaDipendentiGlobale(key) Is Nothing Then
                        listaDipendentiGlobale.Add(key, listaDipendentiUfficio(key))
                    End If
                Next
            End If

        Next


        Dim codMessaggio As String = ""
        Dim azione As String = "Competenza"
        vRitPar(0) = 0
        vRitPar(1) = ""
        Log.Info("***INIZIO " & SFunzione & " IdDocumento: " & idDocumento & " - " & Now)


        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Sqlq = "SELECT     Tms_ID, Tms_Descrizione  FROM Tab_Messaggi " & _
               " WHERE     (Tms_usoMessaggi = '" & azione & "')"

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)

        If vR(0) <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If
        codMessaggio = vR(1)(0, 0)
        templateMessaggio = vR(1)(1, 0)

        'se ci sono uffici selezionati per la notifica e questi hanno dipendenti da notificare
        'Dim outerXml As String = Me.GetXmlDati(codMessaggio).OuterXml
        If listaDipendentiGlobale.Count > 0 Then
            ' per ogni dipendedente dell'ufficio da notificare viene inviato un messaggio interno alla procedura
            For Each codiceOperatoreKey As String In listaDipendentiGlobale.Keys

                Dim nominativoDipendente As String = listaDipendentiGlobale(codiceOperatoreKey)
                lstr_Destinatario = codiceOperatoreKey

                Dim operatore As New DllAmbiente.Operatore
                operatore.Codice = lstr_Destinatario

                Dim ufficio As New DllAmbiente.Ufficio
                ufficio.CodUfficio = operatore.oUfficio.CodUfficio

                Me.descrizioneUfficioCompetenza = ufficio.DescrUfficioBreve

                Dim outerXml As String = Me.GetXmlDati(codMessaggio).OuterXml
                'Dim messaggio As XmlDocument = Me.GetXmlDati(IIf(codMessaggio = -1, 0, codMessaggio))
                vRitPar(0) = 0
                vRitPar(1) = ""


                Sqlq = "SELECT     Cmu_Mittente, Cmu_Destinatario, Cmu_Data_Notifica, " &
                       "           Cmu_Avvisato, Cmu_Dati, Cmu_Id_Messaggio , Cmu_iddocumento" &
                       " FROM      Casella_Messaggi_Utente  "

                RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    GoTo RollTrans
                End If


                Call DB.AddRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    GoTo RollTrans
                End If
                RS("Cmu_Mittente") = lstr_Mittente
                RS("Cmu_Destinatario") = lstr_Destinatario

                RS("Cmu_Avvisato") = 0
                RS("Cmu_Dati") = outerXml
                RS("Cmu_Id_Messaggio") = codMessaggio
                RS("Cmu_iddocumento") = idDocumento
                RS("Cmu_Data_Notifica") = Now

                Call DB.UpdateRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    GoTo RollTrans
                End If


                ' se il dipendente si è configurato la notifica via mail dalle impostazione nel profilo,
                ' riceverà anche un messaggio via email
                ''Inivio Email
                Dim dest As String = RS("Cmu_Destinatario").VALUE
                Dim operDest As New DllAmbiente.Operatore
                operDest.Codice = dest
                'verificare se il dest vuole la tipologia di messaggio
                Dim mitt As String = RS("Cmu_Mittente").VALUE

                If operDest.OpzioniMessaggi(codMessaggio) > 0 Then
                    If String.IsNullOrEmpty(operDest.Email) Or operDest.Email = "-" Then
                        Log.Info(SFunzione & " - Impossibile inviare una mail Operatarore " & dest & " indirizzo mail non settato ")
                    Else
                        InvioEmail(outerXml, templateMessaggio, mitt, dest, operDest.Email)
                    End If

                End If

            Next
        End If

        Dim utenti As Generic.IList(Of DllAmbiente.Utente) = Get_Lista_Documento_Utenti_Uffici_Competenza(idDocumento)

        For Each utente As DllAmbiente.Utente In utenti
            Dim destinatarioMail As String = utente.Account
            Dim operatoreDestinatario As New DllAmbiente.Operatore
            operatoreDestinatario.Codice = destinatarioMail
            Dim mitt As String = lstr_Mittente
            Dim ufficio As New DllAmbiente.Ufficio
            ufficio.CodUfficio = operatoreDestinatario.oUfficio.CodUfficio

            Me.descrizioneUfficioCompetenza = ufficio.DescrUfficioBreve
            Dim outerXml As String = Me.GetXmlDati(codMessaggio).OuterXml
            If operatoreDestinatario.Email Is Nothing OrElse operatoreDestinatario.Email = "" Then
                Log.Info(SFunzione & " - Impossibile inviare una mail Operatarore " & destinatarioMail & " indirizzo mail non settato ")
            Else
                InvioEmail(outerXml, templateMessaggio, mitt, destinatarioMail, operatoreDestinatario.Email)
            End If

        Next


FineSub:
        On Error Resume Next
        Errore = vRitPar(0)
        ErrDesc = vRitPar(1)
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Log.Info(vRitPar(1) & " " & SFunzione)
        End If
        Log.Info("***FINE " & SFunzione & " IdDocumento: " & idDocumento & " - " & Now)

        On Error GoTo 0
        Exit Sub

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Log.Error(DB.ErrDescr & " " & SFunzione)
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Log.Error(vRitPar(1) & " " & SFunzione)
        GoTo RollTrans






        ' Resume
    End Sub


    Friend Sub SEGNA_MESSAGGIO_COME_VISTO_DOPO_INOLTRO()

        Const SFunzione As String = "SEGNA_MESSAGGIO_COME_VISTO_DOPO_INOLTRO"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim RS As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        Dim oAttore As DllAmbiente.Operatore

        On Error GoTo Herr
        vRitPar(0) = 0
        vRitPar(1) = ""

        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        'Call DB.BeginTrans()
        'If DB.errore <> 0 Then
        '    vRitPar(0) = DB.errore
        '    vRitPar(1) = DB.ErrDescr
        '    GoTo RollTrans
        'End If

        Dim testoMessaggio As String
        'leggo se ci sono delle note nel messaggio


        Sqlq = " SELECT     Cmu_Dati, Cmu_idMessaggio " & _
               " FROM Casella_Messaggi_Utente  " & _
               " WHERE      (Cmu_Destinatario = '" & oOperatore.oUfficio.CodUfficio & "' or Cmu_Destinatario = '" & oOperatore.Codice & "')" & _
               " AND (Cmu_iddocumento = '" & idDocumento & "') "

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2
        vR = GDB.DBQuery(vP)

        If vR(0) <> 0 Then
            Errore = 0
            ErrDesc = ""
            Call SISTEMA.Registra_Log("Non ci sono messaggi da cancellare")
            Exit Sub
        End If
        For i As Integer = 0 To UBound(vR(1), 2)
            Dim xmlMessaggio As XmlDocument
            xmlMessaggio = New XmlDocument
            xmlMessaggio.LoadXml(vR(1)(0, i))
            Dim note As String = ""
            note = DirectCast(xmlMessaggio.DocumentElement, XmlNode).SelectSingleNode("note").InnerXml

            Sqlq = " SELECT Msg_cancellato, Msg_dataLettura " & _
                   " FROM  Messaggi INNER JOIN Casella_Messaggi_Utente ON Messaggi.Msg_id = Casella_Messaggi_Utente.Cmu_idMessaggio " & _
                   " WHERE (Msg_id = '" & vR(1)(1, i) & "') and Msg_cancellato = 0"


            RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If

            If Not RS.EOF Then
                Call DB.EditRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    GoTo RollTrans
                End If

                If Trim(note) = "" Then
                    'non ci sono note quindi cancello il messaggio
                    RS("Msg_cancellato").value = 1
                Else
                    'ci sono le note leggo il messaggio come letto, ma non lo cancello
                    RS("Msg_dataLettura").value = Now
                End If

                Call DB.UpdateRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    GoTo RollTrans
                End If
            End If
        Next

        vRitPar(0) = 0
        vRitPar(1) = ""
FineSub:
        On Error Resume Next
        Errore = vRitPar(0)
        ErrDesc = vRitPar(1)
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Sub

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Sub

    Friend Sub MESSAGGIO_INOLTRO(Optional ByVal codMessaggio As Integer = -1, Optional ByVal mittente As String = "", Optional ByVal destinatario As String = "", Optional ByVal dataScadenza As String = "")
        Const SFunzione As String = "MESSAGGIO_INOLTRO"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim RS As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        Dim flagInviato As Boolean = False

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        Log.Info("***INIZIO " & SFunzione & " - idDocumento: " & idDocumento & " " & Now)


        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If
        Dim templateMessaggio As String = ""
        If codMessaggio < 0 Then
            Sqlq = "SELECT     Tms_ID, Tms_Descrizione  FROM Tab_Messaggi " & _
                   " WHERE     (Tms_usoMessaggi = '" & azione & "')"

            vP(0) = DB
            vP(1) = Sqlq
            vP(2) = 2

            vR = GDB.DBQuery(vP)

            If vR(0) <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo FineSub
            End If
            codMessaggio = vR(1)(0, 0)
            templateMessaggio = vR(1)(1, 0)
        Else
            Sqlq = "SELECT     Tms_ID, Tms_Descrizione  FROM Tab_Messaggi " & _
                   " WHERE     (Tms_ID = " & codMessaggio & ") "
            vP(0) = DB
            vP(1) = Sqlq
            vP(2) = 2
            vR = GDB.DBQuery(vP)
            If vR(0) <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo FineSub
            End If
            templateMessaggio = vR(1)(1, 0)
        End If

        Call DB.BeginTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        Sqlq = "SELECT     Cmu_Mittente, Cmu_Destinatario, Cmu_Data_Notifica, " & _
               "           Cmu_Avvisato, Cmu_Dati, Cmu_Id_Messaggio , Cmu_iddocumento" & _
               " FROM      Casella_Messaggi_Utente  "

        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If


        Call DB.AddRS(RS)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        If azione = "PRELAZIONE" Then
            RS("Cmu_Mittente") = IIf(mittente <> "", mittente, pProssimoAttore)
            RS("Cmu_Destinatario") = IIf(destinatario <> "", destinatario, pAttore)
        Else
            RS("Cmu_Mittente") = IIf(mittente <> "", mittente, pAttore)
            RS("Cmu_Destinatario") = IIf(destinatario <> "", destinatario, pProssimoAttore)
        End If
        If IsDate(dataScadenza) Then
            RS("Cmu_Data_Notifica") = CDate(dataScadenza)
        Else
            RS("Cmu_Data_Notifica") = Now
        End If
        '**********
        ' da importare nel 2008
        Dim operatore_destinatario As New DllAmbiente.Operatore
        operatore_destinatario.pCodice = RS("Cmu_Destinatario").value
        Dim messaggi_con_note As Boolean
        If operatore_destinatario.Attributo("MESSAGGI_CON_NOTE") = "" Then
            messaggi_con_note = False
        Else
            messaggi_con_note = CBool(operatore_destinatario.Attributo("MESSAGGI_CON_NOTE"))
        End If

        Dim outerXml As String = Me.GetXmlDati(codMessaggio).OuterXml
        If messaggi_con_note = True Or codMessaggio = 7 Then
            'codMEssaggio = 7 -> inoltro per conoscenza
            Dim messaggio As XmlDocument = Me.GetXmlDati(codMessaggio)
            Dim nodo As XmlNode = (messaggio.SelectSingleNode("dati")).SelectSingleNode("note")
            If "" & nodo.InnerText() <> "" Or codMessaggio = 7 Then
                RS("Cmu_Avvisato") = 0
                RS("Cmu_Dati") = messaggio.OuterXml
                RS("Cmu_Id_Messaggio") = codMessaggio
                RS("Cmu_iddocumento") = idDocumento

                Call DB.UpdateRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    GoTo RollTrans
                End If
            End If
        Else
            RS("Cmu_Avvisato") = 0
            RS("Cmu_Dati") = outerXml
            RS("Cmu_Id_Messaggio") = codMessaggio
            RS("Cmu_iddocumento") = idDocumento


            Call DB.UpdateRS(RS)
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
        End If

        If Not flagInviato Then

            Dim xmlDatiMessaggio As System.Xml.XmlDocument = New System.Xml.XmlDocument
            xmlDatiMessaggio.LoadXml(outerXml)
            Dim lstr_messaggio As String = templateMessaggio

            lstr_messaggio = lstr_messaggio.Replace("link", "numero")
            For Each nodoDatiMessaggio As System.Xml.XmlNode In xmlDatiMessaggio.FirstChild
                lstr_messaggio = Replace(lstr_messaggio, "%" & nodoDatiMessaggio.Name & "%", nodoDatiMessaggio.InnerText, , , CompareMethod.Text)
            Next


            Messagio_WebServiceNotifica(, codMessaggio, lstr_messaggio)

            flagInviato = True
        End If




        ''Inivio Email
        Dim mitt As String = RS("Cmu_Mittente").VALUE
        Dim dest As String = RS("Cmu_Destinatario").VALUE
        'verificare se il dest vuole la tipollogia di messaggio
        If Not mitt.Contains("ARCH") Then

            Dim operDest As New DllAmbiente.Operatore
            operDest.Codice = dest

            If operDest.OpzioniMessaggi(codMessaggio) > 0 Then
                If String.IsNullOrEmpty(operDest.Email) Or operDest.Email = "-" Then
                    SISTEMA.Registra_Log("Impossibile inviare una mail Operatarore " & dest & " indirizzo mail non settato ")
                Else
                    InvioEmail(outerXml, templateMessaggio, mitt, dest, operDest.Email)
                End If

            End If


        End If
        ''Fine Email       





        ''RS("Cmu_Avvisato") = 0
        ''RS("Cmu_Dati") = xmlDati
        ''RS("Cmu_Id_Messaggio") = codMessaggio
        ''RS("Cmu_iddocumento") = idDocumento

        ''Call DB.UpdateRS(RS)
        ''If DB.errore <> 0 Then
        ''    vRitPar(0) = DB.errore
        ''    vRitPar(1) = DB.ErrDescr
        ''    GoTo RollTrans
        ''End If

        '*******************

        Call DB.CommitTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        vRitPar(0) = 0
        vRitPar(1) = ""

FineSub:
        On Error Resume Next
        Errore = vRitPar(0)
        ErrDesc = vRitPar(1)
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Log.Info(vRitPar(1) & " " & SFunzione)
        End If
        Log.Info("***FINE " & SFunzione & " - idDocumento: " & idDocumento & " " & Now)

        On Error GoTo 0
        Exit Sub

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Log.Error(DB.ErrDescr & " " & SFunzione)
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Log.Error(vRitPar(1) & " " & SFunzione)
        GoTo RollTrans
        ' Resume
    End Sub
    Sub InvioEmail(ByVal xmlDati As String, ByVal templateMessaggio As String, ByVal codmitt As String, ByVal coddest As String, ByVal EmailDest As String)
        Try
            ''
            'inserire qui l'invio della Mail gestendo le autorizzazioni
            Dim domDatiMessaggio As System.Xml.XmlDocument = New System.Xml.XmlDocument
            domDatiMessaggio.LoadXml(xmlDati)


            templateMessaggio = templateMessaggio.Replace("link", "numero")
            For Each nodoDatiMessaggio As System.Xml.XmlNode In domDatiMessaggio.FirstChild
                templateMessaggio = Replace(templateMessaggio, "%" & nodoDatiMessaggio.Name & "%", nodoDatiMessaggio.InnerText, , , CompareMethod.Text)
            Next
            'Test impostazioni su tipologia Messaggio
            'Invio


            Dim mail As New Mail("Comunicazione Provvedimenti Amministrativi", templateMessaggio, "", EmailDest, True)
            mail.Send()


            'Fine modifica Mail
            ''
        Catch ex As Exception
            Call SISTEMA.Registra_Log("Errore Invio Email: " & templateMessaggio & " mitt: " & codmitt & " dest: " & coddest & "email: " & EmailDest & " err: " & ex.Message)
        End Try

    End Sub

    Friend Sub VERIFICA_FIRMA_INOLTRO()
        Const SFunzione As String = "VERIFICA_FIRMA_INOLTRO"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        'serve la funzione get attributo ....
        If oOperatore.Test_Attributo("LIVELLO_UFFICIO", "Collaboratore") Then
            If Not oOperatore.oUfficio.Test_Attributo("OBBLIGO_FIRMA_COLL", "1") Then
                vRitPar(0) = 0
                vRitPar(1) = ""
                GoTo FineSub
            End If
        ElseIf oOperatore.Test_Attributo("LIVELLO_UFFICIO", "Supervisore") Then
            If Not oOperatore.oUfficio.Test_Attributo("OBBLIGO_FIRMA_SUP", "1") Then
                vRitPar(0) = 0
                vRitPar(1) = ""
                GoTo FineSub
            End If
        ElseIf oOperatore.Test_Attributo("LIVELLO_UFFICIO", "Responsabile") Then
            If Not oOperatore.oUfficio.Test_Attributo("OBBLIGO_FIRMA_RESP", "1") Then
                vRitPar(0) = 0
                vRitPar(1) = ""
                GoTo FineSub
            End If
        Else
            vRitPar(0) = 1
            vRitPar(1) = "Informazioni insufficienti sulla verifica della firma"
            GoTo FineSub
        End If


        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        'Sqlq = "SELECT  Sto_Utente, Sto_TipoAttivita " & _
        '       " FROM Azioni_Utente_Documento " & _
        '       " WHERE (Azioni_Utente_Documento.Sto_id_Doc = '" &objDocumento.Doc_id& "') " & _
        '       " AND (Azioni_Utente_Documento.Sto_Utente ='" & utente.Codice & "')" & _
        '       " AND (Azioni_Utente_Documento.Sto_TipoAttivita = 'FIRMA')" & _
        '       " ORDER BY Sto_prog DESC"

        Sqlq = "SELECT     Sto_Utente, Sto_TipoAttivita, Sto_Livello " & _
         " FROM Azioni_Utente_Documento " & _
         " WHERE     (Sto_id_Doc = '" & objDocumento.Doc_id & "') AND (Sto_Utente = '" & oOperatore.Codice & "') " & _
         " AND ((Sto_TipoAttivita = 'FIRMA')or(Sto_TipoAttivita = 'NOTE_RIG')) AND (Sto_Prog > " & _
                          " (SELECT     TOP 1 Sto_Prog " & _
                           "  FROM          Azioni_Utente_Documento AS Azioni_Utente_Documento_1 " & _
                          "  WHERE      (Sto_id_Doc = '" & objDocumento.Doc_id & "') AND (Sto_TipoAttivita = 'PRODDOC') " & _
                           " ORDER BY Sto_Prog DESC))" & _
        " ORDER BY Sto_Prog DESC "


        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2
        vR = GDB.DBQuery(vP)

        Dim livelloUfficio As String = (New DllDocumentale.svrDocumenti(oOperatore)).Get_StatoIstanzaDocumento(idDocumento).LivelloUfficio
        If vR(0) = 0 Then
            If vR(1)(2, 0) <> "" Then
                If vR(1)(2, 0) <> livelloUfficio Then
                    Errore = 1
                    ErrDesc = "Impossibile inoltrare il documento senza averlo firmato"
                End If
            End If

        ElseIf vR(0) <> 0 Then
            Errore = 1
            ErrDesc = "Impossibile inoltrare il documento senza averlo firmato"
        End If

        vRitPar(0) = vR(0)
        vRitPar(1) = vR(1)
FineSub:
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Sub


Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo FineSub
        ' Resume
    End Sub
    Public Function OBBLIGO_FIRMA_INOLTRO(ByVal ooperatore As DllAmbiente.Operatore) As Boolean
        Const SFunzione As String = "VERIFICA_OBBLIGO_FIRMA"
        Log.Info(Now & " - " & ooperatore.Codice & " - " & SFunzione)
        Try
            Dim obbligo As Boolean = False
            If ooperatore.Test_Attributo("LIVELLO_UFFICIO", "Collaboratore") Then
                obbligo = ooperatore.oUfficio.Test_Attributo("OBBLIGO_FIRMA_COLL", "1")
                Log.Info(Now & " - " & ooperatore.Codice & " - OBBLIGO_FIRMA_COLL")
                Return obbligo

            ElseIf ooperatore.Test_Attributo("LIVELLO_UFFICIO", "Supervisore") Then
                obbligo = ooperatore.oUfficio.Test_Attributo("OBBLIGO_FIRMA_SUP", "1")
                Log.Info(Now & " - " & ooperatore.Codice & " - OBBLIGO_FIRMA_SUP")
                Return obbligo

            ElseIf ooperatore.Test_Attributo("LIVELLO_UFFICIO", "Responsabile") Then
                obbligo = ooperatore.oUfficio.Test_Attributo("OBBLIGO_FIRMA_RESP", "1")
                Log.Info(Now & " - " & ooperatore.Codice & " - OBBLIGO_FIRMA_RESP")
                Return obbligo
            ElseIf ooperatore.Test_Attributo("LIVELLO_UFFICIO", "4Livello") Then
                obbligo = ooperatore.oUfficio.Test_Attributo("OBBLIGO_FIRMA_4LIV", "1")
                Log.Info(Now & " - " & ooperatore.Codice & " - OBBLIGO_FIRMA_4LIV")
                Return obbligo
            Else
                Return obbligo
            End If
        Catch ex As Exception
            Log.Error(Now & " - " & ooperatore.Codice & " - " & ex.Message)
            Return False
        End Try
        Return False
    End Function
    Sub FO_Delete_Documento_Attributi(ByVal criteriRicerca As DllDocumentale.Documento_attributo, Optional ByVal trans As SqlTransaction = Nothing)
        Dim conn As SqlClient.SqlConnection = Nothing

        Dim delete_attributo As String = "DELETE FROM [Documento_Attributo]  " &
        " where Doc_Id=@IdDocumento and Ente=@ente and Cod_Attributo=@cod_Attributo"

        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If


            Dim parms(2) As SqlParameter
            parms(0) = New SqlParameter("@IdDocumento", SqlDbType.VarChar)
            parms(0).Value = criteriRicerca.Doc_id

            parms(1) = New SqlParameter("@ente", SqlDbType.VarChar)
            parms(1).Value = criteriRicerca.Ente

            parms(2) = New SqlParameter("@cod_Attributo", SqlDbType.VarChar)
            parms(2).Value = criteriRicerca.Cod_attributo


            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, delete_attributo, parms, -1)
            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante la cancellazione dell'attributo " & criteriRicerca.Cod_attributo & " del documento con id '" + criteriRicerca.Doc_id + "' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub
    Friend Sub VERIFICA_FIRMA_RIGETTO()
        Const SFunzione As String = "VERIFICA_FIRMA_RIGETTO"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        'serve la funzione get attributo ....
        If Not oOperatore.oUfficio.Test_Attributo("OBBLIGO_FIRMA_RIGETTO", "1") Then
            vRitPar(0) = 0
            vRitPar(1) = ""
            GoTo FineSub
        Else
            vRitPar(0) = 1
            vRitPar(1) = "Informazioni insufficienti sulla verifica della firma"
            GoTo FineSub
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Sqlq = "SELECT  Sto_Utente, Sto_TipoAttivita " & _
               " WHERE (Azioni_Utente_Documento.Sto_id_Doc = '" & objDocumento.Doc_id & "') " & _
               " AND (Azioni_Utente_Documento.Sto_Utente ='" & oOperatore.Codice & "')" & _
               " AND (Azioni_Utente_Documento.Sto_TipoAttivita = 'FIRMA')" & _
               " ORDER BY Sto_prog DESC"

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2
        vR = GDB.DBQuery(vP)
        If vR(0) <> 0 Then
            Errore = 1
            ErrDesc = "Manca la firma"
        End If
        vRitPar(0) = vR(0)
        vRitPar(1) = vR(1)
FineSub:
        On Error Resume Next
        Errore = vRitPar(0)
        ErrDesc = vRitPar(1)
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Sub


Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo FineSub
        ' Resume
    End Sub

    Friend Function operatoreCompetanzaDipartimento(ByVal codUfficioDestinazione As String, Optional ByVal flusso As String = "*") As String
        Const SFunzione As String = "operatoreCompetanzaDipartimento"
        Dim opRit As String
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim RS As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        On Error GoTo Herr

        opRit = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            opRit = ""
            GoTo FineSub
        End If

        Sqlq = "SELECT     TAB_Operatori_Attributi.TOA_Operatore " & _
               " FROM         Struttura INNER JOIN " & _
               "              TAB_Operatori_Attributi TAB_Operatori_Attributi ON " & _
               "              Struttura.Str_padre = TAB_Operatori_Attributi.Toa_Valore COLLATE Latin1_General_CI_AS INNER JOIN " & _
               "              Strutture_Operatori ON TAB_Operatori_Attributi.TOA_Operatore COLLATE Latin1_General_CI_AS = Strutture_Operatori.Sop_Operatore INNER JOIN " & _
               "              Documento ON Struttura.Str_id = Documento.Doc_Cod_Uff_Prop COLLATE Latin1_General_CI_AS " & _
               " WHERE     (TAB_Operatori_Attributi.TOA_Attributo = 'DIP_COMP') AND (TAB_Operatori_Attributi.TOA_Procedura = '" & flusso & "' OR TAB_Operatori_Attributi.TOA_Procedura = '*') AND " & _
               "           (Strutture_Operatori.Sop_Struttura = '" & codUfficioDestinazione & "') AND (Documento.Doc_Id = '" & idDocumento & "') ORDER BY TAB_Operatori_Attributi.TOA_Procedura DESC"
        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)

        If vR(0) <> 0 Then
            opRit = ""
            GoTo FineSub
        End If

        opRit = vR(1)(0, 0)
FineSub:
        operatoreCompetanzaDipartimento = opRit
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If
        On Error GoTo 0
        Exit Function

Herr:
        opRit = ""
        GoTo FineSub
        ' Resume
    End Function

    Friend Function operatoreCompetanzaUfficio(ByVal codUfficioDestinazione As String, Optional ByVal flusso As String = "*") As String
        Const SFunzione As String = "operatoreCompetanzaUfficio"
        Dim opRit As String
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim RS As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        On Error GoTo Herr

        opRit = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            opRit = ""
            GoTo FineSub
        End If

        Sqlq = "SELECT     TAB_Operatori_Attributi.TOA_Operatore " & _
               " FROM         Struttura INNER JOIN " & _
               "              TAB_Operatori_Attributi TAB_Operatori_Attributi ON " & _
               "              Struttura.Str_Id = TAB_Operatori_Attributi.Toa_Valore COLLATE Latin1_General_CI_AS INNER JOIN " & _
               "              Strutture_Operatori ON TAB_Operatori_Attributi.TOA_Operatore COLLATE Latin1_General_CI_AS = Strutture_Operatori.Sop_Operatore INNER JOIN " & _
               "              Documento ON Struttura.Str_id = Documento.Doc_Cod_Uff_Prop COLLATE Latin1_General_CI_AS " & _
               " WHERE     (TAB_Operatori_Attributi.TOA_Attributo = 'DIP_COMP') AND (TAB_Operatori_Attributi.TOA_Procedura = '" & flusso & "' OR TAB_Operatori_Attributi.TOA_Procedura = '*') AND " & _
               "           (Strutture_Operatori.Sop_Struttura = '" & codUfficioDestinazione & "') AND (Documento.Doc_Id = '" & idDocumento & "') ORDER BY TAB_Operatori_Attributi.TOA_Procedura DESC"
        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)

        If vR(0) <> 0 Then
            opRit = ""
            GoTo FineSub
        End If

        opRit = vR(1)(0, 0)
FineSub:
        operatoreCompetanzaUfficio = opRit
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If
        On Error GoTo 0
        Exit Function

Herr:
        opRit = ""
        GoTo FineSub
        ' Resume
    End Function

    Friend Sub INOLTRO_ALTRO_UFFICIO(ByVal ufficioDestinazione As DllAmbiente.Ufficio, Optional ByVal flusso As String = "*", Optional ByVal AzioneDaCompiere As String = "INOLTRO")
        Dim vR As Object = Nothing
        Dim assegnazioneArrivo As String
        Select Case AzioneDaCompiere
            Case "INOLTRO"
                assegnazioneArrivo = Trim(ufficioDestinazione.AssegnazioneArrivoDetermine)

                If assegnazioneArrivo = "" Then
                    assegnazioneArrivo = ufficioDestinazione.Attributo("AssegnazioneArrivoDetermine")
                End If

                If UCase(Trim(assegnazioneArrivo)) = "DEPOSITO" Then
                    pDirU = "D"
                    pProssimoAttore = ufficioDestinazione.CodUfficio
                    Exit Sub
                End If

                If UCase(Trim(assegnazioneArrivo)) = "COLL_DIP" Then

                    pProssimoAttore = operatoreCompetanzaUfficio(ufficioDestinazione.CodUfficio, flusso)
                    If pProssimoAttore = "" Then
                        pProssimoAttore = operatoreCompetanzaDipartimento(ufficioDestinazione.CodUfficio, flusso)
                    End If
                    If Trim(pProssimoAttore) <> "" Then
                        pDirU = "C"
                    Else
                        pDirU = "D"
                        pProssimoAttore = ufficioDestinazione.CodUfficio
                    End If
                    Exit Sub
                End If

                If UCase(Trim(assegnazioneArrivo)) = "SUPERVISORE" Then
                    Dim supUff As String = ""
                    pDirU = "S"
                    vR = ufficioDestinazione.SupervisoriUfficio("DETERMINE")

                    If Not vR Is Nothing Then
                        Dim en As IDictionaryEnumerator = vR.GetEnumerator
                        While (en.MoveNext())
                            supUff = DirectCast(en.Key, String)
                            Exit While
                        End While

                        If supUff <> "" Then
                            pDirU = "S"
                            pProssimoAttore = supUff
                            Exit Sub
                        End If
                    End If
                    Exit Sub
                End If

                If UCase(Trim(assegnazioneArrivo)) = "RESPONSABILE" Then
                    pDirU = "R"
                    pProssimoAttore = ufficioDestinazione.ResponsabileUfficio(flusso)
                    Exit Sub
                Else
                    pDirU = "D"
                    pProssimoAttore = ufficioDestinazione.CodUfficio
                    Exit Sub
                End If
            Case "ARCHIVIA"
                pDirU = "R"
                pProssimoAttore = Me.getUtenteArchivio()
            Case "RIGETTO"
                pDirU = "R"
                pProssimoAttore = ufficioDestinazione.ResponsabileUfficio(flusso)
            Case Else
                pDirU = "D"
                pProssimoAttore = ufficioDestinazione.CodUfficio
        End Select

    End Sub

    Private Sub Scarica_Messaggi(Optional ByVal destinatario As String = "")
        Const SFunzione As String = "Scarica_Messaggi"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object
        Dim RS As Object
        Dim vAvvisiOperatore(6) As Object

        Dim templateMessaggio As String
        Dim datiMessaggio As String
        Dim domDatiMessaggio As System.Xml.XmlDocument
        Dim rootDatiMessaggio As System.Xml.XmlNode
        Dim nodoDatiMessaggio As System.Xml.XmlNode

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        Log.Info("***INIZIO " & SFunzione & " - Destinatario: " & destinatario & " " & Now)


        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Call DB.BeginTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        Sqlq = " SELECT  Cmu_Mittente, Cmu_Destinatario, CONVERT(date, Cmu_Data_Notifica, 102) as Cmu_Data_Notifica, Cmu_Avvisato, " & _
               "  Cmu_Dati, Cmu_Id_Messaggio, Tms_Descrizione, Cmu_idMessaggio " & _
               "  FROM  Casella_Messaggi_Utente INNER JOIN " & _
               "  Tab_Messaggi ON Casella_Messaggi_Utente.Cmu_Id_Messaggio = Tab_Messaggi.Tms_ID " & _
               "  WHERE (Cmu_Avvisato = 0 )  AND (Cmu_Data_Notifica <= CONVERT(datetime, '" & Format(Now, "yyyy-MM-dd") & " 23:59:59', 102)) "

        Dim lstrAttConNote As String = "" & oOperatore.Attributo("MESSAGGI_CON_NOTE")

        If lstrAttConNote <> "" AndAlso CBool(lstrAttConNote) = True Then
            Sqlq = Sqlq & "  AND  (Cmu_Dati NOT LIKE '%<NOTE></NOTE>%') and Cmu_Mittente <> 'Sistema' "
        End If

        If destinatario <> "" Then
            Sqlq = Sqlq & " and ( Cmu_Destinatario = '" & destinatario & "' )   "
        End If

        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        While Not RS.EOF

            templateMessaggio = RS("Tms_Descrizione").value & ""
            datiMessaggio = RS("Cmu_Dati").value & ""

            domDatiMessaggio = New System.Xml.XmlDocument
            domDatiMessaggio.LoadXml(datiMessaggio)
            rootDatiMessaggio = domDatiMessaggio.FirstChild

            For Each nodoDatiMessaggio In rootDatiMessaggio.ChildNodes
                templateMessaggio = Replace(templateMessaggio, "%" & nodoDatiMessaggio.Name & "%", nodoDatiMessaggio.InnerText, , , CompareMethod.Text)
            Next

            vAvvisiOperatore(0) = RS("Cmu_idMessaggio").value
            vAvvisiOperatore(1) = RS("Cmu_Mittente").value
            vAvvisiOperatore(2) = RS("Cmu_Destinatario").value
            vAvvisiOperatore(3) = templateMessaggio
            vAvvisiOperatore(4) = RS("Cmu_Data_Notifica").value
            vAvvisiOperatore(5) = System.DBNull.Value
            vAvvisiOperatore(6) = 0
            DB.Registra_RS(0, "Messaggi", vAvvisiOperatore)
            'Lu 18/02 da passare su versione pulita
            If DB.errore <> 0 Then
                'vRitPar(0) = DB.errore
                'vRitPar(1) = DB.ErrDescr
                'GoTo RollTrans
                Log.Error("Errore insert messaggio id: " & RS("Cmu_idMessaggio").value & " " & SFunzione)
            Else
                RS("Cmu_Avvisato").value = 1

                Call DB.UpDateRS(RS)
                If DB.errore <> 0 Then
                    'vRitPar(0) = DB.errore
                    'vRitPar(1) = DB.ErrDescr
                    'GoTo RollTrans
                    Log.Error("Errore update Avvisato messaggio id: " & RS("Cmu_idMessaggio").value & " " & SFunzione)
                End If
            End If


            RS.movenext()
        End While


        Call DB.CommitTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If



FineSub:
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Log.Info(vRitPar(1) & SFunzione)
        End If
        Log.Info("***FINE " & SFunzione & " - Destinatario: " & destinatario & " " & Now)

        On Error GoTo 0
        Exit Sub

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Log.Error(DB.ErrDescr & SFunzione)
            End If
        End If
        GoTo FineSub
Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Log.Error(vRitPar(1) & " " & SFunzione)
        GoTo RollTrans
        ' Resume
    End Sub

    Public Function FO_Leggi_Allegato_Con_Parametri(Optional ByVal idDocumento As String = "", Optional ByVal idallegato As String = "", Optional ByVal codTipologia As String = "") As Object
        Dim vParm(DllDocumentale.Dic_FODocumentale.dimvc_Leggi_Allegato) As Object

        vParm(Dic_FODocumentale.vc_Leggi_Allegato.c_idDocumento) = idDocumento
        vParm(Dic_FODocumentale.vc_Leggi_Allegato.c_idAllegato) = idallegato
        vParm(Dic_FODocumentale.vc_Leggi_Allegato.c_tipologiaAllegato) = codTipologia
        vParm(Dic_FODocumentale.vc_Leggi_Allegato.c_p7m) = False


        Return FO_Leggi_Allegato(vParm)
    End Function
    Public Function FO_Leggi_Allegato(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Leggi_Allegato"
        Dim vRitPar(8) As Object
        Dim vRitSql As Object
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object
        Dim RS As Object

        Dim idAllegato As String
        Dim docP7m As Boolean

        Dim docTsr As Boolean
        Dim codTipologiaAllegato As String
        Dim bAllegato() As Byte
        Dim firmato As Boolean
        Dim bCertificato() As Byte

        On Error GoTo Herr


        idDocumento = vParm(Dic_FODocumentale.vc_Leggi_Allegato.c_idDocumento)
        idAllegato = vParm(Dic_FODocumentale.vc_Leggi_Allegato.c_idAllegato)
        codTipologiaAllegato = vParm(Dic_FODocumentale.vc_Leggi_Allegato.c_tipologiaAllegato)
        docP7m = vParm(Dic_FODocumentale.vc_Leggi_Allegato.c_p7m)
        docTsr = vParm(Dic_FODocumentale.vc_Leggi_Allegato.c_tsr)


        If Trim(idAllegato) = "" And codTipologiaAllegato = "" Then
            vRitPar(0) = 1
            vRitPar(1) = "Parametri insufficienti"
            GoTo FineSub
        End If

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If
        'LU 15/05 Aggiunti i campi per info documento per PDF
        If idAllegato = "" Then
            Sqlq = "SELECT     Allegati.All_Allegato, Allegati.All_nome, Tab_Estensione_Allegati.Tea_nomeEstensione, " & _
                                      " Tab_Tipo_Allegato.Tta_descBreve ,Tab_Estensione_Allegati.Tes_contentType , Allegati.All_firmato , isnull(Tes_scarica,1) as Tes_scarica, All_idAllegato, All_Documento " & _
                                      " FROM         Allegati INNER JOIN " & _
                                      "     Tab_Estensione_Allegati ON Allegati.All_estensione = Tab_Estensione_Allegati.Tea_codEstensione INNER JOIN " & _
                                      "     Tab_Tipo_Allegato ON Allegati.All_Tipo = Tab_Tipo_Allegato.Tta_tipoAllegato " & _
                                      " WHERE (Allegati.All_Tipo = " & codTipologiaAllegato & ") and   (All_Documento = '" & idDocumento & "')"
        Else
            Sqlq = "SELECT     Allegati.All_Allegato, Allegati.All_nome, Tab_Estensione_Allegati.Tea_nomeEstensione, " & _
                          " Tab_Tipo_Allegato.Tta_descBreve ,Tab_Estensione_Allegati.Tes_contentType , Allegati.All_firmato , isnull(Tes_scarica,1) as Tes_scarica, All_idAllegato, All_Documento " & _
                          " FROM         Allegati INNER JOIN " & _
                          "     Tab_Estensione_Allegati ON Allegati.All_estensione = Tab_Estensione_Allegati.Tea_codEstensione INNER JOIN " & _
                          "     Tab_Tipo_Allegato ON Allegati.All_Tipo = Tab_Tipo_Allegato.Tta_tipoAllegato " & _
                          " WHERE (All_idAllegato = '" & idAllegato & "')  "
        End If


        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaDynaset)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        If RS.EOF Then
            vRitPar(0) = 1
            vRitPar(1) = "Documento non trovato"
            GoTo FineSub
        End If

        bAllegato = RS.Fields("All_Allegato").GetChunk(RS.Fields("All_Allegato").ActualSize)

        firmato = RS.Fields("All_firmato").value


        If firmato AndAlso docP7m = False Then
            Dim cadesUtils As DigitalSignatureUtils.CAdESUtils = New DigitalSignatureUtils.CAdESUtils(bAllegato)
            bCertificato = cadesUtils.GetRawCertificates(0)
            bAllegato = cadesUtils.GetDocument()
        End If



        vRitPar(1) = bAllegato
        vRitPar(2) = RS("All_nome").value & ""

        If docP7m Then
            vRitPar(3) = "pdf.p7m"
            vRitPar(4) = "application/pkcs7-mime"
        ElseIf docTsr Then
            vRitPar(3) = "tsr"
            vRitPar(4) = "application/timestamp-reply"
        Else
            vRitPar(3) = RS("Tea_nomeEstensione").value & ""
            vRitPar(4) = RS("Tes_contentType").value & ""
        End If


        vRitPar(5) = bCertificato
        vRitPar(6) = RS("Tes_scarica").value & ""

        'modgg 04-08
        If Trim(idAllegato) = "" Then
            vRitPar(7) = RS("All_idAllegato").value & ""
        Else
            vRitPar(7) = idAllegato
        End If
        'LU 15/05 Aggiunti i campi per info documento per PDF
        vRitPar(8) = RS("All_Documento").value

FineSub:
        FO_Leggi_Allegato = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function


Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo FineSub
        ' Resume
    End Function

    'Aggiunta metodo per Conservazione 
    Public Function FO_Leggi_Allegato_Firma(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Leggi_Allegato_Firma"
        Dim vRitPar(8) As Object
        Dim vRitSql As Object
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object
        Dim RS As Object

        Dim idAllegato As String
        Dim docP7m As Boolean
        Dim codTipologiaAllegato As String
        Dim bAllegato() As Byte
        Dim firmato As Boolean
        Dim bCertificato() As Byte

        On Error GoTo Herr

        idDocumento = vParm(Dic_FODocumentale.vc_Leggi_Allegato.c_idDocumento)
        idAllegato = vParm(Dic_FODocumentale.vc_Leggi_Allegato.c_idAllegato)
        codTipologiaAllegato = vParm(Dic_FODocumentale.vc_Leggi_Allegato.c_tipologiaAllegato)
        docP7m = vParm(Dic_FODocumentale.vc_Leggi_Allegato.c_p7m)

        If Trim(idAllegato) = "" And codTipologiaAllegato = "" Then
            vRitPar(0) = 1
            vRitPar(1) = "Parametri insufficienti"
            GoTo FineSub
        End If

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If
        If idAllegato = "" Then
            Sqlq = "SELECT   TOP(1)  Allegati.All_Allegato, Allegati.All_nome, Tab_Estensione_Allegati.Tea_nomeEstensione, " & _
                                      " Tab_Tipo_Allegato.Tta_descBreve ,Tab_Estensione_Allegati.Tes_contentType , Allegati.All_firmato , isnull(Tes_scarica,1) as Tes_scarica, All_idAllegato, All_Documento " & _
                                      " FROM         Allegati INNER JOIN " & _
                                      "     Tab_Estensione_Allegati ON Allegati.All_estensione = Tab_Estensione_Allegati.Tea_codEstensione INNER JOIN " & _
                                      "     Tab_Tipo_Allegato ON Allegati.All_Tipo = Tab_Tipo_Allegato.Tta_tipoAllegato " & _
                                      " WHERE (Allegati.All_Tipo = " & codTipologiaAllegato & ") and   (All_Documento = '" & idDocumento & "') ORDER BY All_idAllegato DESC"
        End If

        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaDynaset)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        If RS.EOF Then
            vRitPar(0) = 1
            vRitPar(1) = "Documento non trovato"
            GoTo FineSub
        End If

        bAllegato = RS.Fields("All_Allegato").GetChunk(RS.Fields("All_Allegato").ActualSize)

        firmato = RS.Fields("All_firmato").value

        If firmato AndAlso docP7m = False Then
            Dim cadesUtils As DigitalSignatureUtils.CAdESUtils = New DigitalSignatureUtils.CAdESUtils(bAllegato)
            bCertificato = cadesUtils.GetRawCertificates(0)
            bAllegato = cadesUtils.GetDocument()
        End If

        vRitPar(1) = bAllegato
        vRitPar(2) = RS("All_nome").value & ""
        If docP7m Then
            vRitPar(3) = "pdf.p7m"
            vRitPar(4) = "application/pkcs7-mime"
        Else
            vRitPar(3) = RS("Tea_nomeEstensione").value & ""
            vRitPar(4) = RS("Tes_contentType").value & ""
        End If


        vRitPar(5) = bCertificato
        vRitPar(6) = RS("Tes_scarica").value & ""

        'modgg 04-08
        If Trim(idAllegato) = "" Then
            vRitPar(7) = RS("All_idAllegato").value & ""
        Else
            vRitPar(7) = idAllegato
        End If
        'LU 15/05 Aggiunti i campi per info documento per PDF
        vRitPar(8) = RS("All_Documento").value

FineSub:
        FO_Leggi_Allegato_Firma = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

Herr:
        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo FineSub
        ' Resume
    End Function


    Friend Sub ATTIVA_SCADENZA()
        'gestire il messaggio in casella dei messaggi per la scadenza
        Const SFunzione As String = "ATTIVA_SCADENZA"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim RS As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        Dim dataScadenza As DateTime
        Dim dataPreavviso As DateTime
        Dim giorniScadenza As Integer
        Dim giorniPreavviso As Integer
        Dim xmlParametri As New System.Xml.XmlDocument
        Dim xmlNodo As System.Xml.XmlElement
        Dim oAttore As DllAmbiente.Operatore

        On Error GoTo Herr
        vRitPar(0) = 0
        vRitPar(1) = ""

        If Trim(pParametriAttivita) = "" Then
            GoTo FineSub
        End If

        xmlParametri.LoadXml(pParametriAttivita)

        xmlNodo = xmlParametri.SelectSingleNode("/parametri/giorniscadenza")
        If Not xmlNodo Is Nothing Then
            giorniScadenza = CInt(xmlNodo.InnerText)
        End If
        xmlNodo = xmlParametri.SelectSingleNode("/parametri/giornipreavviso")
        If Not xmlNodo Is Nothing Then
            giorniPreavviso = CInt(xmlNodo.InnerText)
        End If

        If giorniScadenza = 0 Or giorniPreavviso = 0 Then
            GoTo FineSub
        End If

        dataScadenza = SommaGiorniLavorativi(Now.Date, giorniScadenza)
        dataPreavviso = SommaGiorniLavorativi(Now.Date, giorniPreavviso)

        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Call DB.BeginTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        oAttore = New DllAmbiente.Operatore
        oAttore.Codice = pProssimoAttore
        Dim strDestinatario As String = ""
        If oAttore.oUfficio.CodUfficio <> "" Then
            strDestinatario = oAttore.oUfficio.CodUfficio
        Else
            strDestinatario = pProssimoAttore
        End If

        Sqlq = "SELECT  Dsc_idDocumento,Dsc_ufficio, Dsc_scadenza, Dsc_preavviso, Dsc_evasa  " & _
               "  FROM Documenti_Scadenze " & _
               "  WHERE     (Dsc_idDocumento = '" & idDocumento & "') AND (Dsc_ufficio = '" & oOperatore.oUfficio.CodUfficio & "'  OR  Dsc_ufficio = '" & strDestinatario & "') " & _
               "            and (Dsc_scadenza = CONVERT(DATETIME, '" & Format(dataScadenza, "yyyy-MM-dd") & "',102))  "

        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        If RS.EOF Then
            Call DB.AddRS(RS)

            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
            RS("Dsc_idDocumento").value = idDocumento

            RS("Dsc_ufficio").value = strDestinatario

            'oAttore = New DllAmbiente.Operatore
            'oAttore.Codice = pProssimoAttore
            'If oAttore.oUfficio.CodUfficio <> "" Then
            '    RS("Dsc_ufficio").value = oAttore.oUfficio.CodUfficio
            'Else
            '    RS("Dsc_ufficio").value = pProssimoAttore
            'End If

            RS("Dsc_scadenza") = dataScadenza
        Else
            Call DB.EditRS(RS)
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If
        End If
        RS("Dsc_preavviso").value = dataPreavviso
        RS("Dsc_evasa").value = 0

        Call DB.UpdateRS(RS)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        Call DB.CommitTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        ' Call MESSAGGIO_INOLTRO(0, "sistema", , dataScadenza)

        vRitPar(0) = 0
        vRitPar(1) = ""

FineSub:
        On Error Resume Next
        Errore = vRitPar(0)
        ErrDesc = vRitPar(1)
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Sub

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Sub

    Friend Sub DISATTIVA_SCADENZA()
        Const SFunzione As String = "DISATTIVA_SCADENZA"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim RS As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        Dim codMessaggio As Integer
        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""
        'If SISTEMA.bTRACE Then
        '    Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        'End If

        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

        'Call DB.ApriDB()
        'If DB.errore <> 0 Then
        '    vRitPar(0) = DB.errore
        '    vRitPar(1) = DB.ErrDescr
        '    GoTo FineSub
        'End If

        'Call DB.BeginTrans()
        'If DB.errore <> 0 Then
        '    vRitPar(0) = DB.errore
        '    vRitPar(1) = DB.ErrDescr
        '    GoTo RollTrans
        'End If

        'Sqlq = "SELECT      Dsc_evasa, Dsc_data_evasione " & _
        '       "   FROM Documenti_Scadenze " & _
        '       " WHERE     (Dsc_idDocumento = '" & idDocumento & "') AND (Dsc_ufficio = '" & utente.oUfficio.CodUfficio & "')"

        'RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        'If DB.errore <> 0 Then
        '    vRitPar(0) = DB.errore
        '    vRitPar(1) = DB.ErrDescr
        '    GoTo RollTrans
        'End If

        'If Not RS.EOF Then
        '    RS.MoveFirst()
        '    While Not RS.EOF
        '        Call DB.EditRS(RS)
        '        If DB.errore <> 0 Then
        '            vRitPar(0) = DB.errore
        '            vRitPar(1) = DB.ErrDescr
        '            GoTo RollTrans
        '        End If

        '        RS("Dsc_evasa").value = "1"
        '        RS("Dsc_data_evasione").value = Now

        '        Call DB.UpdateRS(RS)
        '        If DB.errore <> 0 Then
        '            vRitPar(0) = DB.errore
        '            vRitPar(1) = DB.ErrDescr
        '            GoTo RollTrans
        '        End If
        '        RS.MoveNext()
        '    End While
        'End If

        'Call DB.ChiudiRS(RS)
        'If DB.errore <> 0 Then
        '    vRitPar(0) = DB.errore
        '    vRitPar(1) = DB.ErrDescr
        '    GoTo RollTrans
        'End If

        'Sqlq = "SELECT     Cmu_Avvisato " & _
        '       " FROM  Casella_Messaggi_Utente " & _
        '       " WHERE     (Cmu_iddocumento = '" & idDocumento & "') AND (Cmu_Id_Messaggio = 0) "

        'RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        'If DB.errore <> 0 Then
        '    vRitPar(0) = DB.errore
        '    vRitPar(1) = DB.ErrDescr
        '    GoTo RollTrans
        'End If

        'If Not RS.EOF Then
        '    RS.MoveFirst()
        '    While Not RS.EOF
        '        Call DB.EditRS(RS)
        '        If DB.errore <> 0 Then
        '            vRitPar(0) = DB.errore
        '            vRitPar(1) = DB.ErrDescr
        '            GoTo RollTrans
        '        End If

        '        RS("Cmu_Avvisato").value = "1"

        '        Call DB.UpdateRS(RS)
        '        If DB.errore <> 0 Then
        '            vRitPar(0) = DB.errore
        '            vRitPar(1) = DB.ErrDescr
        '            GoTo RollTrans
        '        End If
        '        RS.MoveNext()
        '    End While
        'End If

        'Call DB.ChiudiRS(RS)
        'If DB.errore <> 0 Then
        '    vRitPar(0) = DB.errore
        '    vRitPar(1) = DB.ErrDescr
        '    GoTo RollTrans
        'End If

        'Call DB.CommitTrans()
        'If DB.errore <> 0 Then
        '    vRitPar(0) = DB.errore
        '    vRitPar(1) = DB.ErrDescr
        '    GoTo RollTrans
        'End If

        vRitPar(0) = 0
        vRitPar(1) = ""

FineSub:
        On Error Resume Next
        Errore = vRitPar(0)
        ErrDesc = vRitPar(1)
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Sub

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Sub

    Friend Sub LETTERE_DOCUMENTI()
        'gestire il messaggio in casella dei messaggi per la scadenza
        Const SFunzione As String = "LETTERE_DOCUMENTI"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim RS As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        Dim tipoLettere As New ArrayList
        Dim i As Integer
        Dim xmlParametri As New System.Xml.XmlDocument
        Dim xmlNodo As System.Xml.XmlElement

        On Error GoTo Herr
        vRitPar(0) = 0
        vRitPar(1) = ""

        If Trim(pParametriAttivita) = "" Then
            GoTo FineSub
        End If

        xmlParametri.LoadXml(pParametriAttivita)

        For Each xmlNodo In xmlParametri.SelectNodes("/parametri/tipolettera")
            tipoLettere.Add(xmlNodo.InnerText)
        Next

        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Call DB.BeginTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        'rivedere la logica, quando ci sono ancora lettere non stampate dello stesso ufficio , 
        'per ora 'RS("Ltd_data").value = Now' dovrebbe creare sempre una chiave diversa
        Sqlq = "SELECT     Ltd_idDocumento, Ltd_ufficio, Ltd_tipoLettera , Ltd_stampata , Ltd_data " & _
               " FROM    Lettere_Documenti " & _
               " WHERE  (Ltd_ufficio = '" & oOperatore.oUfficio.CodUfficio & "' ) " & _
               "         and (Ltd_stampata = 0)  "


        RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        For i = 0 To tipoLettere.Count - 1
            Call DB.AddRS(RS)
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                GoTo RollTrans
            End If

            RS("Ltd_idDocumento").value = idDocumento
            RS("Ltd_ufficio").value = oOperatore.oUfficio.CodUfficio
            RS("Ltd_data").value = Now
            RS("Ltd_tipoLettera").value = tipoLettere(i)
            RS("Ltd_stampata").value = 0
        Next

        Call DB.UpdateRS(RS)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        Call DB.CommitTrans()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo RollTrans
        End If

        vRitPar(0) = 0
        vRitPar(1) = ""

FineSub:
        On Error Resume Next
        Errore = vRitPar(0)
        ErrDesc = vRitPar(1)
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Sub

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
            End If
        End If
        GoTo FineSub

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Sub

    Private Function SommaGiorniLavorativi(ByVal DataInizio As System.DateTime, ByVal giorni As Integer) As DateTime
        While giorni > 0
            DataInizio = DataInizio.AddDays(1)
            If DataInizio.DayOfWeek <> DayOfWeek.Saturday And DataInizio.DayOfWeek <> DayOfWeek.Sunday Then
                giorni = giorni - 1
            End If
        End While
        Return DataInizio
    End Function

    Private Function ContaGiorniLavorativi(ByVal DataInizio As System.DateTime, ByVal DataFine As System.DateTime) As Integer
        Dim giorni As Integer
        While DataInizio < DataFine
            DataInizio = DataInizio.AddDays(1)
            If Not (DataInizio.DayOfWeek = DayOfWeek.Saturday Or DataInizio.DayOfWeek = DayOfWeek.Sunday) Then
                giorni = giorni + 1
            End If
        End While
        Return IIf(giorni = 0, 1, giorni)
    End Function

    Private Function ListaUtenti_PerUfficio(ByVal c_ufficio As String, ByVal tipoDocumento As String) As String

        Dim lstr_stringUtenti As String = ""
        Dim vR As Object = Nothing
        Dim oUfficioDoc As DllAmbiente.Ufficio
        Dim vUtentiUfficio As Object = Nothing

        oUfficioDoc = New DllAmbiente.Ufficio
        If Trim(c_ufficio) & "" <> "" Then
            oUfficioDoc.CodUfficio = c_ufficio
        Else
            oUfficioDoc.CodUfficio = oOperatore.oUfficio.CodUfficio
        End If

        'devo interrogare il workflow per ogni utente dell'ufficio
        Select Case tipoDocumento
            Case 0
                If oOperatore.Test_Attributo("PRELAZIONE_SU", True) Then
                    vR = oUfficioDoc.UtentiUfficio("DETERMINE")
                    Exit Select
                End If
                If oOperatore.Test_Attributo("COMPITO_UFFICIO", "Printer") Then
                    vR = oUfficioDoc.UtentiUfficio("DETERMINE")
                    Exit Select
                End If
                If oOperatore.Test_Attributo("LIVELLO_UFFICIO", "Supervisore") Then

                    Dim vrOpBase As Hashtable = oOperatore.oUfficio.QuartoLivelloUfficio("DETERMINE")
                    vR = oUfficioDoc.CollaboratoriUfficio("DETERMINE")

                    If Not vrOpBase Is Nothing Then
                        For Each key As String In vrOpBase.Keys
                            If vR(key) Is Nothing Then
                                vR.Add(key, vrOpBase(key))
                            End If
                        Next
                    End If

                ElseIf oOperatore.Test_Attributo("LIVELLO_UFFICIO", "Responsabile") Then
                    vR = oUfficioDoc.UtentiUfficio("DETERMINE")
                    vR.Remove(oUfficioDoc.ResponsabileUfficio("DETERMINE"))
                End If
            Case 1
                If oOperatore.Test_Attributo("PRELAZIONE_SU", True) Then
                    vR = oUfficioDoc.UtentiUfficio("DELIBERE")
                    Exit Select
                End If
                If oOperatore.Test_Attributo("COMPITO_UFFICIO", "Printer") Then
                    vR = oUfficioDoc.UtentiUfficio("DELIBERE")
                    Exit Select
                End If
                If oOperatore.Test_Attributo("LIVELLO_UFFICIO", "Supervisore") Then
                    vR = oUfficioDoc.CollaboratoriUfficio("DELIBERE")
                    Dim vrOpBase As Hashtable = oOperatore.oUfficio.QuartoLivelloUfficio("DISPOSIZIONI")
                    If Not vrOpBase Is Nothing Then
                        For Each key As String In vrOpBase.Keys
                            If vR(key) Is Nothing Then
                                vR.Add(key, vrOpBase(key))
                            End If
                        Next
                    End If
                ElseIf oOperatore.Test_Attributo("LIVELLO_UFFICIO", "Responsabile") Then
                    vR = oUfficioDoc.UtentiUfficio("DELIBERE")
                    vR.Remove(oUfficioDoc.ResponsabileUfficio("DELIBERE"))
                End If
            Case 2
                If oOperatore.Test_Attributo("PRELAZIONE_SU", True) Then
                    vR = oUfficioDoc.UtentiUfficio("DISPOSIZIONI")
                    Exit Select
                End If
                If oOperatore.Test_Attributo("COMPITO_UFFICIO", "Printer") Then
                    vR = oUfficioDoc.UtentiUfficio("DISPOSIZIONI")
                    Exit Select
                End If
                If oOperatore.Test_Attributo("LIVELLO_UFFICIO", "Supervisore") Then
                    vR = oUfficioDoc.CollaboratoriUfficio("DISPOSIZIONI")
                    Dim vrOpBase As Hashtable = oUfficioDoc.QuartoLivelloUfficio("DISPOSIZIONI")
                    If Not vrOpBase Is Nothing Then
                        For Each key As String In vrOpBase.Keys
                            If vR(key) Is Nothing Then
                                vR.Add(key, vrOpBase(key))
                            End If
                        Next
                    End If
                ElseIf oOperatore.Test_Attributo("LIVELLO_UFFICIO", "Responsabile") Then
                    vR = oUfficioDoc.UtentiUfficio("DISPOSIZIONI")
                    vR.Remove(oUfficioDoc.ResponsabileUfficio("DISPOSIZIONI"))
                End If
        End Select

        If Not vR Is Nothing Then
            For Each value As String In DirectCast(vR, Hashtable).Keys
                lstr_stringUtenti = lstr_stringUtenti & "'" & value & "',"
            Next
        End If

        If lstr_stringUtenti.EndsWith(",") Then
            lstr_stringUtenti = lstr_stringUtenti.Substring(0, lstr_stringUtenti.Length - 1)
        End If

        If String.IsNullOrEmpty(lstr_stringUtenti) Then
            lstr_stringUtenti = "''"
        End If
        Return lstr_stringUtenti

    End Function
    Private Function QueryIstanze_Worklist_ConListaUtenti(ByVal tipoDocumento As String, ByVal listaOp As String) As String
        Dim sqlString As String = " SELECT [Stato_Istanza_Documento].[Doc_Id] " & _
                               " FROM [Stato_Istanza_Documento], [Documento] WHERE [Stato_Istanza_Documento].[Doc_Id] = [Documento].[Doc_Id] " & _
                               " AND [Documento].[Doc_Tipo] = '" & tipoDocumento & "' " & _
                               " AND [Stato_Istanza_Documento].[Ruolo] <> 'A' "


        If Not String.IsNullOrEmpty(listaOp) Then
            sqlString = sqlString & " AND [Stato_Istanza_Documento].[Operatore] in ( " & listaOp & ") "
        End If

        Return sqlString
    End Function
    'Friend Function FO_Aggiorna_Documento(ByVal numeroProtocollo As String, ByVal campoDaAggiornare As String, Optional ByVal avviaTransazione As Boolean = True, Optional ByVal DB As Object = Nothing) As Object
    Friend Function FO_Aggiorna_Documento(ByVal vparm As Object) As Object
        'ByVal numeroProtocollo As String, ByVal campoDaAggiornare As String, Optional ByVal avviaTransazione As Boolean = True, Optional ByVal DB As Object = Nothing) As Object
        Const SFunzione As String = "FO_Aggiorna_Documento"
        Dim vRitPar(3) As Object
        Dim Sqlq As String
        Dim DBLOG As Object = Nothing
        Dim RS As Object = Nothing
        Dim vR As Object = Nothing
        Dim vP(2) As Object

        Dim numeroProtocollo As String
        Dim campoDaAggiornare As String
        Dim avviaTransazione As Boolean
        Dim DB As Object = Nothing

        idDocumento = vparm(0)
        numeroProtocollo = vparm(1)
        campoDaAggiornare = vparm(2)
        If vparm(3) Is Nothing Then
            avviaTransazione = True
        Else
            avviaTransazione = vparm(3)
        End If

        If vparm(4) Is Nothing Then
            avviaTransazione = Nothing
        Else
            DB = vparm(4)
        End If

        Dim chiudereDB As Boolean = True
        If Not DB Is Nothing Then
            chiudereDB = False
        End If

        Try
            vRitPar(0) = 0
            vRitPar(1) = ""
            If SISTEMA.bTRACE Then
                Call SISTEMA.Registra_Trace("Inizio", SFunzione)
            End If

            If Trim(idDocumento) = "" Then
                vRitPar(0) = 1
                vRitPar(1) = "Parametri insufficienti"
                GoTo FineSub
            End If

            If DB Is Nothing Then
                VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
                'DB = SISTEMA.PROCDB.Item("DOCUMENTALE")
                Call DB.ApriDB()
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    GoTo FineSub
                End If
            End If

            VerificaSistema(SISTEMA, "DOCUMENTALE_LOG", DBLOG)
            'DBLOG = SISTEMA.PROCDB.Item("DOCUMENTALE_LOg")

            Call DBLOG.ApriDB()
            If DBLOG.errore <> 0 Then
                vRitPar(0) = DBLOG.errore
                vRitPar(1) = DBLOG.ErrDescr
                GoTo FineSub
            End If
            If avviaTransazione Then
                Call DB.BeginTrans()
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    If avviaTransazione Then
                        GoTo RollTrans
                    Else
                        GoTo FineSub
                    End If

                End If

            End If
            'modgg 10-06 3

            Sqlq = "SELECT     Doc_Id, " & campoDaAggiornare & _
                   " FROM         Documento " & _
                    " WHERE (Doc_Id = '" & idDocumento & "')"

            RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
            If DB.errore <> 0 Then
                vRitPar(0) = DB.errore
                vRitPar(1) = DB.ErrDescr
                If avviaTransazione Then
                    GoTo RollTrans
                Else
                    GoTo FineSub
                End If

            End If
            If Not RS.EOF Then
                DB.EditRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    If avviaTransazione Then
                        GoTo RollTrans
                    Else
                        GoTo FineSub
                    End If

                End If

                If Not numeroProtocollo Is Nothing Then
                    RS(campoDaAggiornare) = numeroProtocollo
                End If

                Call DB.UpdateRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    If avviaTransazione Then
                        GoTo RollTrans
                    Else
                        GoTo FineSub
                    End If

                End If

                vR = DB_Aggiungi_RSLOG(RS, DBLOG, "Log_Documento")
                If vR(0) <> 0 Then
                    vRitPar(0) = vR(0)
                    vRitPar(1) = vR(1)
                    If avviaTransazione Then
                        GoTo RollTrans
                    Else
                        GoTo FineSub
                    End If

                End If

                DB.ChiudiRS(RS)
                If DB.errore <> 0 Then
                    vRitPar(0) = DB.errore
                    vRitPar(1) = DB.ErrDescr
                    If avviaTransazione Then
                        GoTo RollTrans
                    Else
                        GoTo FineSub
                    End If

                End If
                If avviaTransazione Then
                    Call DB.CommitTrans()
                    If DB.errore <> 0 Then
                        vRitPar(0) = DB.errore
                        vRitPar(1) = DB.ErrDescr
                        GoTo RollTrans
                    End If
                End If

            End If

        Catch ex As Exception
            If avviaTransazione Then
                GoTo RollTrans
            Else
                GoTo FineSub
            End If

        End Try

FineSub:
        FO_Aggiorna_Documento = vRitPar
        If chiudereDB Then
            If Not DB Is Nothing Then
                Call DB.ChiudiDB()
                DB = Nothing
            End If
        End If
        If Not DBLOG Is Nothing Then
            Call DBLOG.ChiudiDB()
            DBLOG = Nothing
        End If


        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        Exit Function

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
            End If
        End If
        GoTo FineSub
    End Function
    Private Function SalvaSuArchivioAccess(ByVal xmlString As String, ByVal tipoDocumento As Integer, ByVal idComunicazione As String, ByVal codstr As String) As String
        Dim vRit, SqlString As String
        Dim Risultato(1) As Object
        Dim xmlDoc As New System.Xml.XmlDocument
        Dim precNomeTabella As String
        Dim nodoTemplateTabella, nodocolonna As System.Xml.XmlNode
        Dim nomeTabella As String
        Dim attributo As System.Xml.XmlAttribute
        Dim colonnaProgRegistrazioneTabella As String

        Dim anno As String = "null"
        Dim prg As String = "null"
        Dim tipo As String = "null"
        Dim numer As String = "null"




        Dim coddoc As String = "null"
        Dim oggetto As String = "null"
        Dim osserv1 As String = "null"
        Dim osserv2 As String = "null"
        Dim note As String = "null"
        Dim impegno As String = "0"

        Dim impnum1 As String = "null"

        Dim impcap1 As String = "null"
        Dim impcap2 As String = "null"
        Dim impcap3 As String = "null"

        Dim impeser1 As String = "null"
        Dim impeser2 As String = "null"
        Dim impeser3 As String = "null"

        Dim implire1 As String = "null"
        Dim implire2 As String = "null"
        Dim implire3 As String = "null"

        Dim liquidazione As String = "0"

        Dim liqcap1 As String = "null"
        Dim liqcap2 As String = "null"
        Dim liqcap3 As String = "null"

        Dim liqeser1 As String = "null"
        Dim liqeser2 As String = "null"
        Dim liqeser3 As String = "null"

        Dim liqlire1 As String = "null"
        Dim liqlire2 As String = "null"
        Dim liqlire3 As String = "null"

        Dim liqimp1 As String = "null"
        Dim liqimp2 As String = "null"
        Dim liqimp3 As String = "null"

        Dim liqanno1 As String = "null"
        Dim liqanno2 As String = "null"
        Dim liqanno3 As String = "null"

        Dim liqcodStr1 As String = "null"
        Dim liqcodStr2 As String = "null"
        Dim liqcodStr3 As String = "null"

        Dim liqnumDoc1 As String = "null"
        Dim liqnumDoc2 As String = "null"
        Dim liqnumDoc3 As String = "null"

        Dim liqtipoDoc1 As String = "null"
        Dim liqtipoDoc2 As String = "null"
        Dim liqtipoDoc3 As String = "null"

        Dim dataDoc1 As String = "null"
        Dim dataDoc2 As String = "null"
        Dim dataDoc3 As String = "null"

        Dim Docum1 As String = "null"
        Dim Docum2 As String = "null"
        Dim Docum3 As String = "null"

        Dim dataVc As String = "null"
        Dim dataBur As String = "null"
        Dim invioRag As String = "0"
        Dim BUResteso As String = "0"
        Dim nometabellaAccess As String = "null"

        If Trim(xmlString) <> "" Then
            xmlDoc.LoadXml(xmlString)
        End If

        'ciclo sulle tabelle lette
        precNomeTabella = ""
        For Each nodoTemplateTabella In xmlDoc.SelectNodes("/datiDocumento/tabella")
            nomeTabella = ""
            'individuo la tabella
            For Each attributo In nodoTemplateTabella.Attributes
                Select Case UCase(attributo.Name)
                    Case "NOME_TABELLA"
                        nomeTabella = attributo.Value
                    Case "COL_PROG_REGISTRAZIONE"
                        colonnaProgRegistrazioneTabella = attributo.Value
                End Select
            Next
            If Not xmlDoc.SelectSingleNode("datiDocumento/annoPrenotazione") Is Nothing Then
                impnum1 = xmlDoc.SelectSingleNode("datiDocumento/numeroPrenotazione").InnerText & "/" & (xmlDoc.SelectSingleNode("datiDocumento/annoPrenotazione").InnerText).Substring(2, 2)
            End If
            Dim progressivo As String
            For Each nodocolonna In xmlDoc.SelectSingleNode("/datiDocumento/tabella[@nome_tabella='" & nomeTabella & "']").ChildNodes
                progressivo = xmlDoc.SelectSingleNode("/datiDocumento/tabella[@nome_tabella='" & nomeTabella & "']/" & colonnaProgRegistrazioneTabella).InnerText

                Select Case UCase(nodocolonna.Name)
                    Case "DBI_BILANCIO"
                        Select Case progressivo
                            Case 1
                                impeser1 = nodocolonna.InnerText
                            Case 2
                                impeser2 = nodocolonna.InnerText
                            Case 3
                                impeser3 = nodocolonna.InnerText
                        End Select
                    Case "DBI_CAP"
                        Select Case progressivo
                            Case 1
                                impcap1 = nodocolonna.InnerText
                            Case 2
                                impcap2 = nodocolonna.InnerText
                            Case 3
                                impcap3 = nodocolonna.InnerText
                        End Select
                    Case "DBI_COSTO"
                        Select Case progressivo
                            Case 1
                                implire1 = (nodocolonna.InnerText).Replace(",", ".")
                                If implire1 <> "" Then
                                    impegno = "-1"
                                End If
                            Case 2
                                implire2 = (nodocolonna.InnerText).Replace(",", ".")
                            Case 3
                                implire3 = (nodocolonna.InnerText).Replace(",", ".")
                        End Select
                    Case "DLI_COSTO"
                        Select Case progressivo
                            Case 1
                                liqlire1 = (nodocolonna.InnerText).Replace(",", ".")
                                If liqlire1 <> "" Then
                                    liquidazione = "-1"
                                End If
                            Case 2
                                liqlire2 = (nodocolonna.InnerText).Replace(",", ".")
                            Case 3
                                liqlire3 = (nodocolonna.InnerText).Replace(",", ".")
                        End Select
                    Case "DLI_CAP"
                        Select Case progressivo
                            Case 1
                                liqcap1 = nodocolonna.InnerText
                            Case 2
                                liqcap2 = nodocolonna.InnerText
                            Case 3
                                liqcap3 = nodocolonna.InnerText
                        End Select
                    Case "DLI_NCONTABILE"
                        Select Case progressivo
                            Case 1
                                liqimp1 = nodocolonna.InnerText
                            Case 2
                                liqimp2 = nodocolonna.InnerText
                            Case 3
                                liqimp3 = nodocolonna.InnerText
                        End Select
                    Case "DLI_NUM_ASSUNZIONE"
                        Select Case progressivo
                            Case 1
                                liqnumDoc1 = nodocolonna.InnerText
                            Case 2
                                liqnumDoc2 = nodocolonna.InnerText
                            Case 3
                                liqnumDoc3 = nodocolonna.InnerText
                        End Select
                    Case "DLI_DATA_ASSUNZIONE"
                        Select Case progressivo
                            Case 1
                                liqanno1 = nodocolonna.InnerText
                                If nodocolonna.InnerText <> "" Then
                                    dataDoc1 = Year(CDate(nodocolonna.InnerText))
                                End If

                            Case 2
                                liqanno2 = nodocolonna.InnerText
                                If nodocolonna.InnerText <> "" Then
                                    dataDoc2 = Year(CDate(nodocolonna.InnerText))
                                End If
                            Case 3
                                liqanno3 = nodocolonna.InnerText
                                If nodocolonna.InnerText <> "" Then
                                    dataDoc3 = Year(CDate(nodocolonna.InnerText))
                                End If
                        End Select
                    Case "DLI_TIPOASSUNZIONE"
                        Select Case progressivo
                            Case 1
                                If nodocolonna.InnerText = 0 Then
                                    liqtipoDoc1 = "D"
                                Else
                                    liqtipoDoc1 = "L"
                                End If
                            Case 2
                                If nodocolonna.InnerText = 0 Then
                                    liqtipoDoc2 = "D"
                                Else
                                    liqtipoDoc2 = "L"
                                End If
                            Case 3
                                If nodocolonna.InnerText = 0 Then
                                    liqtipoDoc3 = "D"
                                Else
                                    liqtipoDoc3 = "L"
                                End If
                        End Select
                    Case "DLI_ESERCIZIO"
                        Select Case progressivo
                            Case 1
                                liqeser1 = nodocolonna.InnerText
                            Case 2
                                liqeser2 = nodocolonna.InnerText
                            Case 3
                                liqeser3 = nodocolonna.InnerText
                        End Select
                    Case "DNO_TESTO"
                        Select Case progressivo
                            Case 1
                                osserv1 = nodocolonna.InnerText
                            Case 2
                                osserv2 = nodocolonna.InnerText
                        End Select
                End Select

            Next
        Next
        If xmlDoc.SelectSingleNode("datiDocumento/tabella/Documento_rag_liquidazione") Is Nothing Then
            invioRag = "0"
            dataVc = Nothing
        Else
            invioRag = "-1"
            dataVc = xmlDoc.SelectSingleNode("datiDocumento/tabella/Documento_rag_liquidazione/DRL_Data").InnerText
        End If

        If xmlDoc.SelectSingleNode("/datiDocumento/oggetto") Is Nothing Then
            oggetto = Nothing
        Else
            oggetto = xmlDoc.SelectSingleNode("/datiDocumento/oggetto").InnerText
            oggetto = oggetto.Replace("'", "''")
        End If

        If (xmlDoc.SelectSingleNode("/datiDocumento/annoprogetto") Is Nothing) Then
            anno = Nothing
        Else
            anno = xmlDoc.SelectSingleNode("/datiDocumento/annoprogetto").InnerText
        End If

        If xmlDoc.SelectSingleNode("/datiDocumento/progetto") Is Nothing Then
            prg = Nothing
        Else
            prg = xmlDoc.SelectSingleNode("/datiDocumento/progetto").InnerText
        End If
        If xmlDoc.SelectSingleNode("/datiDocumento/tipoprogetto") Is Nothing Then
            tipo = Nothing
        Else
            tipo = xmlDoc.SelectSingleNode("/datiDocumento/tipoprogetto").InnerText
        End If
        Dim xmlResponse As String
        Dim messaggio As DataTypes.DetermineWs.Messaggio
        Try
            SqlString = "INSERT INTO %nometabellaAccess%" & _
              " (Anno, Prg, Tipo, Numer, CodStr, CodDoc, OGGETTO, Osserv_1, Osserv_2, [NOTE], IMPEGNO, ImpNum1, ImpCap1, " & _
              "ImpEser1, ImpLire1, ImpNum2, ImpCap2, ImpEser2, ImpLire2, ImpNum3, ImpCap3, ImpEser3, ImpLire3, Liquidazione, LiqCap1, LiqEser1, " & _
              "LiqLire1, LiqImp1, LiqCodStr1, Liq_Anno1, LiqTipoDoc1, LiqNumDoc1, DataDoc1, Docum1, LiqCap2, LiqEser2, LiqLire2, LiqImp2, LiqCodStr2, " & _
              "Liq_Anno2, LiqTipoDoc2, LiqNumDoc2, DataDoc2, Docum2, LiqCap3, LiqEser3, LiqLire3, LiqImp3, LiqCodStr3, Liq_Anno3, LiqTipoDoc3,LiqNumDoc3,  " & _
              "DataDoc3, Docum3, DataVC, DataBUR, InvioRag, BUResteso ) " & _
              "VALUES     ('" & anno & "','" & prg & "'," & tipo & ",%numeroCorretto%,'" & codstr & "','%codDoc%','" & oggetto & _
              "','" & osserv1 & "','" & osserv2 & "','" & note & "'," & impegno & ",'" & impnum1 & "','" & impcap1 & _
              "','" & impeser1 & "'," & implire1 & ",'" & impnum1 & "','" & impcap2 & "','" & impeser2 & "'," & implire2 & ",'" & impnum1 & _
              "','" & impcap3 & "','" & impeser3 & "'," & implire3 & "," & liquidazione & ",'" & liqcap1 & "','" & liqeser1 & _
              "'," & liqlire1 & ",'" & liqimp1 & "','" & liqcodStr1 & "','" & liqanno1 & "','" & liqtipoDoc1 & "','" & liqnumDoc1 & _
              "'," & dataDoc1 & "," & Docum1 & ",'" & liqcap2 & "','" & liqeser2 & "'," & liqlire2 & ",'" & liqimp2 & "','" & liqcodStr2 & _
              "','" & liqanno2 & "','" & liqtipoDoc2 & "','" & liqnumDoc2 & "'," & dataDoc2 & "," & Docum2 & ",'" & liqcap3 & "','" & liqeser3 & _
              "'," & liqlire3 & ",'" & liqimp3 & "','" & liqcodStr3 & "','" & liqanno3 & "','" & liqtipoDoc3 & "','" & liqnumDoc3 & _
              "'," & dataDoc3 & "," & Docum3 & "," & dataVc & "," & dataBur & "," & invioRag & "," & BUResteso & ")"

            SqlString = SqlString.Replace("'null'", "null")
            SqlString = SqlString.Replace("' null'", "null")
            SqlString = SqlString.Replace(",,", ",null,")
            SqlString = SqlString.Replace(",'',", ",null,")
            SqlString = SqlString.Replace("'',", "null,")
            SqlString = SqlString.Replace(",''", ",null")
            SqlString = SqlString.Replace("'' ", "null")
            SqlString = SqlString.Replace(", ,", ",null,")



            Dim vParametri(2) As Object
            Dim detWs As New Object
            Dim xmlMessage As String

            xmlMessage = DWSMessageMaker.createRegistrazioneMessage(tipoDocumento, SqlString, idComunicazione)
            xmlResponse = detWs.Elabora(xmlMessage)
            messaggio = DWSMessageMaker.DeserializeIt(xmlResponse)
            Dim risposta As DataTypes.DetermineWs.Risposta = messaggio.Item
            Dim registrazione As DataTypes.DetermineWs.RispostaRegistrazione = risposta.Item
            vRit = registrazione.NumeroRegistrazione

        Catch ex As Exception
            Dim eccezione As DataTypes.DetermineWs.Eccezione = messaggio.Item
            vRit = eccezione.Descrizione
        End Try
        'SqlString = Nothing
        'objSvrDllDetermine = Nothing

        SalvaSuArchivioAccess = vRit

    End Function
    Public Function hashToArray(ByVal tabellaHash As Hashtable) As Object
        Dim vettoreDati(1, tabellaHash.Count - 1) As Object
        Dim vettoreChiavi(tabellaHash.Count - 1) As Object
        tabellaHash.Keys.CopyTo(vettoreChiavi, 0)
        Dim j As Integer = 0
        For j = 0 To UBound(vettoreChiavi)
            If vettoreChiavi(j) <> Nothing Then
                vettoreDati(0, j) = vettoreChiavi(j)
                vettoreDati(1, j) = tabellaHash.Item(vettoreChiavi(j))
            End If
        Next
        Return vettoreDati
    End Function
    Friend Function Is_Contabile() As Object
        Const SFunzione As String = "Is_Contabile"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        Dim vRitIsContabile(Dic_FODocumentale.dimvc_isContabile) As Object

        On Error GoTo Herr

        vRitPar(0) = 0
        vRitPar(1) = ""

        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Sqlq = " SELECT Doc_isContabile From Documento WHERE ( Doc_Id = '" & idDocumento & "' ) "

        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)
        If vR(0) <> 0 Then
            vRitPar(0) = 1
            vRitPar(1) = vR(1)
            GoTo FineSub
        End If

        vRitPar(0) = 0
        vRitIsContabile(Dic_FODocumentale.vc_isContabile.c_isContabile) = IIf(vR(1)(0, 0) Is System.DBNull.Value, False, vR(1)(0, 0))

        vRitPar(1) = vRitIsContabile


FineSub:
        Is_Contabile = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo FineSub
        ' Resume
    End Function

    Friend Function VERIFICA_ULTIMA_AZIONE_UFFICIO(ByVal vparm As Object) As Object
        Dim vRitPar(3) As Object
        idDocumento = vparm(0)
        VERIFICA_ULTIMA_AZIONE_UFFICIO = VERIFICA_AZIONE_UFFICIO(vparm(1)(0), vparm(1)(1))
    End Function


    Public Function FO_Cancella_Allegato_Fisicamente(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Cancella_Allegato_Fisicamente"
        Dim vRitPar(7) As Object
        Dim vRitSql As Object
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object
        Dim RS As Object

        Dim idAllegato As String
        Dim idDocumentoLocale As String
        Dim codTipologiaAllegato As String
        Dim bAllegato() As Byte
        Dim firmato As Boolean
        Dim bCertificato() As Byte

        On Error GoTo Herr


        idDocumentoLocale = vParm(Dic_FODocumentale.vc_Cancella_Allegato_Fisicamente.c_idDocumento)
        idAllegato = vParm(Dic_FODocumentale.vc_Cancella_Allegato_Fisicamente.c_idAllegato)
        codTipologiaAllegato = vParm(Dic_FODocumentale.vc_Cancella_Allegato_Fisicamente.c_tipologiaAllegato)


        If Trim(idDocumentoLocale) = "" And Trim(idAllegato) = "" And codTipologiaAllegato = "" Then
            vRitPar(0) = 1
            vRitPar(1) = "Parametri insufficienti"
            GoTo FineSub
        End If

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If

        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

        Call DB.ApriDB()
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        If idAllegato = "" Then
            Sqlq = " DELETE FROM Allegati  " & _
                   " WHERE (All_Documento = '" & idDocumentoLocale & "')"
            If codTipologiaAllegato <> "" Then
                Sqlq = Sqlq & " AND (Allegati.All_Tipo = " & codTipologiaAllegato & ") "
            End If
        Else
            Sqlq = " DELETE FROM Allegati " & _
                   " WHERE (All_idAllegato = '" & idAllegato & "')"
        End If


        RS = DB.execute(Sqlq)
        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        vRitPar(0) = 0
        vRitPar(1) = ""
FineSub:
        FO_Cancella_Allegato_Fisicamente = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function


Herr:

        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo FineSub
        ' Resume
    End Function

    Friend Function FO_Lista_Firme_Documento(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Lista_Firme_Documento"
        Dim vRitPar(3) As Object
        Dim vRitSql As Object = Nothing
        Dim Sqlq As String
        Dim sWhere As String
        Dim DB As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing


        Dim idDocumento, idAllegato As String
        Dim UltimaVersioneAllegato As Boolean = False

        On Error GoTo Herr
        Dim listaUtenze() As Object
        idDocumento = vParm(Dic_FODocumentale.vc_ListaFirmeDoc.c_idDocumento)
        listaUtenze = vParm(Dic_FODocumentale.vc_ListaFirmeDoc.c_ListaUtenze)
        'Lui importare su 2008
        UltimaVersioneAllegato = vParm(Dic_FODocumentale.vc_ListaFirmeDoc.c_UltimaVersioneAllegato)
        If UltimaVersioneAllegato Then
            idAllegato = IdUltimaVersioneDocumento(idDocumento)
        End If

        vRitPar(0) = 0
        vRitPar(1) = ""
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
        End If


        VerificaSistema(SISTEMA, "DOCUMENTALE", DB)
        'DB = SISTEMA.PROCDB.Item("DOCUMENTALE")

        Call DB.ApriDB()


        If DB.errore <> 0 Then
            vRitPar(0) = DB.errore
            vRitPar(1) = DB.ErrDescr
            GoTo FineSub
        End If

        Dim whereUtenze As String = ""


        If IsArray(listaUtenze) Then
            For Each codutente As String In listaUtenze
                If whereUtenze = "" Then
                    whereUtenze = whereUtenze & " and ( Sto_Utente='" & codutente & "' "
                Else
                    whereUtenze = whereUtenze & " or Sto_Utente='" & codutente & "' "
                End If

            Next
            If whereUtenze <> "" Then
                whereUtenze = whereUtenze & " ) "
            End If

        End If
        If idAllegato <> "" Then
            whereUtenze = whereUtenze & " and Sto_Info_Attivita LIKE '" & idAllegato & "'"
        End If

        Sqlq = "Select  Sto_id_Doc, Sto_Prog, Sto_Utente, Sto_Ufficio, Sto_Data, Sto_TipoAttivita, Sto_Info_Attivita, Sto_attivita_corrente, Sto_idAllegato,isnull(Tab_Operatori.Op_Cognome,'') + ' ' + isnull(Tab_Operatori.Op_Nome,'')  " & _
        "FROM V_Azioni_Utente_Documento " & _
        " JOIN " & _
        " Tab_Operatori ON V_Azioni_Utente_Documento.Sto_Utente = Tab_Operatori.Op_Codice_Operatore " & _
        " WHERE     (Sto_TipoAttivita = 'FIRMA')  and Sto_id_Doc='" & idDocumento & "' " & whereUtenze & _
        " ORDER BY Sto_Prog DESC"


        vP(0) = DB
        vP(1) = Sqlq
        vP(2) = 2

        vR = GDB.DBQuery(vP)

        vRitPar(0) = vR(0)
        vRitPar(1) = vR(1)

FineSub:
        FO_Lista_Firme_Documento = vRitPar
        On Error Resume Next
        If Not DB Is Nothing Then
            Call DB.ChiudiDB()
            DB = Nothing
        End If

        If vRitPar(0) <> 0 Then
            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        End If
        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If
        On Error GoTo 0
        Exit Function

RollTrans:
        If Not DB Is Nothing Then
            Call DB.RollTrans()
            If DB.errore <> 0 Then
                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
            End If
        End If
        GoTo FineSub

Herr:
        vRitPar(0) = Err.Number
        vRitPar(1) = Err.Description
        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        GoTo RollTrans
        ' Resume
    End Function
    Friend Function IdUltimaVersioneDocumento(ByVal idDocumento As String) As String
        Const SFunzione As String = "IdUltimaVersioneDocumento"
        Dim vRitPar(3) As Object

        Dim Sqlq As String

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")



        Sqlq = " SELECT DISTINCT Sto_idAllegato  " & _
               " FROM Azioni_Utente_Documento  " & _
               " WHERE     (Sto_id_Doc = '" & idDocumento & "') AND (Sto_TipoAttivita = 'PRODDOC') AND (Sto_Prog =  " & _
               "                         (SELECT     MAX(Azioni_Utente_Documento_1.Sto_Prog) AS Sto_Prog  " & _
               "                           FROM          Azioni_Utente_Documento AS Azioni_Utente_Documento_1 INNER JOIN  " & _
               "                           Documento ON Azioni_Utente_Documento_1.Sto_id_Doc = Documento.Doc_Id AND   " & _
               "      Azioni_Utente_Documento_1.Sto_Ufficio = Documento.Doc_Cod_Uff_Prop  " & _
               "                         WHERE      (Azioni_Utente_Documento_1.Sto_id_Doc = '" & idDocumento & "') AND (Azioni_Utente_Documento_1.Sto_TipoAttivita = 'PRODDOC')))"


        Dim rdr As SqlClient.SqlDataReader

        rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)


        Try

            IdUltimaVersioneDocumento = 0
            While (rdr.Read())
                IdUltimaVersioneDocumento = rdr.GetString(0)
            End While
            rdr.Close()
        Catch ex As Exception
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            IdUltimaVersioneDocumento = 0
        End Try

        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        End If

    End Function
    ' Nuovo metodo che restitusce un TRUE se è stata caricata una nuova versione dell'atto, FALSE altrimenti.
    Public Function IsNuovaVersioneDocumento(ByVal idDocumento As String) As Boolean
        Dim Sqlq As String
        Dim numeroCaricamenti As Integer = 0

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")



        Sqlq = " SELECT count(*) " & _
               " FROM Azioni_Utente_Documento  " & _
               " WHERE     (Sto_id_Doc = '" & idDocumento & "') AND (Sto_TipoAttivita = 'PRODDOC') "


        Dim rdr As SqlClient.SqlDataReader
        rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)

        Try
            While (rdr.Read())
                numeroCaricamenti = rdr.GetInt32(0)
            End While
            rdr.Close()

            If numeroCaricamenti > 1 Then
                IsNuovaVersioneDocumento = True
            End If
        Catch ex As Exception
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            numeroCaricamenti = 0
            IsNuovaVersioneDocumento = False
        End Try

        If SISTEMA.bTRACE Then
            Call SISTEMA.Registra_Trace("Fine", "isNuovaVersioneDocumento")
        End If

    End Function
    'Public Function VERIFICA_FIRMA_UTENTE(ByVal iddocumento As String, ByVal utente As String) As Integer
    '    Const SFunzione As String = "VERIFICA_FIRMA_UTENTE"
    '    Dim vRitPar(3) As Object
    '    Dim Sqlq As String
    '    Dim vP(2) As Object

    '    Try
    '        Dim idVersione As String

    '        idVersione = IdUltimaVersioneDocumento(iddocumento)

    '        vRitPar(0) = 0
    '        vRitPar(1) = ""
    '        If SISTEMA.bTRACE Then
    '            Call SISTEMA.Registra_Trace("Inizio", SFunzione)
    '        End If

    '        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


    '        'Sqlq = "SELECT  Sto_TipoAttivita " & _
    '        ' " FROM Azioni_Utente_Documento " & _
    '        ' " WHERE     (Sto_id_Doc = '" & iddocumento & "') AND (Sto_Utente = '" & utente & "') " & _
    '        ' " AND (Sto_TipoAttivita = 'FIRMA') AND (Sto_Info_Attivita like '" & idVersione & "')"

    '        Sqlq = "SELECT  Sto_Prog " & _
    '        " FROM Azioni_Utente_Documento " & _
    '        " WHERE     (Sto_id_Doc = '" & iddocumento & "') AND (Sto_Utente = '" & utente & "') " & _
    '        " AND (Sto_TipoAttivita = 'FIRMA') AND (Sto_Info_Attivita like '" & idVersione & "') order by Sto_Prog Desc "



    '        Dim rdr As SqlClient.SqlDataReader

    '        Try

    '            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)

    '            VERIFICA_FIRMA_UTENTE = 0
    '            While rdr.Read()
    '                VERIFICA_FIRMA_UTENTE = rdr.GetInt32(0)
    '            End While
    '            rdr.Close()

    '        Catch ex As SqlClient.SqlException
    '            Err.Number = ex.Number
    '            Err.Description = ex.Message
    '            If Not rdr.IsClosed Then
    '                rdr.Close()
    '            End If
    '            rdr = Nothing
    '            VERIFICA_FIRMA_UTENTE = 0
    '        End Try

    '    Catch ex As Exception
    '        Err.Description = ex.Message
    '        VERIFICA_FIRMA_UTENTE = 0
    '    End Try

    '    If SISTEMA.bTRACE Then
    '        Call SISTEMA.Registra_Trace("Fine", SFunzione)
    '    End If

    'End Function


    Function FO_Get_DatiContabili(ByVal idDocumento As String) As Collections.Generic.List(Of ItemContabileInfo)
        '   Dim listaRagLiq As IList = FO_Get_DatiRagLiquidazione()
        Dim listaLiq As IList = FO_Get_DatiLiquidazione()
        Dim listaBil As IList = FO_Get_DatiImpegni()
        '   Dim listaRagAssunz As IList = FO_Get_DatiRagAssunzioni()

        Dim lista As New Generic.List(Of ItemContabileInfo)
        Dim con As New ItemContabileInfo



        For i As Integer = 0 To 10
            con = New ItemContabileInfo
            con.Dli_prog = i

            lista.Add(con)
        Next



        Return lista
    End Function


    Function FO_Get_DatiLiquidazioneConNumPreimp(ByVal idDocumento As String, Optional ByVal flagCaricaListaBeneficiari As Boolean = False) As Collections.Generic.List(Of ItemLiquidazioneInfo)
        Dim lista As New Generic.List(Of ItemLiquidazioneInfo)
        Dim con As New ItemLiquidazioneInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT     [Dli_Documento] ,[Dli_prog],[Dli_DataRegistrazione],[Dli_Operatore] ,[Dli_Esercizio] ,[Dli_UPB] ,[Dli_Cap] , " & _
        " [Dli_Costo]  ,[Dli_NumImpegno] ,[Dli_TipoAssunzione] ,[Dli_Num_assunzione],[Dli_Data_Assunzione],[Dli_Anno],  [Dli_NPreImpegno], " & _
        " [Dli_NLiquidazione] ,[Dli_ContoEconomica],[Dli_ImportoIva],[Dli_POR],[Dli_AllegatoPor],[Dli_Stato], [Dli_MissioneProgramma] " & _
        " FROM Documento_liquidazione "


        Sqlq = Sqlq & " where [Dli_Stato] <>0 "
        Dim param(0) As SqlClient.SqlParameter


        Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
        par.Value = idDocumento
        param(0) = par
        Sqlq = Sqlq & " and  Dli_Documento = " & Dic_FODocumentale.param_id_Documento

        Sqlq = Sqlq & " and  ((NOT (Dli_NPreImpegno IS NULL)) or ( Dli_NPreImpegno <>'') ) and ( Dli_NumImpegno='0' or Dli_NumImpegno='' or Dli_NumImpegno is null  )"

        Sqlq = Sqlq & " Order By Dli_Documento,Dli_prog"



        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemLiquidazioneInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Dli_NumImpegno = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.Dli_TipoAssunzione = rdr.GetInt32(9)
                If Not rdr.IsDBNull(10) Then con.Dli_Num_assunzione = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then con.Dli_Data_Assunzione = FormatDateTime(rdr.GetDateTime(11), DateFormat.LongDate)
                If Not rdr.IsDBNull(12) Then con.Dli_Anno = "" & rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then con.Dli_NPreImpegno = "" & rdr.GetString(13)

                If Not rdr.IsDBNull(14) Then con.Dli_NLiquidazione = "" & rdr.GetInt64(14)

                If Not rdr.IsDBNull(15) Then con.Di_ContoEconomica = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then con.Dli_ImportoIva = rdr.GetDecimal(16)
                If Not rdr.IsDBNull(17) Then con.Dli_Por = rdr.GetInt16(17)
                If Not rdr.IsDBNull(18) Then con.Dli_Allegato = CType(rdr.GetValue(18), Byte())
                If Not rdr.IsDBNull(19) Then con.Di_Stato = rdr.GetInt32(19)
                If Not rdr.IsDBNull(20) Then con.Dli_MissioneProgramma = rdr.GetString(20)
                If flagCaricaListaBeneficiari Then
                    con.ListaBeneficiari = FO_Get_ListaBeneficiariLiquidazione(oOperatore, con.Dli_Documento, con.Dli_NLiquidazione)
                End If

                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing

        End Try




        Return lista
    End Function

    Function FO_Get_DatiLiquidazioneDaPerentiConNumPreimp(ByVal idDocumento As String, Optional ByVal flagCaricaListaBeneficiari As Boolean = False) As Collections.Generic.List(Of ItemLiquidazioneInfo)
        Dim lista As New Generic.List(Of ItemLiquidazioneInfo)
        Dim con As New ItemLiquidazioneInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT   distinct  [Dli_Documento] ,[Dli_prog],[Dli_DataRegistrazione],[Dli_Operatore] ,[Dli_Esercizio] ,[Dli_UPB] ,[Dli_Cap] , " & _
        " [Dli_Costo]  ,[Dli_NumImpegno] ,[Dli_TipoAssunzione] ,[Dli_Num_assunzione],[Dli_Data_Assunzione],[Dli_Anno],  [Dli_NPreImpegno], " & _
        " [Dli_NLiquidazione] ,[Dli_ContoEconomica],[Dli_ImportoIva],[Dli_POR],[Dli_Stato], [Dli_MissioneProgramma], [Dli_PCF], " & _
        " [Documento_liquidazione].[HashTokenCallSic], [Documento_liquidazione].[IdDocContabileSic] " & _
        " FROM Documento_liquidazione " & _
 "       INNER Join " & _
                      " Documento_impegno ON Documento_liquidazione.Dli_NPreImpegno = Documento_impegno.Di_NPreImpegno  AND Documento_impegno.Di_Documento =  " & Dic_FODocumentale.param_id_Documento & " " & _
 " WHERE     (NOT (Documento_impegno.Di_NDocPrecedente IS NULL) AND (Documento_impegno.Di_NDocPrecedente <> ''))"


        Sqlq = Sqlq & " and [Dli_Stato] <> 0 "
        Dim param(0) As SqlClient.SqlParameter


        Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
        par.Value = idDocumento
        param(0) = par
        Sqlq = Sqlq & " and  Dli_Documento = " & Dic_FODocumentale.param_id_Documento

        Sqlq = Sqlq & " and  (NOT (Dli_NPreImpegno IS NULL) or ( Dli_NPreImpegno <>'') ) and ( Dli_NumImpegno='0' or Dli_NumImpegno='' or Dli_NumImpegno is null  )"

        Sqlq = Sqlq & " Order By Dli_Documento,Dli_prog"



        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemLiquidazioneInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Dli_NumImpegno = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.Dli_TipoAssunzione = rdr.GetInt32(9)
                If Not rdr.IsDBNull(10) Then con.Dli_Num_assunzione = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then con.Dli_Data_Assunzione = FormatDateTime(rdr.GetDateTime(11), DateFormat.LongDate)
                If Not rdr.IsDBNull(12) Then con.Dli_Anno = "" & rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then con.Dli_NPreImpegno = "" & rdr.GetString(13)

                If Not rdr.IsDBNull(14) Then con.Dli_NLiquidazione = "" & rdr.GetInt64(14)

                If Not rdr.IsDBNull(15) Then con.Di_ContoEconomica = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then con.Dli_ImportoIva = rdr.GetDecimal(16)
                If Not rdr.IsDBNull(17) Then con.Dli_Por = rdr.GetInt16(17)
                ' If Not rdr.IsDBNull(18) Then con.Dli_Allegato = CType(rdr.GetValue(18), Byte())
                If Not rdr.IsDBNull(18) Then con.Di_Stato = rdr.GetInt32(18)
                If Not rdr.IsDBNull(19) Then con.Dli_MissioneProgramma = rdr.GetString(19)
                If Not rdr.IsDBNull(20) Then con.Dli_PianoDeiContiFinanziari = rdr.GetString(20)
                If Not rdr.IsDBNull(21) Then con.HashTokenCallSic = rdr.GetString(21)
                If Not rdr.IsDBNull(22) Then con.IdDocContabileSic = rdr.GetString(22)
                If flagCaricaListaBeneficiari Then
                    con.ListaBeneficiari = FO_Get_ListaBeneficiariLiquidazione(oOperatore, con.Dli_Documento, con.Dli_NLiquidazione)
                End If

                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing

        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function


    Function FO_Get_DatiLiquidazioneConNumPreimpNonPerenti(ByVal idDocumento As String, Optional ByVal flagCaricaListaBeneficiari As Boolean = False) As Collections.Generic.List(Of ItemLiquidazioneInfo)
        Dim lista As New Generic.List(Of ItemLiquidazioneInfo)
        Dim con As New ItemLiquidazioneInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT DISTINCT    [Dli_Documento] ,[Dli_prog],[Dli_DataRegistrazione],[Dli_Operatore] ,[Dli_Esercizio] ,[Dli_UPB] ,[Dli_Cap] , " & _
        " [Dli_Costo]  ,[Dli_NumImpegno] ,[Dli_TipoAssunzione] ,[Dli_Num_assunzione],[Dli_Data_Assunzione],[Dli_Anno],  [Dli_NPreImpegno], " & _
        " [Dli_NLiquidazione] ,[Dli_ContoEconomica],[Dli_ImportoIva],[Dli_POR], [Dli_Stato], [Dli_IdImpegno], [Dli_MissioneProgramma], [Dli_PCF], " & _
        " [Documento_liquidazione].[HashTokenCallSic], [Documento_liquidazione].[IdDocContabileSic] " & _
        " FROM Documento_liquidazione " & _
 "       INNER Join " & _
                      " Documento_impegno ON Documento_liquidazione.Dli_NPreImpegno = Documento_impegno.Di_NPreImpegno AND Documento_impegno.Di_Documento =  " & Dic_FODocumentale.param_id_Documento & " " & _
 " WHERE     ( (Documento_impegno.Di_NDocPrecedente IS NULL) OR (Documento_impegno.Di_NDocPrecedente = ''))"


        Sqlq = Sqlq & " and [Dli_Stato] <> 0 "
        Dim param(0) As SqlClient.SqlParameter


        Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
        par.Value = idDocumento
        param(0) = par
        Sqlq = Sqlq & " and  Dli_Documento = " & Dic_FODocumentale.param_id_Documento

        Sqlq = Sqlq & " and  ( NOT (Dli_NPreImpegno IS NULL) or ( Dli_NPreImpegno <>'') ) and ( Dli_NumImpegno='0' or Dli_NumImpegno='' or Dli_NumImpegno is null  )"

        Sqlq = Sqlq & " Order By Dli_Documento,Dli_prog"



        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemLiquidazioneInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Dli_NumImpegno = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.Dli_TipoAssunzione = rdr.GetInt32(9)
                If Not rdr.IsDBNull(10) Then con.Dli_Num_assunzione = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then con.Dli_Data_Assunzione = FormatDateTime(rdr.GetDateTime(11), DateFormat.LongDate)
                If Not rdr.IsDBNull(12) Then con.Dli_Anno = "" & rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then con.Dli_NPreImpegno = "" & rdr.GetString(13)

                If Not rdr.IsDBNull(14) Then con.Dli_NLiquidazione = "" & rdr.GetInt64(14)

                If Not rdr.IsDBNull(15) Then con.Di_ContoEconomica = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then con.Dli_ImportoIva = rdr.GetDecimal(16)
                If Not rdr.IsDBNull(17) Then con.Dli_Por = rdr.GetInt16(17)
                If Not rdr.IsDBNull(18) Then con.Di_Stato = rdr.GetInt32(18)
                If Not rdr.IsDBNull(19) Then con.Dli_IdImpegno = rdr.GetInt64(19)
                If Not rdr.IsDBNull(20) Then con.Dli_MissioneProgramma = rdr.GetString(20)
                If Not rdr.IsDBNull(21) Then con.Dli_PianoDeiContiFinanziari = rdr.GetString(21)
                If Not rdr.IsDBNull(22) Then con.HashTokenCallSic = rdr.GetString(22)
                If Not rdr.IsDBNull(23) Then con.IdDocContabileSic = rdr.GetString(23)
                If flagCaricaListaBeneficiari Then
                    con.ListaBeneficiari = FO_Get_ListaBeneficiariLiquidazione(oOperatore, con.Dli_Documento, con.Dli_NLiquidazione)
                End If

                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function


    Function FO_Get_DatiLiquidazioneConNumImp(ByVal idDocumento As String, Optional ByVal flagCaricaListaBeneficiari As Boolean = False) As Collections.Generic.List(Of ItemLiquidazioneInfo)
        Dim lista As New Generic.List(Of ItemLiquidazioneInfo)
        Dim con As New ItemLiquidazioneInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT     [Dli_Documento] ,[Dli_prog],[Dli_DataRegistrazione],[Dli_Operatore] ,[Dli_Esercizio] ,[Dli_UPB] ,[Dli_Cap] , " & _
        " [Dli_Costo]  ,[Dli_NumImpegno] ,[Dli_TipoAssunzione] ,[Dli_Num_assunzione],[Dli_Data_Assunzione],[Dli_Anno],  [Dli_NPreImpegno], " & _
        " [Dli_NLiquidazione] ,[Dli_ContoEconomica],[Dli_ImportoIva],[Dli_POR],[Dli_AllegatoPor],[Dli_Stato],[Dli_IdImpegno],[Dli_MissioneProgramma], [Dli_PCF]  " & _
        " FROM Documento_liquidazione "


        Sqlq = Sqlq & " where [Dli_Stato] <> 0 "
        Dim param(0) As SqlClient.SqlParameter


        Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
        par.Value = idDocumento
        param(0) = par
        Sqlq = Sqlq & " and  Dli_Documento = " & Dic_FODocumentale.param_id_Documento

        Sqlq = Sqlq & " and  (NOT (Dli_NumImpegno IS NULL))  and Dli_NumImpegno <>''  and Dli_NumImpegno <> '0' "

        Sqlq = Sqlq & " Order By Dli_Documento,Dli_prog"



        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemLiquidazioneInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Dli_NumImpegno = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.Dli_TipoAssunzione = rdr.GetInt32(9)
                If Not rdr.IsDBNull(10) Then con.Dli_Num_assunzione = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then con.Dli_Data_Assunzione = FormatDateTime(rdr.GetDateTime(11), DateFormat.LongDate)
                If Not rdr.IsDBNull(12) Then con.Dli_Anno = "" & rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then con.Dli_NPreImpegno = "" & rdr.GetString(13)

                If Not rdr.IsDBNull(14) Then con.Dli_NLiquidazione = "" & rdr.GetInt64(14)

                If Not rdr.IsDBNull(15) Then con.Di_ContoEconomica = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then con.Dli_ImportoIva = rdr.GetDecimal(16)
                If Not rdr.IsDBNull(17) Then con.Dli_Por = rdr.GetInt16(17)
                If Not rdr.IsDBNull(18) Then con.Dli_Allegato = CType(rdr.GetValue(18), Byte())

                If Not rdr.IsDBNull(19) Then con.Di_Stato = rdr.GetInt32(19)
                If Not rdr.IsDBNull(20) Then con.Dli_IdImpegno = "" & rdr.GetInt64(20)
                If Not rdr.IsDBNull(21) Then con.Dli_MissioneProgramma = rdr.GetString(21)
                If Not rdr.IsDBNull(22) Then con.Dli_PianoDeiContiFinanziari = rdr.GetString(22)

                If flagCaricaListaBeneficiari Then
                    con.ListaBeneficiari = FO_Get_ListaBeneficiariLiquidazione(oOperatore, con.Dli_Documento, con.Dli_NLiquidazione)
                End If
                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function


    Function FO_Get_DatiLiquidazione(Optional ByVal idDocumento As String = "", Optional ByVal prog As Long = 0, Optional ByVal numPreImp As String = "", Optional ByVal flagCaricaListaBeneficiari As Boolean = False) As Collections.Generic.List(Of ItemLiquidazioneInfo)
        Dim lista As New Generic.List(Of ItemLiquidazioneInfo)
        Dim con As New ItemLiquidazioneInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT     [Dli_Documento] ,[Dli_prog],[Dli_DataRegistrazione],[Dli_Operatore] ,[Dli_Esercizio] ,[Dli_UPB] ,[Dli_Cap] , " & _
        " [Dli_Costo]  ,[Dli_NumImpegno] ,[Dli_TipoAssunzione] ,[Dli_Num_assunzione],[Dli_Data_Assunzione],[Dli_Anno],  [Dli_NPreImpegno], " & _
        " CASE WHEN [Dli_Stato]=0 THEN 0 ELSE  [Dli_NLiquidazione] END as [Dli_NLiquidazione], " & _
        " [Dli_ContoEconomica],[Dli_ImportoIva],[Dli_POR],[Dli_AllegatoPor],[Dli_Stato],[Dli_IdImpegno], [Dli_MissioneProgramma], [Dli_PCF],  " & _
        " [HashTokenCallSic], [IdDocContabileSic] " & _
        " FROM Documento_liquidazione "


        'Sqlq = Sqlq & " where [Dli_Stato] = 1 "
        Dim param() As SqlClient.SqlParameter
        Dim contaParam As Integer = 0
        If idDocumento <> "" Then
            ReDim Preserve param(contaParam)
            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
            par.Value = idDocumento
            param(contaParam) = par
            If Sqlq.Contains("where ") Then
                Sqlq = Sqlq & " and Dli_Documento = " & Dic_FODocumentale.param_id_Documento
            Else
                Sqlq = Sqlq & " where Dli_Documento = " & Dic_FODocumentale.param_id_Documento
            End If
            contaParam = contaParam + 1
        End If

        If prog > 0 Then

            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_Prog_Contabilita, SqlDbType.BigInt)
            par.Value = prog

            ReDim Preserve param(contaParam)
            param(contaParam) = par
            If Sqlq.Contains("where ") Then
                Sqlq = Sqlq & " and Dli_prog = " & Dic_FODocumentale.param_Prog_Contabilita
            Else
                Sqlq = Sqlq & " where Dli_prog = " & Dic_FODocumentale.param_Prog_Contabilita
            End If
            contaParam = contaParam + 1
        End If

        If Not String.IsNullOrEmpty(numPreImp) Then
            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_NPreImp, SqlDbType.VarChar)
            par.Value = numPreImp


            ReDim Preserve param(contaParam)
            param(contaParam) = par
            If Sqlq.Contains("where ") Then
                Sqlq = Sqlq & " and Dli_NPreImpegno = " & Dic_FODocumentale.param_NPreImp
            Else
                Sqlq = Sqlq & " where Dli_NPreImpegno = " & Dic_FODocumentale.param_NPreImp
            End If
            contaParam = contaParam + 1

        End If
        Sqlq = Sqlq & " Order By Dli_Documento,Dli_prog"



        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemLiquidazioneInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Dli_NumImpegno = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.Dli_TipoAssunzione = rdr.GetInt32(9)
                If Not rdr.IsDBNull(10) Then con.Dli_Num_assunzione = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then con.Dli_Data_Assunzione = FormatDateTime(rdr.GetDateTime(11), DateFormat.LongDate)
                If Not rdr.IsDBNull(12) Then con.Dli_Anno = "" & rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then con.Dli_NPreImpegno = "" & rdr.GetString(13)

                If Not rdr.IsDBNull(14) Then con.Dli_NLiquidazione = rdr.GetInt64(14)

                If Not rdr.IsDBNull(15) Then con.Di_ContoEconomica = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then con.Dli_ImportoIva = rdr.GetDecimal(16)
                If Not rdr.IsDBNull(17) Then con.Dli_Por = rdr.GetInt16(17)
                If Not rdr.IsDBNull(18) Then con.Dli_Allegato = CType(rdr.GetValue(18), Byte())
                If Not rdr.IsDBNull(19) Then con.Di_Stato = rdr.GetInt32(19)
                If Not rdr.IsDBNull(20) Then con.Dli_IdImpegno = rdr.GetInt64(20)
                If Not rdr.IsDBNull(21) Then con.Dli_MissioneProgramma = rdr.GetString(21)
                If Not rdr.IsDBNull(22) Then con.Dli_PianoDeiContiFinanziari = rdr.GetString(22)
                If Not rdr.IsDBNull(23) Then con.HashTokenCallSic = rdr.GetString(23)
                If Not rdr.IsDBNull(24) Then con.IdDocContabileSic = rdr.GetString(24)

                If flagCaricaListaBeneficiari Then
                    con.ListaBeneficiari = FO_Get_ListaBeneficiariLiquidazione(oOperatore, con.Dli_Documento, con.Dli_NLiquidazione)
                End If
                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function



    Function FO_Get_ReportAttiTotaliEnte(Optional ByVal anno As String = "", Optional ByVal numAnni As Integer = 0, Optional ByVal dataDa As String = "", Optional ByVal dataA As String = "", Optional ByVal listaRecordDetermne As DllDocumentale.ItemReportAtti = Nothing) As Collections.Generic.List(Of ItemReportAtti)
        Dim lista As New Generic.List(Of ItemReportAtti)
        Dim itemReport As New ItemReportAtti

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "select (ISNULL(a.TotDet,  0) + ISNULL(b.TotDisp, 0) ) as totale, ISNULL(a.TotDet,  0), ISNULL(a.Str_codiceUtente, ''), ISNULL(a.Str_descrBreve,''), " & _
                " ISNULL(b.TotDisp, 0), ISNULL(b.Str_codiceUtente, ''), ISNULL(b.Str_descrBreve, '')    " & _
                " from  ( " & _
                " SELECT     COUNT(*) AS TotDet, Struttura_1.Str_codiceUtente, Struttura_1.Str_descrBreve " & _
                " FROM         Documento INNER JOIN  Struttura ON Documento.Doc_Cod_Uff_Prop = Struttura.Str_id " & _
                " INNER JOIN  Struttura AS Struttura_1 ON Struttura.Str_padre = Struttura_1.Str_id "



        Dim param() As SqlClient.SqlParameter
        Dim contaParam As Integer = 0
        Dim tipoAtto As String = "D"

        If anno <> "" And tipoAtto <> "" Then
            Dim nextAnno As Integer = anno + 1
            Sqlq = Sqlq & " where (Documento.Doc_numero LIKE '%" & anno & "/" & tipoAtto & "%'"
            For i As Integer = 0 To numAnni - 1

                Sqlq = Sqlq & " OR Documento.Doc_numero LIKE '%" & (nextAnno).ToString & "/" & tipoAtto & "%'"
                nextAnno = nextAnno + 1
            Next
            Sqlq = Sqlq & " )"
        End If

        If dataDa <> "" And dataA <> "" Then

            Dim par As New SqlClient.SqlParameter("@dataDa2", SqlDbType.Date)
            par.Value = dataDa
            ReDim Preserve param(contaParam)
            param(contaParam) = par
            contaParam = contaParam + 1

            Dim parA As New SqlClient.SqlParameter("@dataA2", SqlDbType.Date)
            parA.Value = dataA
            ReDim Preserve param(contaParam)
            param(contaParam) = parA


            Sqlq = Sqlq & "  AND (Documento.Doc_Data >= @dataDa2 AND Documento.Doc_Data <=   @dataA2)"

            contaParam = contaParam + 1
        End If

        Sqlq = Sqlq & " GROUP BY Struttura.Str_padre, Struttura_1.Str_codiceUtente, Struttura_1.Str_descrBreve ) a " & _
            " FULL join (SELECT     COUNT(*) AS TotDisp, Struttura_1.Str_codiceUtente, Struttura_1.Str_descrBreve  " & _
            " FROM         Documento INNER JOIN  Struttura ON Documento.Doc_Cod_Uff_Prop = Struttura.Str_id " & _
            " INNER JOIN  Struttura AS Struttura_1 ON Struttura.Str_padre = Struttura_1.Str_id   "

        tipoAtto = "L"
        If anno <> "" And tipoAtto <> "" Then
            Dim nextAnno As Integer = anno + 1
            Sqlq = Sqlq & " where (Documento.Doc_numero LIKE '%" & anno & "/" & tipoAtto & "%'"
            For i As Integer = 0 To numAnni - 1
                Sqlq = Sqlq & " OR Documento.Doc_numero LIKE '%" & (nextAnno).ToString & "/" & tipoAtto & "%'"
                nextAnno = nextAnno + 1
            Next
            Sqlq = Sqlq & " )"

        End If

        If dataDa <> "" And dataA <> "" Then

            Dim par As New SqlClient.SqlParameter("@dataDa", SqlDbType.Date)
            par.Value = dataDa
            ReDim Preserve param(contaParam)
            param(contaParam) = par
            contaParam = contaParam + 1

            Dim parA As New SqlClient.SqlParameter("@dataA", SqlDbType.Date)
            parA.Value = dataA
            ReDim Preserve param(contaParam)
            param(contaParam) = parA

            Sqlq = Sqlq & "  AND (Documento.Doc_Data >= @dataDa AND Documento.Doc_Data <=   @dataA)"

            contaParam = contaParam + 1
        End If


        Sqlq = Sqlq & " GROUP BY Struttura.Str_padre, Struttura_1.Str_codiceUtente, Struttura_1.Str_descrBreve ) b "


        Sqlq = Sqlq & " ON a.Str_codiceUtente = B.Str_codiceUtente ORDER BY a.Str_codiceUtente "


        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                itemReport = New ItemReportAtti
                itemReport.TotaleAtti = rdr.GetInt32(0)
                If Not rdr.IsDBNull(1) Then itemReport.TotaleDetermine = rdr.GetInt32(1) Else itemReport.TotaleDetermine = 0
                If Not rdr.GetInt32(4) Then itemReport.TotaleDisposizioni = rdr.GetInt32(4) Else itemReport.TotaleDisposizioni = 0

                If itemReport.TotaleDetermine = 0 Then
                    itemReport.CodDipartimento = rdr.GetString(4)
                    itemReport.DescDipartimento = rdr.GetString(5)
                Else
                    itemReport.CodDipartimento = rdr.GetString(2)
                    itemReport.DescDipartimento = rdr.GetString(3)
                End If


                lista.Add(itemReport)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function

    Function FO_Get_ReportTransitatiIn(Optional ByVal siglaUfficio As String = "", Optional ByVal anno As String = "", Optional ByVal numAnni As Integer = 0, Optional ByVal dataDa As String = "", Optional ByVal dataA As String = "", Optional ByVal listaRecordDetermne As DllDocumentale.ItemReportAtti = Nothing) As Collections.Generic.List(Of ItemReportAtti)
        Dim lista As New Generic.List(Of ItemReportAtti)
        Dim itemReport As New ItemReportAtti

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = " SELECT     ISNULL(a.TotDet, 0) + ISNULL(B.TotDisp, 0) AS totale, ISNULL(a.TotDet, 0), ISNULL(a.Str_codiceUtente, ''), ISNULL(a.Str_descrBreve, ''),  " & _
                " ISNULL(B.TotDisp, 0), ISNULL(B.Str_codiceUtente, ''), ISNULL(B.Str_descrBreve, '')    " & _
                " from  ( " & _
                    " SELECT     COUNT(*) AS TotDet, Str_codiceUtente, Str_descrBreve " & _
                        " FROM          (SELECT DISTINCT  " & _
                        " TOP (100) PERCENT Azioni_Utente_Documento.Sto_id_Doc, Azioni_Utente_Documento.Sto_Livello, Documento.Doc_numero, Struttura_1.Str_id,  " & _
                        " Struttura.Str_codiceUtente, Struttura.Str_descrBreve " & _
                        " FROM          Azioni_Utente_Documento INNER JOIN " & _
                        " Documento ON Azioni_Utente_Documento.Sto_id_Doc = Documento.Doc_Id INNER JOIN " & _
                        " Struttura AS Struttura_1 ON Documento.Doc_Cod_Uff_Prop = Struttura_1.Str_id INNER JOIN " & _
                        " Struttura ON Struttura_1.Str_padre = Struttura.Str_id "


        Dim param() As SqlClient.SqlParameter
        Dim contaParam As Integer = 0
        Dim tipoAtto As String = "D"

        If siglaUfficio <> "" Then
            Sqlq = Sqlq & " where (Azioni_Utente_Documento.Sto_Livello = '" & siglaUfficio & "') "
        End If

        If anno <> "" And tipoAtto <> "" Then
            Dim nextAnno As Integer = anno + 1
            Sqlq = Sqlq & "  AND (Documento.Doc_numero LIKE '%" & anno & "/" & tipoAtto & "%'"
            For i As Integer = 0 To numAnni - 1

                Sqlq = Sqlq & " OR Documento.Doc_numero LIKE '%" & (nextAnno).ToString & "/" & tipoAtto & "%'"
                nextAnno = nextAnno + 1
            Next
            Sqlq = Sqlq & " )"
        End If

        If dataDa <> "" And dataA <> "" Then

            Dim par As New SqlClient.SqlParameter("@dataDa2", SqlDbType.Date)
            par.Value = dataDa
            ReDim Preserve param(contaParam)
            param(contaParam) = par
            contaParam = contaParam + 1

            Dim parA As New SqlClient.SqlParameter("@dataA2", SqlDbType.Date)
            parA.Value = dataA
            ReDim Preserve param(contaParam)
            param(contaParam) = parA


            Sqlq = Sqlq & "  AND (Documento.Doc_Data >= @dataDa2 AND Documento.Doc_Data <=   @dataA2) ) AS DETERMINE"

            contaParam = contaParam + 1
        End If

        Sqlq = Sqlq & "  GROUP BY Str_codiceUtente, Str_descrBreve) AS a FULL OUTER JOIN " & _
            " (SELECT     COUNT(*) AS TotDisp, Str_codiceUtente, Str_descrBreve  " & _
            " FROM          (SELECT DISTINCT  " & _
            " TOP (100) PERCENT Azioni_Utente_Documento_1.Sto_id_Doc, Azioni_Utente_Documento_1.Sto_Livello,  " & _
            " Documento_1.Doc_numero,  Struttura_1.Str_id, Struttura_2.Str_codiceUtente, Struttura_2.Str_descrBreve   " & _
            " FROM          Azioni_Utente_Documento AS Azioni_Utente_Documento_1 INNER JOIN    " & _
            " Documento AS Documento_1 ON Azioni_Utente_Documento_1.Sto_id_Doc = Documento_1.Doc_Id INNER JOIN    " & _
            " Struttura AS Struttura_1 ON Documento_1.Doc_Cod_Uff_Prop = Struttura_1.Str_id INNER JOIN    " & _
            " Struttura AS Struttura_2 ON Struttura_1.Str_padre = Struttura_2.Str_id    "

        tipoAtto = "L"

        If siglaUfficio <> "" Then
            Sqlq = Sqlq & " where (Azioni_Utente_Documento_1.Sto_Livello = '" & siglaUfficio & "') "
        End If

        If anno <> "" And tipoAtto <> "" Then
            Dim nextAnno As Integer = anno + 1
            Sqlq = Sqlq & "  AND (Documento_1.Doc_numero LIKE '%" & anno & "/" & tipoAtto & "%'"
            For i As Integer = 0 To numAnni - 1
                Sqlq = Sqlq & " OR Documento_1.Doc_numero LIKE '%" & (nextAnno).ToString & "/" & tipoAtto & "%'"
                nextAnno = nextAnno + 1
            Next
            Sqlq = Sqlq & " )"

        End If

        If dataDa <> "" And dataA <> "" Then

            Dim par As New SqlClient.SqlParameter("@dataDa", SqlDbType.Date)
            par.Value = dataDa
            ReDim Preserve param(contaParam)
            param(contaParam) = par
            contaParam = contaParam + 1

            Dim parA As New SqlClient.SqlParameter("@dataA", SqlDbType.Date)
            parA.Value = dataA
            ReDim Preserve param(contaParam)
            param(contaParam) = parA

            Sqlq = Sqlq & "  AND (Documento_1.Doc_Data >= @dataDa AND Documento_1.Doc_Data <=   @dataA) ) AS DISPOSIZIONI"

            contaParam = contaParam + 1
        End If


        Sqlq = Sqlq & " GROUP BY Str_codiceUtente, Str_descrBreve) AS B ON a.Str_codiceUtente = B.Str_codiceUtente "


        Sqlq = Sqlq & " ORDER BY a.Str_codiceUtente "


        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                itemReport = New ItemReportAtti
                itemReport.TotaleAtti = rdr.GetInt32(0)
                If Not rdr.IsDBNull(1) Then itemReport.TotaleDetermine = rdr.GetInt32(1) Else itemReport.TotaleDetermine = 0
                If Not rdr.GetInt32(4) Then itemReport.TotaleDisposizioni = rdr.GetInt32(4) Else itemReport.TotaleDisposizioni = 0

                If itemReport.TotaleDetermine = 0 Then
                    itemReport.CodDipartimento = rdr.GetString(4)
                    itemReport.DescDipartimento = rdr.GetString(5)
                Else
                    itemReport.CodDipartimento = rdr.GetString(2)
                    itemReport.DescDipartimento = rdr.GetString(3)
                End If


                lista.Add(itemReport)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function

    Function FO_Get_ReportConOsservazioni(Optional ByVal siglaUfficio As String = "", Optional ByVal anno As String = "", Optional ByVal numAnni As Integer = 0, Optional ByVal dataDa As String = "", Optional ByVal dataA As String = "", Optional ByVal listaRecordDetermne As DllDocumentale.ItemReportAtti = Nothing) As Collections.Generic.List(Of ItemReportAtti)
        Dim lista As New Generic.List(Of ItemReportAtti)
        Dim itemReport As New ItemReportAtti

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = " SELECT     ISNULL(a.TotDet, 0) + ISNULL(B.TotDisp, 0) AS totale, ISNULL(a.TotDet, 0), ISNULL(a.Str_codiceUtente, ''), ISNULL(a.Str_descrBreve, ''),  " & _
                " ISNULL(B.TotDisp, 0), ISNULL(B.Str_codiceUtente, ''), ISNULL(B.Str_descrBreve, '')    " & _
                " from  ( " & _
                    " SELECT     COUNT(*) AS TotDet, Str_codiceUtente, Str_descrBreve, Documento_noteosservazioni.Dno_tipo " & _
                        " FROM          (SELECT DISTINCT  " & _
                        " TOP (100) PERCENT Azioni_Utente_Documento.Sto_id_Doc, Azioni_Utente_Documento.Sto_Livello, Documento.Doc_numero, Struttura_1.Str_id,  " & _
                        " Struttura.Str_codiceUtente, Struttura.Str_descrBreve " & _
                        " FROM          Azioni_Utente_Documento INNER JOIN " & _
                        " Documento ON Azioni_Utente_Documento.Sto_id_Doc = Documento.Doc_Id INNER JOIN " & _
                        " Struttura AS Struttura_1 ON Documento.Doc_Cod_Uff_Prop = Struttura_1.Str_id INNER JOIN " & _
                        " Struttura ON Struttura_1.Str_padre = Struttura.Str_id "


        Dim param() As SqlClient.SqlParameter
        Dim contaParam As Integer = 0
        Dim tipoAtto As String = "D"

        If siglaUfficio <> "" Then
            Sqlq = Sqlq & " where (Azioni_Utente_Documento.Sto_Livello = '" & siglaUfficio & "') "
        End If

        If anno <> "" And tipoAtto <> "" Then
            Dim nextAnno As Integer = anno + 1
            Sqlq = Sqlq & "  AND (Documento.Doc_numero LIKE '%" & anno & "/" & tipoAtto & "%'"
            For i As Integer = 0 To numAnni - 1

                Sqlq = Sqlq & " OR Documento.Doc_numero LIKE '%" & (nextAnno).ToString & "/" & tipoAtto & "%'"
                nextAnno = nextAnno + 1
            Next
            Sqlq = Sqlq & " )"
        End If

        If dataDa <> "" And dataA <> "" Then

            Dim par As New SqlClient.SqlParameter("@dataDa2", SqlDbType.Date)
            par.Value = dataDa
            ReDim Preserve param(contaParam)
            param(contaParam) = par
            contaParam = contaParam + 1

            Dim parA As New SqlClient.SqlParameter("@dataA2", SqlDbType.Date)
            parA.Value = dataA
            ReDim Preserve param(contaParam)
            param(contaParam) = parA


            Sqlq = Sqlq & "  AND (Documento.Doc_Data >= @dataDa2 AND Documento.Doc_Data <=   @dataA2) ) AS DETERMINE"

            contaParam = contaParam + 1
        End If

        Sqlq = Sqlq & " INNER JOIN Documento_noteosservazioni ON DETERMINE.Sto_id_Doc = Documento_noteosservazioni.Dno_id_documento " & _
        " GROUP BY DETERMINE.Str_codiceUtente, DETERMINE.Str_descrBreve, Documento_noteosservazioni.Dno_tipo "


        If siglaUfficio <> "" Then
            Sqlq = Sqlq & " HAVING      (Documento_noteosservazioni.Dno_tipo = '" & siglaUfficio & "') "
        End If

        Sqlq = Sqlq & " ) AS a  FULL OUTER JOIN " & _
            " (SELECT     COUNT(*) AS TotDisp, Str_codiceUtente, Str_descrBreve, Documento_noteosservazioni.Dno_tipo  " & _
            " FROM          (SELECT DISTINCT  " & _
            " TOP (100) PERCENT Azioni_Utente_Documento.Sto_id_Doc, Azioni_Utente_Documento.Sto_Livello, Documento.Doc_numero, Struttura_1.Str_id,   " & _
            " Struttura.Str_codiceUtente, Struttura.Str_descrBreve   " & _
            " FROM          Azioni_Utente_Documento INNER JOIN   " & _
            " Documento ON Azioni_Utente_Documento.Sto_id_Doc = Documento.Doc_Id INNER JOIN    " & _
            " Struttura AS Struttura_1 ON Documento.Doc_Cod_Uff_Prop = Struttura_1.Str_id INNER JOIN    " & _
            "  Struttura ON Struttura_1.Str_padre = Struttura.Str_id    "

        tipoAtto = "L"

        If siglaUfficio <> "" Then
            Sqlq = Sqlq & " where (Azioni_Utente_Documento.Sto_Livello = '" & siglaUfficio & "') "
        End If

        If anno <> "" And tipoAtto <> "" Then
            Dim nextAnno As Integer = anno + 1
            Sqlq = Sqlq & "  AND (Documento.Doc_numero LIKE '%" & anno & "/" & tipoAtto & "%'"
            For i As Integer = 0 To numAnni - 1
                Sqlq = Sqlq & " OR Documento.Doc_numero LIKE '%" & (nextAnno).ToString & "/" & tipoAtto & "%'"
                nextAnno = nextAnno + 1
            Next
            Sqlq = Sqlq & " )"

        End If

        If dataDa <> "" And dataA <> "" Then

            Dim par As New SqlClient.SqlParameter("@dataDa", SqlDbType.Date)
            par.Value = dataDa
            ReDim Preserve param(contaParam)
            param(contaParam) = par
            contaParam = contaParam + 1

            Dim parA As New SqlClient.SqlParameter("@dataA", SqlDbType.Date)
            parA.Value = dataA
            ReDim Preserve param(contaParam)
            param(contaParam) = parA

            Sqlq = Sqlq & "  AND (Documento.Doc_Data >= @dataDa AND Documento.Doc_Data <=   @dataA) ) AS DISPOSIZIONI"

            contaParam = contaParam + 1
        End If

        Sqlq = Sqlq & " INNER JOIN Documento_noteosservazioni ON DISPOSIZIONI.Sto_id_Doc = Documento_noteosservazioni.Dno_id_documento " & _
        " GROUP BY DISPOSIZIONI.Str_codiceUtente, DISPOSIZIONI.Str_descrBreve, Documento_noteosservazioni.Dno_tipo "


        If siglaUfficio <> "" Then
            Sqlq = Sqlq & " HAVING      (Documento_noteosservazioni.Dno_tipo = '" & siglaUfficio & "') "
        End If

        Sqlq = Sqlq & " ) B ON a.Str_codiceUtente = B.Str_codiceUtente " & _
                        " ORDER BY a.Str_codiceUtente "


        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                itemReport = New ItemReportAtti
                itemReport.TotaleAtti = rdr.GetInt32(0)
                If Not rdr.IsDBNull(1) Then itemReport.TotaleDetermine = rdr.GetInt32(1) Else itemReport.TotaleDetermine = 0
                If Not rdr.GetInt32(4) Then itemReport.TotaleDisposizioni = rdr.GetInt32(4) Else itemReport.TotaleDisposizioni = 0

                If itemReport.TotaleDetermine = 0 Then
                    itemReport.CodDipartimento = rdr.GetString(4)
                    itemReport.DescDipartimento = rdr.GetString(5)
                Else
                    itemReport.CodDipartimento = rdr.GetString(2)
                    itemReport.DescDipartimento = rdr.GetString(3)
                End If


                lista.Add(itemReport)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function


    Function FO_Get_ReportRigettati(Optional ByVal siglaUfficio As String = "", Optional ByVal anno As String = "", Optional ByVal numAnni As Integer = 0, Optional ByVal dataDa As String = "", Optional ByVal dataA As String = "", Optional ByVal listaRecordDetermne As DllDocumentale.ItemReportAtti = Nothing) As Collections.Generic.List(Of ItemReportAtti)
        Dim lista As New Generic.List(Of ItemReportAtti)
        Dim itemReport As New ItemReportAtti

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = " SELECT     ISNULL(a.TotDet, 0) + ISNULL(B.TotDisp, 0) AS totale, ISNULL(a.TotDet, 0), ISNULL(a.Str_codiceUtente, ''), ISNULL(a.Str_descrBreve, ''),  " & _
                " ISNULL(B.TotDisp, 0), ISNULL(B.Str_codiceUtente, ''), ISNULL(B.Str_descrBreve, '')    " & _
                " from  ( " & _
                    " SELECT     COUNT(*) AS TotDet, Struttura_1.Str_codiceUtente, Struttura_1.Str_descrBreve "
        If siglaUfficio <> "UCA" Then
            Sqlq = Sqlq & " , Documento_noteosservazioni.Dno_tipo "
        End If

        Sqlq = Sqlq & " , Azioni_Utente_Documento.Sto_TipoAttivita, Azioni_Utente_Documento.Sto_Livello "
        If siglaUfficio <> "UCA" Then
            Sqlq = Sqlq & ", Azioni_Utente_Documento.Sto_Ruolo "
        End If
        Sqlq = Sqlq & " FROM         Struttura INNER JOIN  " & _
                        " Struttura AS Struttura_1 ON Struttura.Str_padre = Struttura_1.Str_id INNER JOIN  " & _
                        "  Documento ON Struttura.Str_id = Documento.Doc_Cod_Uff_Prop INNER JOIN "
        If siglaUfficio <> "UCA" Then
            Sqlq = Sqlq & " Documento_noteosservazioni ON Documento.Doc_Id = Documento_noteosservazioni.Dno_id_documento INNER JOIN "
        End If
        Sqlq = Sqlq & " Azioni_Utente_Documento ON Documento.Doc_Id = Azioni_Utente_Documento.Sto_id_Doc "

        Dim param() As SqlClient.SqlParameter
        Dim contaParam As Integer = 0
        Dim tipoAtto As String = "D"

        If anno <> "" And tipoAtto <> "" Then
            Dim nextAnno As Integer = anno + 1
            Sqlq = Sqlq & "  WHERE (Documento.Doc_numero LIKE '%" & anno & "/" & tipoAtto & "%'"
            For i As Integer = 0 To numAnni - 1

                Sqlq = Sqlq & " OR Documento.Doc_numero LIKE '%" & (nextAnno).ToString & "/" & tipoAtto & "%'"
                nextAnno = nextAnno + 1
            Next
            Sqlq = Sqlq & " )"
        End If

        If dataDa <> "" And dataA <> "" Then

            Dim par As New SqlClient.SqlParameter("@dataDa2", SqlDbType.Date)
            par.Value = dataDa
            ReDim Preserve param(contaParam)
            param(contaParam) = par
            contaParam = contaParam + 1

            Dim parA As New SqlClient.SqlParameter("@dataA2", SqlDbType.Date)
            parA.Value = dataA
            ReDim Preserve param(contaParam)
            param(contaParam) = parA


            Sqlq = Sqlq & "  AND (Documento.Doc_Data >= @dataDa2 AND Documento.Doc_Data <=   @dataA2) "

            contaParam = contaParam + 1
        End If

        Sqlq = Sqlq & " GROUP BY Struttura.Str_padre, Struttura_1.Str_codiceUtente, Struttura_1.Str_descrBreve,  Azioni_Utente_Documento.Sto_TipoAttivita, Azioni_Utente_Documento.Sto_Livello "
        If siglaUfficio <> "UCA" Then
            Sqlq = Sqlq & " , Documento_noteosservazioni.Dno_tipo, Azioni_Utente_Documento.Sto_Ruolo "
        End If


        Sqlq = Sqlq & " HAVING (Azioni_Utente_Documento.Sto_TipoAttivita = 'RIGETTO') AND (Azioni_Utente_Documento.Sto_Livello = '" & siglaUfficio & "') "
        If siglaUfficio <> "UCA" Then
            Sqlq = Sqlq & " AND      (Documento_noteosservazioni.Dno_tipo = '" & siglaUfficio & "')  AND (Azioni_Utente_Documento.Sto_Ruolo = 'R') "
        End If

        Sqlq = Sqlq & " ) AS a  FULL OUTER JOIN " & _
            " (SELECT     COUNT(*) AS TotDisp, Struttura_1.Str_codiceUtente, Struttura_1.Str_descrBreve, Azioni_Utente_Documento.Sto_TipoAttivita, Azioni_Utente_Documento.Sto_Livello "
        If siglaUfficio <> "UCA" Then
            Sqlq = Sqlq & ", Documento_noteosservazioni.Dno_tipo,   Azioni_Utente_Documento.Sto_Ruolo  "
        End If
        Sqlq = Sqlq & " FROM         Struttura INNER JOIN  " & _
            " Struttura AS Struttura_1 ON Struttura.Str_padre = Struttura_1.Str_id INNER JOIN   " & _
            " Documento ON Struttura.Str_id = Documento.Doc_Cod_Uff_Prop INNER JOIN   "
        If siglaUfficio <> "UCA" Then
            Sqlq = Sqlq & " Documento_noteosservazioni ON Documento.Doc_Id = Documento_noteosservazioni.Dno_id_documento INNER JOIN   "
        End If
        Sqlq = Sqlq & "  Azioni_Utente_Documento ON Documento.Doc_Id = Azioni_Utente_Documento.Sto_id_Doc   "


        tipoAtto = "L"


        If anno <> "" And tipoAtto <> "" Then
            Dim nextAnno As Integer = anno + 1
            Sqlq = Sqlq & "  AND (Documento.Doc_numero LIKE '%" & anno & "/" & tipoAtto & "%'"
            For i As Integer = 0 To numAnni - 1
                Sqlq = Sqlq & " OR Documento.Doc_numero LIKE '%" & (nextAnno).ToString & "/" & tipoAtto & "%'"
                nextAnno = nextAnno + 1
            Next
            Sqlq = Sqlq & " )"

        End If

        If dataDa <> "" And dataA <> "" Then

            Dim par As New SqlClient.SqlParameter("@dataDa", SqlDbType.Date)
            par.Value = dataDa
            ReDim Preserve param(contaParam)
            param(contaParam) = par
            contaParam = contaParam + 1

            Dim parA As New SqlClient.SqlParameter("@dataA", SqlDbType.Date)
            parA.Value = dataA
            ReDim Preserve param(contaParam)
            param(contaParam) = parA

            Sqlq = Sqlq & "  AND (Documento.Doc_Data >= @dataDa AND Documento.Doc_Data <=   @dataA) "

            contaParam = contaParam + 1
        End If

        Sqlq = Sqlq & " GROUP BY Struttura.Str_padre, Struttura_1.Str_codiceUtente, Struttura_1.Str_descrBreve, Azioni_Utente_Documento.Sto_TipoAttivita, Azioni_Utente_Documento.Sto_Livello "
        If siglaUfficio <> "UCA" Then
            Sqlq = Sqlq & " , Documento_noteosservazioni.Dno_tipo, Azioni_Utente_Documento.Sto_Ruolo "
        End If


        Sqlq = Sqlq & "  HAVING (Azioni_Utente_Documento.Sto_TipoAttivita = 'RIGETTO') AND (Azioni_Utente_Documento.Sto_Livello = '" & siglaUfficio & "') "
        If siglaUfficio <> "UCA" Then
            Sqlq = Sqlq & " AND      (Documento_noteosservazioni.Dno_tipo = '" & siglaUfficio & "')  "
        End If



        If siglaUfficio <> "UCA" Then
            Sqlq = Sqlq & "AND (Azioni_Utente_Documento.Sto_Ruolo = 'R') "
        End If
        Sqlq = Sqlq & " ) B ON a.Str_codiceUtente = B.Str_codiceUtente " & _
                        " ORDER BY a.Str_codiceUtente "


        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                itemReport = New ItemReportAtti
                itemReport.TotaleAtti = rdr.GetInt32(0)
                If Not rdr.IsDBNull(1) Then itemReport.TotaleDetermine = rdr.GetInt32(1) Else itemReport.TotaleDetermine = 0
                If Not rdr.GetInt32(4) Then itemReport.TotaleDisposizioni = rdr.GetInt32(4) Else itemReport.TotaleDisposizioni = 0

                If itemReport.TotaleDetermine = 0 Then
                    itemReport.CodDipartimento = rdr.GetString(4)
                    itemReport.DescDipartimento = rdr.GetString(5)
                Else
                    itemReport.CodDipartimento = rdr.GetString(2)
                    itemReport.DescDipartimento = rdr.GetString(3)
                End If


                lista.Add(itemReport)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function

    Function FO_Get_DatiImpegniVariazioni(Optional ByVal idDocumento As String = "", Optional ByVal prog As Long = 0) As Collections.Generic.List(Of ItemRiduzioneInfo)
        Dim lista As New Generic.List(Of ItemRiduzioneInfo)
        Dim con As New ItemRiduzioneInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT [Div_Documento],[Div_prog],[Div_DataRegistrazione], " & _
                " [Div_Operatore],[Div_Bilancio] ,[Div_UPB] ,[Div_Cap],[Div_Costo],[Div_NumImpegno],[Div_Anno], " & _
                " CASE WHEN [Div_Stato]=0 THEN '' ELSE  [Div_NumeroReg] END as [Div_NumeroReg], " & _
                " [Div_TipoAssunzione]," & _
                " [Div_Num_assunzione]," & _
                " [Div_Data_Assunzione]," & _
                " [Div_isEconomia]," & _
                " [Div_Stato]," & _
                " [Div_MissioneProgramma], " & _
                " [HashTokenCallSic], " & _
                " [IdDocContabileSic] " & 
                " FROM [Documento_impegno_var] "

        ' Sqlq = Sqlq & " where [Div_Stato] = 1 "

        Dim param() As SqlClient.SqlParameter

        If idDocumento <> "" Then
            ReDim Preserve param(0)
            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
            par.Value = idDocumento
            param(0) = par
            If Sqlq.Contains("where ") Then
                Sqlq = Sqlq & " and Div_Documento = " & Dic_FODocumentale.param_id_Documento
            Else
                Sqlq = Sqlq & " where Div_Documento = " & Dic_FODocumentale.param_id_Documento
            End If

        End If

        If prog > 0 Then

            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_Prog_Contabilita, SqlDbType.BigInt)
            par.Value = prog

            If idDocumento <> "" Then
                ReDim Preserve param(1)
                param(1) = par
            Else
                ReDim Preserve param(0)
                param(0) = par
            End If

            If Sqlq.Contains("where ") Then
                Sqlq = Sqlq & " and Div_prog = " & Dic_FODocumentale.param_Prog_Contabilita
            Else
                Sqlq = Sqlq & " where Div_prog = " & Dic_FODocumentale.param_Prog_Contabilita
            End If



        End If


        Sqlq = Sqlq & " Order By Div_Documento,Div_prog"



        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemRiduzioneInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Dli_NumImpegno = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.DBi_Anno = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then con.Div_NumeroReg = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then con.Div_TipoAssunzione = rdr.GetInt32(11)
                If Not rdr.IsDBNull(12) Then con.Div_Num_assunzione = rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then con.Div_Data_Assunzione = FormatDateTime(rdr.GetDateTime(13), DateFormat.LongDate)
                If Not rdr.IsDBNull(14) Then con.Div_IsEconomia = rdr.GetInt16(14)
                If Not rdr.IsDBNull(15) Then con.Di_Stato = rdr.GetInt32(15)
                If Not rdr.IsDBNull(16) Then con.Dli_MissioneProgramma = rdr.GetString(16)
                If Not rdr.IsDBNull(17) Then con.HashTokenCallSic = rdr.GetString(17)
                If Not rdr.IsDBNull(18) Then con.IdDocContabileSic = rdr.GetString(18)
                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function
    Function FO_Get_DatiImpegniVariazioniConNumImpegno(ByVal NumeroImpegno As String) As Collections.Generic.List(Of ItemRiduzioneInfo)
        Dim lista As New Generic.List(Of ItemRiduzioneInfo)
        Dim con As New ItemRiduzioneInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT [Div_Documento],[Div_prog],[Div_DataRegistrazione], " & _
                " [Div_Operatore],[Div_Bilancio] ,[Div_UPB] ,[Div_Cap],[Div_Costo],[Div_NumImpegno],[Div_Anno], " & _
                " CASE WHEN [Div_NumeroReg] is null or [Div_NumeroReg]='' THEN '0' ELSE  [Div_NumeroReg] END as [Div_NumeroReg], " & _
                " [Div_TipoAssunzione]," & _
                " [Div_Num_assunzione]," & _
                " [Div_Data_Assunzione]," & _
                " [Div_isEconomia]," & _
                " [Div_Stato]," & _
                " [Div_MissioneProgramma] " & _
                " FROM [Documento_impegno_var] "

        Sqlq = Sqlq & " where Div_NumImpegno = " & Dic_FODocumentale.param_NImpegno & _
         " and [Div_Stato] = 1 "

        Dim param(0) As SqlClient.SqlParameter


        Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_NImpegno, SqlDbType.VarChar)
        par.Value = NumeroImpegno
        param(0) = par

        Sqlq = Sqlq & " Order By Div_Documento,Div_prog"



        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemRiduzioneInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Dli_NumImpegno = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.DBi_Anno = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then con.Div_NumeroReg = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then con.Div_TipoAssunzione = rdr.GetInt32(11)
                If Not rdr.IsDBNull(12) Then con.Div_Num_assunzione = rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then con.Div_Data_Assunzione = FormatDateTime(rdr.GetDateTime(13), DateFormat.LongDate)
                If Not rdr.IsDBNull(14) Then con.Div_IsEconomia = rdr.GetInt16(14)
                If Not rdr.IsDBNull(15) Then con.Di_Stato = rdr.GetInt32(15)
                If Not rdr.IsDBNull(16) Then con.Dli_MissioneProgramma = rdr.GetString(16)
                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try

        Return lista
    End Function
    Function FO_Get_Dati_Assunzione(ByVal idDocumento As String, Optional ByVal prog As Long = 0) As Collections.Generic.List(Of ItemAssunzioneContabileInfo)
        Dim lista As New Generic.List(Of ItemAssunzioneContabileInfo)
        Dim con As New ItemAssunzioneContabileInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT [Da_Documento]" & _
      ",[Da_prog]" & _
      ",[Da_DataRegistrazione]" & _
      ",[Da_Operatore]" & _
      ",[Da_Costo]" & _
      ",[Da_Stato]" & _
       " FROM [Documento_assunzione] "
        Sqlq = Sqlq & " where [Da_Stato] = 1 "

        Dim param(0) As SqlClient.SqlParameter



        Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
        par.Value = idDocumento
        param(0) = par
        Sqlq = Sqlq & " and Da_Documento = " & Dic_FODocumentale.param_id_Documento


        If prog > 0 Then

            par = New SqlClient.SqlParameter(Dic_FODocumentale.param_Prog_Contabilita, SqlDbType.BigInt)
            par.Value = prog



            ReDim Preserve param(1)
            param(1) = par
            Sqlq = Sqlq & " and Da_prog = " & Dic_FODocumentale.param_Prog_Contabilita


        End If


        Sqlq = Sqlq & " Order By Da_Documento,Da_prog"



        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemAssunzioneContabileInfo
                con.Da_Documento = rdr.GetString(0)
                con.Da_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Da_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Da_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Da_Costo = rdr.GetDecimal(4)
                If Not rdr.IsDBNull(5) Then con.Da_Stato = rdr.GetInt32(5)

                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function

    Function FO_Insert_Assunzione(ByVal item As ItemAssunzioneContabileInfo) As ItemAssunzioneContabileInfo
        Dim Insert_assunzione As String = "INSERT INTO  [Documento_assunzione] " & _
"       ([Da_Documento] " & _
"          ,[Da_DataRegistrazione] " & _
"          ,[Da_Operatore] " & _
"          ,[Da_Costo] " & _
"          ,[Da_Stato]) " & _
"    VALUES " & _
"           (" & param_id_Documento & _
"           ," & param_DataRegistrazione & _
"           ," & param_Operatore & _
"           ," & param_Costo & _
"           ," & param_Stato & _
" )Select @@identity"




        Dim parms(4) As SqlParameter
        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(0).Value = Now 'item.Dli_DataRegistrazione
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = item.Da_Operatore
        parms(2) = New SqlParameter(param_Costo, SqlDbType.Decimal)
        parms(2).Value = item.Da_Costo
        parms(3) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(3).Value = item.Da_Documento
        parms(4) = New SqlParameter(param_Stato, SqlDbType.Int)
        parms(4).Value = item.Da_Stato


        Log.Debug("iddoc:" & item.Da_Documento & " op:" & item.Da_Operatore & " costo:" & item.Da_Costo)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlClient.SqlTransaction = conn.BeginTransaction
        Try
            Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, Insert_assunzione, parms, -1)
            registra_AttivitaContabile(item.Da_Documento, "ACC", oOperatore, trans)
            trans.Commit()
            item.Da_prog = returnValue

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try
        Return item

    End Function

    Function FO_Update_Assunzione(ByVal item As ItemAssunzioneContabileInfo) As ItemAssunzioneContabileInfo

        Dim Update_assunzione As String = ""
        Dim parms(1) As SqlParameter
        If item.Da_Costo = 0 Then
            'in caso di costo a 0 è necessario mettere lo stato a 0
            Update_assunzione = " UPDATE  [Documento_assunzione] " & _
                                " SET [Da_STATO] = 0 " & _
                                " WHERE [Da_Documento] = " & param_id_Documento & " AND [Da_prog]= " & param_Prog_Contabilita
            parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
            parms(0).Value = item.Da_Documento
            parms(1) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
            parms(1).Value = item.Da_prog

        Else
            Update_assunzione = " UPDATE  [Documento_assunzione] " & _
                " SET [Da_DataRegistrazione] = " & param_DataRegistrazione & _
                "     ,[Da_Operatore] =  " & param_Operatore & _
                "     , [Da_Costo] = " & param_Costo & _
                "     , [Da_STATO] = 1 " & _
                " WHERE [Da_Documento] = " & param_id_Documento & " AND [Da_prog]= " & param_Prog_Contabilita

            ReDim parms(4)
            parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
            parms(0).Value = Now 'item.Dli_DataRegistrazione
            parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
            parms(1).Value = item.Da_Operatore
            parms(2) = New SqlParameter(param_Costo, SqlDbType.Decimal)
            parms(2).Value = item.Da_Costo
            parms(3) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
            parms(3).Value = item.Da_Documento
            parms(4) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
            parms(4).Value = item.Da_prog

        End If

        Log.Debug("iddoc:" & item.Da_Documento & " op:" & item.Da_Operatore & " costo:" & item.Da_Costo)

        '  Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlClient.SqlTransaction = conn.BeginTransaction
        Try
            Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, Update_assunzione, parms, -1)

            registra_AttivitaContabile(item.Da_Documento, "UPACC", oOperatore, trans)
            trans.Commit()


        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try

        Return item
    End Function

    Function FO_GetFormatoNumeroDocumento(ByVal codiceTipoDocumento As String) As String
        Dim retValue As String = Nothing
        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Dim Sqlq As String = "Select [Tco_Formato] from [Tab_Tipo_Contatore] where [TCo_Codice]=@TCo_Codice"
        Dim param() As SqlClient.SqlParameter

        ReDim Preserve param(0)
        Dim par As New SqlClient.SqlParameter("@TCo_Codice", SqlDbType.VarChar)
        par.Value = codiceTipoDocumento
        param(0) = par

        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)

            While rdr.Read()
                If Not rdr.IsDBNull(0) Then retValue = rdr.GetString(0)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try
        Return retValue
    End Function

    Function FO_GetImpegno(ByVal numImpegno As String) As Collections.Generic.List(Of ItemImpegnoInfo)
        Dim lista As New Generic.List(Of ItemImpegnoInfo)
        Dim con As New ItemImpegnoInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT [Di_Documento],[Di_prog],[Di_DataRegistrazione], " & _
                " [Di_Operatore],[Di_Bilancio] ,[Di_UPB] ,[Di_Cap],[Di_Costo]," & _
                " CASE WHEN [Di_Stato]=0 THEN '' ELSE  [Di_NumImpegno] END as [Di_NumImpegno],[Di_Anno], [Di_NPreImpegno], " & _
                " [Di_ContoEconomica] ,[Di_Ratei] ,[Di_Risconti],[Di_ImpostaIrap] ,[Di_NDocPrecedente],[Di_PreimpDaPrenotazione],[Di_Stato],[Di_CodObGestionale],[Di_MissioneProgramma], [Di_PCF] " & _
                " FROM [Documento_impegno] "
        Sqlq = Sqlq & " where Di_NumImpegno = " & Dic_FODocumentale.param_NImpegno


        Dim param() As SqlClient.SqlParameter


        ReDim Preserve param(0)
        Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_NImpegno, SqlDbType.VarChar)
        par.Value = numImpegno
        param(0) = par





        Sqlq = Sqlq & " Order By Di_Documento,Di_prog"

        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemImpegnoInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Dli_NumImpegno = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.DBi_Anno = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then con.Dli_NPreImpegno = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then con.Di_ContoEconomica = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then con.Di_Ratei = rdr.GetDecimal(12)
                If Not rdr.IsDBNull(13) Then con.Di_Risconti = rdr.GetDecimal(13)
                If Not rdr.IsDBNull(14) Then con.Di_ImpostaIrap = rdr.GetDecimal(14)
                If Not rdr.IsDBNull(15) Then con.NDocPrecedente = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then con.Di_PreImpDaPrenotazione = rdr.GetInt16(16)
                If Not rdr.IsDBNull(17) Then con.Di_Stato = rdr.GetInt32(17)
                If Not rdr.IsDBNull(18) Then con.Codice_Obbiettivo_Gestionale = rdr.GetString(18)
                If Not rdr.IsDBNull(19) Then con.Dli_MissioneProgramma = rdr.GetString(19)
                If Not rdr.IsDBNull(20) Then con.Piano_Dei_Conti_Finanziari = rdr.GetString(20)
                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function




    Function FO_Get_DatiImpegni(Optional ByVal idDocumento As String = "", Optional ByVal prog As Long = 0, Optional ByVal checkImpegnoRegistrato As Boolean = False) As Collections.Generic.List(Of ItemImpegnoInfo)
        Dim lista As New Generic.List(Of ItemImpegnoInfo)
        Dim con As New ItemImpegnoInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT [Di_Documento],[Di_prog],[Di_DataRegistrazione], " & _
                " [Di_Operatore],[Di_Bilancio] ,[Di_UPB] ,[Di_Cap],[Di_Costo]," & _
                " CASE WHEN [Di_Stato]=0 THEN '' ELSE  [Di_NumImpegno] END as [Di_NumImpegno],[Di_Anno], [Di_NPreImpegno], " & _
                " [Di_ContoEconomica] ,[Di_Ratei] ,[Di_Risconti],[Di_ImpostaIrap] ,[Di_NDocPrecedente],[Di_PreimpDaPrenotazione],[Di_Stato],[Di_CodObGestionale],[Di_PCF], [Di_MissioneProgramma],  " & _
                " [HashTokenCallSic], [IdDocContabileSic], [HashTokenCallSic_Imp], [IdDocContabileSic_Imp]" & _
                " FROM [Documento_impegno] "


        Dim param() As SqlClient.SqlParameter

        If idDocumento <> "" Then
            ReDim Preserve param(0)
            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
            par.Value = idDocumento
            param(0) = par
            If Sqlq.Contains("where ") Then
                Sqlq = Sqlq & " And Di_Documento = " & Dic_FODocumentale.param_id_Documento
            Else
                Sqlq = Sqlq & " where Di_Documento = " & Dic_FODocumentale.param_id_Documento
            End If

        End If

        If prog > 0 Then
            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_Prog_Contabilita, SqlDbType.BigInt)
            par.Value = prog

            If idDocumento <> "" Then
                ReDim Preserve param(1)
                param(1) = par
            Else
                ReDim Preserve param(0)
                param(0) = par
            End If

            If Sqlq.Contains("where ") Then
                Sqlq = Sqlq & " And Di_prog = " & Dic_FODocumentale.param_Prog_Contabilita
            Else
                Sqlq = Sqlq & " where Di_prog = " & Dic_FODocumentale.param_Prog_Contabilita
            End If
        End If

        If checkImpegnoRegistrato = True Then
            If Sqlq.Contains("where ") Then
                Sqlq = Sqlq & " And Di_NumImpegno = 0 "
            Else
                Sqlq = Sqlq & " where Di_NumImpegno = 0 "
            End If
        End If

        Sqlq = Sqlq & " Order By Di_Documento,Di_prog"

        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemImpegnoInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Dli_NumImpegno = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.DBi_Anno = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then con.Dli_NPreImpegno = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then con.Di_ContoEconomica = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then con.Di_Ratei = rdr.GetDecimal(12)
                If Not rdr.IsDBNull(13) Then con.Di_Risconti = rdr.GetDecimal(13)
                If Not rdr.IsDBNull(14) Then con.Di_ImpostaIrap = rdr.GetDecimal(14)
                If Not rdr.IsDBNull(15) Then con.NDocPrecedente = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then con.Di_PreImpDaPrenotazione = rdr.GetInt16(16)
                If Not rdr.IsDBNull(17) Then con.Di_Stato = rdr.GetInt32(17)
                If Not rdr.IsDBNull(18) Then con.Codice_Obbiettivo_Gestionale = rdr.GetString(18)
                If Not rdr.IsDBNull(19) Then con.Piano_Dei_Conti_Finanziari = rdr.GetString(19)
                If Not rdr.IsDBNull(20) Then con.Dli_MissioneProgramma = rdr.GetString(20)
                If Not rdr.IsDBNull(21) Then con.HashTokenCallSic = rdr.GetString(21)
                If Not rdr.IsDBNull(22) Then con.IdDocContabileSic = rdr.GetString(22)
                If Not rdr.IsDBNull(23) Then con.HashTokenCallSic_Imp = rdr.GetString(23)
                If Not rdr.IsDBNull(24) Then con.IdDocContabileSic_Imp = rdr.GetString(24)
                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function
    Function FO_Get_DettaglioStorico(Optional ByVal idDocumento As String = "") As Collections.Generic.List(Of ItemDettaglioStorico)
        Dim lista As New Generic.List(Of ItemDettaglioStorico)
        Dim item As New ItemDettaglioStorico
        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
            Dim parms(0) As SqlParameter

            parms(0) = New SqlParameter("@IdDocumento", SqlDbType.VarChar)
            parms(0).Value = idDocumento

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.StoredProcedure, "sp_get_storico", parms, -1)
            While rdr.Read()
                item = New ItemDettaglioStorico
                If Not rdr.IsDBNull(0) Then item.ID = rdr.GetInt32(0)
                If Not rdr.IsDBNull(1) Then item.IdDocumento = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then item.Progressivo = rdr.GetInt32(2)
                If Not rdr.IsDBNull(3) Then item.IdUfficio = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then item.CodiceUfficio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then item.DescrizioneUfficio = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then item.Giorni = rdr.GetInt32(6)
                If Not rdr.IsDBNull(7) Then item.DataArrivo = rdr.GetDateTime(7)
                If Not rdr.IsDBNull(8) Then item.DataUscita = rdr.GetDateTime(8)
                If Not rdr.IsDBNull(9) Then item.Utente = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then item.Stato = rdr.GetString(10)
                lista.Add(item)
            End While
        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            item = Nothing
            lista.Clear()
            Log.Error("FO_Get_DettaglioStorico " & oOperatore.Codice & " " & ex.Message)
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            item = Nothing
            lista.Clear()
            Log.Error("FO_Get_DettaglioStorico " & oOperatore.Codice & " " & ex.Message)
        End Try

        Return lista
    End Function


    Function FO_Get_DatiPreImpegni(Optional ByVal idDocumento As String = "", Optional ByVal prog As Long = 0, Optional ByVal numPreimp As String = "") As Collections.Generic.List(Of ItemImpegnoInfo)
        Dim lista As New Generic.List(Of ItemImpegnoInfo)
        Dim con As New ItemImpegnoInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT [Di_Documento] " & _
                    " ,[Di_prog] " & _
                    " ,[Di_DataRegistrazione] " & _
                    ", [Di_Operatore] " & _
                    " ,[Di_Bilancio] " & _
                    " ,[Di_UPB] " & _
                    " ,[Di_Cap] " & _
                    " ,[Di_Costo] " & _
                    " ,[Di_NPreImpegno] " & _
                    " ,[Di_ContoEconomica] " & _
                    " ,[Di_Stato] " & _
                    " ,[Di_CodObGestionale] " & _
                    " ,[Di_MissioneProgramma] " & _
                    " ,[Di_PCF] " & _
                    " ,[Di_TipoAssunzioneDescr] " & _
                    " ,[Di_TipoAssunzione] " & _
                    " ,[Di_Num_assunzione] " & _
                    " ,[Di_Data_Assunzione] " & _
                    " ,[HashTokenCallSic] " & _
                    " ,[IdDocContabileSic] " & 
                    " FROM [Documento_preimpegno] where 1 = 1 "

        Dim param() As SqlClient.SqlParameter

        If idDocumento <> "" Then
            ReDim Preserve param(0)
            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
            par.Value = idDocumento
            param(0) = par
            Sqlq = Sqlq & " And Di_Documento = " & Dic_FODocumentale.param_id_Documento
        End If
        If prog > 0 Then

            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_Prog_Contabilita, SqlDbType.BigInt)
            par.Value = prog
            If idDocumento <> "" Then
                ReDim Preserve param(1)
                param(1) = par
            Else
                ReDim Preserve param(0)
                param(0) = par
            End If
            Sqlq = Sqlq & " And Di_prog = " & Dic_FODocumentale.param_Prog_Contabilita
        End If

        If numPreimp <> "" Then
            ReDim Preserve param(0)
            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_NPreImp, SqlDbType.VarChar)
            par.Value = numPreimp
            param(0) = par
            Sqlq = Sqlq & " And Di_NPreImpegno = " & Dic_FODocumentale.param_NPreImp
        End If


        Sqlq = Sqlq & " Order By Di_Documento,Di_prog"



        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemImpegnoInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)

                If Not rdr.IsDBNull(8) Then con.Dli_NPreImpegno = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.Di_ContoEconomica = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then con.Di_Stato = rdr.GetInt32(10)
                If Not rdr.IsDBNull(11) Then con.Codice_Obbiettivo_Gestionale = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then con.Dli_MissioneProgramma = rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then con.Piano_Dei_Conti_Finanziari = rdr.GetString(13)

                If Not rdr.IsDBNull(14) Then con.Di_TipoAssunzioneDescr = rdr.GetString(14)
                If Not rdr.IsDBNull(15) Then con.Di_TipoAssunzione = rdr.GetInt32(15)
                If Not rdr.IsDBNull(16) Then con.Di_Num_assunzione = rdr.GetString(16)
                If Not rdr.IsDBNull(17) Then con.Di_Data_Assunzione = rdr.GetDateTime(17)
                If Not rdr.IsDBNull(18) Then con.HashTokenCallSic = rdr.GetString(18)
                If Not rdr.IsDBNull(19) Then con.IdDocContabileSic = rdr.GetString(19)
               
                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function
    Function FO_Get_DatiImpegniNonPerenti(Optional ByVal idDocumento As String = "", Optional ByVal prog As Long = 0) As Collections.Generic.List(Of ItemImpegnoInfo)
        Dim lista As New Generic.List(Of ItemImpegnoInfo)
        Dim con As New ItemImpegnoInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT [Di_Documento],[Di_prog],[Di_DataRegistrazione], " & _
                " [Di_Operatore],[Di_Bilancio] ,[Di_UPB] ,[Di_Cap],[Di_Costo]," & _
                " CASE WHEN [Di_Stato]=0 THEN '' ELSE [Di_NumImpegno] END as [Di_NumImpegno],[Di_Anno], [Di_NPreImpegno], " & _
                " [Di_ContoEconomica] ,[Di_Ratei] ,[Di_Risconti],[Di_ImpostaIrap] ,[Di_NDocPrecedente],[Di_PreimpDaPrenotazione],[Di_Stato],[Di_CodObGestionale], [Di_MissioneProgramma], [Di_PCF], [HashTokenCallSic], [IdDocContabileSic], [HashTokenCallSic_Imp], [IdDocContabileSic_Imp] " & _
                " FROM [Documento_impegno] where (Di_NDocPrecedente='' or Di_NDocPrecedente is null) "

        Dim param() As SqlClient.SqlParameter

        If idDocumento <> "" Then
            ReDim Preserve param(0)
            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
            par.Value = idDocumento
            param(0) = par
            Sqlq = Sqlq & " and Di_Documento = " & Dic_FODocumentale.param_id_Documento
        End If

        If prog > 0 Then

            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_Prog_Contabilita, SqlDbType.BigInt)
            par.Value = prog



            If idDocumento <> "" Then
                ReDim Preserve param(1)
                param(1) = par
            Else
                ReDim Preserve param(0)
                param(0) = par
            End If
            Sqlq = Sqlq & " and Di_prog = " & Dic_FODocumentale.param_Prog_Contabilita


        End If


        Sqlq = Sqlq & " Order By Di_Documento,Di_prog"



        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemImpegnoInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Dli_NumImpegno = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.DBi_Anno = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then con.Dli_NPreImpegno = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then con.Di_ContoEconomica = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then con.Di_Ratei = rdr.GetDecimal(12)
                If Not rdr.IsDBNull(13) Then con.Di_Risconti = rdr.GetDecimal(13)
                If Not rdr.IsDBNull(14) Then con.Di_ImpostaIrap = rdr.GetDecimal(14)
                If Not rdr.IsDBNull(15) Then con.NDocPrecedente = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then con.Di_PreImpDaPrenotazione = rdr.GetInt16(16)
                If Not rdr.IsDBNull(17) Then con.Di_Stato = rdr.GetInt32(17)
                If Not rdr.IsDBNull(18) Then con.Codice_Obbiettivo_Gestionale = rdr.GetString(18)
                If Not rdr.IsDBNull(19) Then con.Dli_MissioneProgramma = rdr.GetString(19)
                If Not rdr.IsDBNull(20) Then con.Piano_Dei_Conti_Finanziari = rdr.GetString(20)
                If Not rdr.IsDBNull(21) Then con.HashTokenCallSic = rdr.GetString(21)
                If Not rdr.IsDBNull(22) Then con.IdDocContabileSic = rdr.GetString(22)
                If Not rdr.IsDBNull(23) Then con.HashTokenCallSic_Imp = rdr.GetString(23)
                If Not rdr.IsDBNull(24) Then con.IdDocContabileSic_Imp = rdr.GetString(24)

                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function

    Function FO_Get_DatiImpegniPerenti(Optional ByVal idDocumento As String = "", Optional ByVal prog As Long = 0) As Collections.Generic.List(Of ItemImpegnoInfo)
        Dim lista As New Generic.List(Of ItemImpegnoInfo)
        Dim con As New ItemImpegnoInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT [Di_Documento],[Di_prog],[Di_DataRegistrazione], " & _
                " [Di_Operatore],[Di_Bilancio] ,[Di_UPB] ,[Di_Cap],[Di_Costo],[Di_NumImpegno],[Di_Anno], [Di_NPreImpegno], " & _
                " [Di_ContoEconomica] ,[Di_Ratei] ,[Di_Risconti],[Di_ImpostaIrap] ,[Di_NDocPrecedente],[Di_PreimpDaPrenotazione],[Di_Stato],[Di_CodObGestionale], [Di_MissioneProgramma], [Di_PCF], " & _
                " [HashTokenCallSic], [IdDocContabileSIC], " & _
                " [HashTokenCallSic_Imp], [IdDocContabileSIC_Imp] " & _
                " FROM [Documento_impegno] where (Di_NDocPrecedente<>'' and (not Di_NDocPrecedente is null)) "

        Sqlq = Sqlq & " and [Di_Stato] <> 0 "

        Dim param() As SqlClient.SqlParameter

        If idDocumento <> "" Then
            ReDim Preserve param(0)
            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
            par.Value = idDocumento
            param(0) = par
            Sqlq = Sqlq & " and Di_Documento = " & Dic_FODocumentale.param_id_Documento
        End If

        If prog > 0 Then

            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_Prog_Contabilita, SqlDbType.BigInt)
            par.Value = prog

            If idDocumento <> "" Then
                ReDim Preserve param(1)
                param(1) = par
            Else
                ReDim Preserve param(0)
                param(0) = par
            End If
            Sqlq = Sqlq & " and Di_prog = " & Dic_FODocumentale.param_Prog_Contabilita


        End If


        Sqlq = Sqlq & " Order By Di_Documento,Di_prog"



        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemImpegnoInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Dli_NumImpegno = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.DBi_Anno = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then con.Dli_NPreImpegno = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then con.Di_ContoEconomica = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then con.Di_Ratei = rdr.GetDecimal(12)
                If Not rdr.IsDBNull(13) Then con.Di_Risconti = rdr.GetDecimal(13)
                If Not rdr.IsDBNull(14) Then con.Di_ImpostaIrap = rdr.GetDecimal(14)
                If Not rdr.IsDBNull(15) Then con.NDocPrecedente = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then con.Di_PreImpDaPrenotazione = rdr.GetInt16(16)
                If Not rdr.IsDBNull(17) Then con.Di_Stato = rdr.GetInt32(17)
                If Not rdr.IsDBNull(18) Then con.Codice_Obbiettivo_Gestionale = rdr.GetString(18)
                If Not rdr.IsDBNull(19) Then con.Dli_MissioneProgramma = rdr.GetString(19)
                If Not rdr.IsDBNull(20) Then con.Piano_Dei_Conti_Finanziari = rdr.GetString(20)
                If Not rdr.IsDBNull(21) Then con.HashTokenCallSic = rdr.GetString(21)
                If Not rdr.IsDBNull(22) Then con.IdDocContabileSic = rdr.GetString(22)
                If Not rdr.IsDBNull(23) Then con.HashTokenCallSic_Imp = rdr.GetString(23)
                If Not rdr.IsDBNull(24) Then con.IdDocContabileSic_Imp = rdr.GetString(24)

                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function


    Function FO_Get_DatiImpegniByNPreImp(ByVal NPreImp As String, ByVal idDoc As String) As Collections.Generic.List(Of ItemImpegnoInfo)
        Dim lista As New Generic.List(Of ItemImpegnoInfo)
        Dim con As New ItemImpegnoInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT [Di_Documento],[Di_prog],[Di_DataRegistrazione], " & _
                " [Di_Operatore],[Di_Bilancio] ,[Di_UPB] ,[Di_Cap],[Di_Costo],[Di_NumImpegno],[Di_Anno], [Di_NPreImpegno], " & _
                " [Di_ContoEconomica] ,[Di_Ratei] ,[Di_Risconti],[Di_ImpostaIrap] ,[Di_NDocPrecedente],[Di_PreimpDaPrenotazione],[Di_Stato],[Di_CodObGestionale], [Di_MissioneProgramma], [Di_PCF] " & _
                " FROM [Documento_impegno]"

        Dim param() As SqlClient.SqlParameter


        ReDim Preserve param(1)
        Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_NPreImp, SqlDbType.VarChar)
        par.Value = NPreImp
        param(0) = par

        Dim par2 As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
        par2.Value = idDoc
        param(1) = par2

        Sqlq = Sqlq & " where Di_NPreImpegno = " & Dic_FODocumentale.param_NPreImp
        Sqlq = Sqlq & " and Di_Documento = " & Dic_FODocumentale.param_id_Documento
        Sqlq = Sqlq & " and [Di_Stato] = 1 "

        Sqlq = Sqlq & " Order By Di_Documento,Di_prog"



        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemImpegnoInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Dli_NumImpegno = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.DBi_Anno = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then con.Dli_NPreImpegno = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then con.Di_ContoEconomica = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then con.Di_Ratei = rdr.GetDecimal(12)
                If Not rdr.IsDBNull(13) Then con.Di_Risconti = rdr.GetDecimal(13)
                If Not rdr.IsDBNull(14) Then con.Di_ImpostaIrap = rdr.GetDecimal(14)
                If Not rdr.IsDBNull(15) Then con.NDocPrecedente = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then con.Di_PreImpDaPrenotazione = rdr.GetInt16(16)
                If Not rdr.IsDBNull(17) Then con.Di_Stato = rdr.GetInt32(17)
                If Not rdr.IsDBNull(18) Then con.Codice_Obbiettivo_Gestionale = rdr.GetString(18)
                If Not rdr.IsDBNull(19) Then con.Dli_MissioneProgramma = rdr.GetString(19)
                If Not rdr.IsDBNull(20) Then con.Piano_Dei_Conti_Finanziari = rdr.GetString(20)

                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function
    Function FO_Get_DatiMandati(ByVal idDocumento As String) As Collections.Generic.List(Of ItemMandatoInfo)
        Dim lista As New Generic.List(Of ItemMandatoInfo)
        Dim con As New ItemMandatoInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""

        Sqlq = "  Select [Man_id],[Man_Nmandato],[Man_Doc_id],[Man_Nimpegno],[Man_NLiquidazione],[Man_NImporto],[Man_DataMandato]  FROM  [Documento_Mandato] "



        Dim param(0) As SqlClient.SqlParameter

        Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
        par.Value = idDocumento
        param(0) = par
        Sqlq = Sqlq & " where [Man_Doc_id] = " & Dic_FODocumentale.param_id_Documento

        Sqlq = Sqlq & " Order By [Man_Doc_id],[Man_id]"



        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemMandatoInfo
                con.Man_id = rdr.GetInt64(0)


                If Not rdr.IsDBNull(1) Then con.Man_Nmandato = rdr.GetString(1)

                If Not rdr.IsDBNull(2) Then con.Man_Doc_id = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then con.Man_Nimpegno = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Man_NLiquidazione = rdr.GetInt64(4)
                If Not rdr.IsDBNull(5) Then con.Man_NImporto = rdr.GetDecimal(5)
                If Not rdr.IsDBNull(6) Then con.Man_DataMandato = rdr.GetDateTime(6)

                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function

    Function FO_Get_DatiLiquidazioneByNLiquidazione(ByVal NLiquidazione As Integer, Optional ByVal flagCaricaListaBeneficiari As Boolean = False) As ItemLiquidazioneInfo


        Dim con As New ItemLiquidazioneInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = " SELECT     [Dli_Documento] ,[Dli_prog],[Dli_DataRegistrazione],[Dli_Operatore] ,[Dli_Esercizio] ,[Dli_UPB] ,[Dli_Cap] , " & _
                " [Dli_Costo]  ,[Dli_NumImpegno] ,[Dli_TipoAssunzione] ,[Dli_Num_assunzione],[Dli_Data_Assunzione],[Dli_Anno],  [Dli_NPreImpegno], " & _
                " [Dli_NLiquidazione] ,[Dli_ContoEconomica],[Dli_ImportoIva],[Dli_POR],[Dli_AllegatoPor],[Dli_Stato], [Dli_MissioneProgramma] " & _
                " FROM Documento_liquidazione where [Dli_NLiquidazione] =" & Dic_FODocumentale.param_NLiquidazione

        Sqlq = Sqlq & " and [Dli_Stato] = 1 "

        Dim param(0) As SqlClient.SqlParameter


        Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_NLiquidazione, SqlDbType.BigInt)
        par.Value = NLiquidazione
        param(0) = par





        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemLiquidazioneInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Dli_NumImpegno = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.Dli_TipoAssunzione = rdr.GetInt32(9)
                If Not rdr.IsDBNull(10) Then con.Dli_Num_assunzione = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then con.Dli_Data_Assunzione = FormatDateTime(rdr.GetDateTime(11), DateFormat.LongDate)
                If Not rdr.IsDBNull(12) Then con.Dli_Anno = "" & rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then con.Dli_NPreImpegno = "" & rdr.GetString(13)

                If Not rdr.IsDBNull(14) Then con.Dli_NLiquidazione = "" & rdr.GetInt64(14)

                If Not rdr.IsDBNull(15) Then con.Di_ContoEconomica = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then con.Dli_ImportoIva = rdr.GetDecimal(16)
                If Not rdr.IsDBNull(17) Then con.Dli_Por = rdr.GetInt16(17)
                If Not rdr.IsDBNull(18) Then con.Dli_Allegato = CType(rdr.GetValue(18), Byte())
                If Not rdr.IsDBNull(19) Then con.Di_Stato = rdr.GetInt32(19)
                If Not rdr.IsDBNull(20) Then con.Dli_MissioneProgramma = rdr.GetString(20)
                If flagCaricaListaBeneficiari Then
                    con.ListaBeneficiari = FO_Get_ListaBeneficiariLiquidazione(oOperatore, con.Dli_Documento, con.Dli_NLiquidazione)
                End If

            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return con
    End Function
    Function FO_Get_ListaLiquidazioniByPreImpegno(ByVal Numero As String, ByVal isImpegno As Boolean, Optional ByVal idDoc As String = "", Optional ByVal flagCaricaListaBeneficiari As Boolean = False) As Collections.Generic.List(Of ItemLiquidazioneInfo)


        Dim con As New ItemLiquidazioneInfo


        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = " SELECT     [Dli_Documento] ,[Dli_prog],[Dli_DataRegistrazione],[Dli_Operatore] ,[Dli_Esercizio] ,[Dli_UPB] ,[Dli_Cap] , " & _
                " [Dli_Costo]  ,[Dli_NumImpegno] ,[Dli_TipoAssunzione] ,[Dli_Num_assunzione],[Dli_Data_Assunzione],[Dli_Anno],  [Dli_NPreImpegno], " & _
                " [Dli_NLiquidazione] ,[Dli_ContoEconomica],[Dli_ImportoIva],[Dli_POR],[Dli_AllegatoPor],[Dli_Stato],[Dli_MissioneProgramma]  " & _
                " FROM Documento_liquidazione "
        Sqlq = Sqlq & " where [Dli_Stato] = 1 "
        Dim param(0) As SqlClient.SqlParameter
        Dim par As SqlClient.SqlParameter
        If isImpegno Then

            Sqlq = Sqlq & " and [Dli_NumImpegno]=" & Dic_FODocumentale.param_NImpegno
            par = New SqlClient.SqlParameter(Dic_FODocumentale.param_NImpegno, SqlDbType.VarChar)
            par.Value = Numero
            param(0) = par
        Else

            Sqlq = Sqlq & " and [Dli_NPreImpegno]=" & Dic_FODocumentale.param_NPreImp

            par = New SqlClient.SqlParameter(Dic_FODocumentale.param_NPreImp, SqlDbType.VarChar)
            par.Value = Numero
            param(0) = par
        End If

        If idDoc <> "" Then
            ReDim Preserve param(1)

            Sqlq = Sqlq & " and [Dli_Documento]=" & Dic_FODocumentale.param_id_Documento

            par = New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
            par.Value = idDoc
            param(1) = par
        End If






        Dim rdr As SqlClient.SqlDataReader
        Dim listaLiq As New Collections.Generic.List(Of ItemLiquidazioneInfo)
        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemLiquidazioneInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Dli_NumImpegno = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.Dli_TipoAssunzione = rdr.GetInt32(9)
                If Not rdr.IsDBNull(10) Then con.Dli_Num_assunzione = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then con.Dli_Data_Assunzione = FormatDateTime(rdr.GetDateTime(11), DateFormat.LongDate)
                If Not rdr.IsDBNull(12) Then con.Dli_Anno = "" & rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then con.Dli_NPreImpegno = "" & rdr.GetString(13)

                If Not rdr.IsDBNull(14) Then con.Dli_NLiquidazione = "" & rdr.GetInt64(14)

                If Not rdr.IsDBNull(15) Then con.Di_ContoEconomica = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then con.Dli_ImportoIva = rdr.GetDecimal(16)
                If Not rdr.IsDBNull(17) Then con.Dli_Por = rdr.GetInt16(17)
                If Not rdr.IsDBNull(18) Then con.Dli_Allegato = CType(rdr.GetValue(18), Byte())
                If Not rdr.IsDBNull(19) Then con.Di_Stato = rdr.GetInt32(19)
                If Not rdr.IsDBNull(20) Then con.Dli_MissioneProgramma = rdr.GetString(20)
                If flagCaricaListaBeneficiari Then
                    con.ListaBeneficiari = FO_Get_ListaBeneficiariLiquidazione(oOperatore, con.Dli_Documento, con.Dli_NLiquidazione)
                End If
                listaLiq.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return listaLiq
    End Function


    Function FO_Get_ListaFattureLiquidazione(Optional ByVal progLiquidazione As Integer = -1, Optional ByVal idDoc As String = "", Optional ByVal idFatturaSIC As String = "") As Collections.Generic.List(Of ItemFatturaInfoHeader)
        If progLiquidazione = -1 And idDoc = "" And idFatturaSIC = "" Then
            Throw New Exception("Specificare almeno un parametro")
        End If

        Dim listaFatture As New Generic.List(Of ItemFatturaInfoHeader)
        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT  Fatture.[id_fattura_SIC] ,Fatture.[id_documento], Fatture.[id_contratto], Fatture.[numeroRepertorio] ,[numeroFatturaBeneficiario] ,[dataFatturaBeneficiario] ,[id_anagrafica] ," & _
    "     [denominazioneBeneficiario]  ,[codiceFiscaleBeneficiario] ,[partitaIvaBeneficiario] ,[flagPersonaFisicaBeneficiario],[id_sede],CONVERT(VARCHAR(MAX),[sede])As sede,[id_metodo_pagamento],  [metodoPagamento], " & _
    "     [iban] ,[descrizioneFattura],[importo_totale_fattura],[id_conto], Documento_Liquidazione_Fattura.importoLiquidato, Documento_Liquidazione_Fattura.prog_fattura, Documento_Liquidazione_Fattura.id, Contratti.codiceCIG, Contratti.codiceCUP " & _
    "       FROM Fatture " & _
    "     INNER Join " & _
                      " Documento_Liquidazione_Fattura ON Fatture.Prog = Documento_Liquidazione_Fattura.prog_fattura " & _
                      "  INNER JOIN Contratti ON Fatture.id_contratto = Contratti.id_contratto AND Fatture.id_documento = Contratti.id_documento "

        Sqlq = Sqlq & " WHERE 1 = 1 "
        Dim dimensioneParametri As Integer = 0
        Dim param(dimensioneParametri) As SqlClient.SqlParameter

        If progLiquidazione <> -1 Then
            ReDim Preserve param(dimensioneParametri)

            Dim par As New SqlClient.SqlParameter("@id_TabDocLiquidazione", SqlDbType.Int)
            par.Value = progLiquidazione
            param(dimensioneParametri) = par
            Sqlq = Sqlq & " AND  Documento_Liquidazione_Fattura.id_TabDocLiquidazione=@id_TabDocLiquidazione "

            dimensioneParametri = dimensioneParametri + 1
        End If

        If idDoc <> "" Then
            ReDim Preserve param(dimensioneParametri)
            Dim par As New SqlClient.SqlParameter("@id_Documento", SqlDbType.VarChar)
            par.Value = idDoc
            param(dimensioneParametri) = par
            Sqlq = Sqlq & " AND  Documento_Liquidazione_Fattura.id_Documento=@id_Documento AND  Fatture.id_documento =@id_Documento "

            dimensioneParametri = dimensioneParametri + 1
        End If

        If idFatturaSIC <> "" Then
            ReDim Preserve param(dimensioneParametri)
            Dim par As New SqlClient.SqlParameter("@id_Fattura_SIC", SqlDbType.VarChar)
            par.Value = idFatturaSIC
            param(dimensioneParametri) = par
            Sqlq = Sqlq & " AND  Documento_Liquidazione_Fattura.id_Fattura_SIC=@id_Fattura_SIC  "

            dimensioneParametri = dimensioneParametri + 1
        End If

        'Sqlq = Sqlq & " WHERE Documento_Liquidazione_Fattura.id_TabDocLiquidazione=@id_TabDocLiquidazione AND  Documento_Liquidazione_Fattura.id_Documento=@id_Documento AND  Fatture.id_documento =@id_Documento"


        Dim rdr As SqlClient.SqlDataReader

        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)

            While rdr.Read()

                Dim fattura As ItemFatturaInfoHeader = New ItemFatturaInfoHeader()

                If Not rdr.IsDBNull(0) Then fattura.IdUnivoco = rdr.GetString(0)
                If Not rdr.IsDBNull(1) Then fattura.IdDocumento = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then fattura.Contratto.IdContratto = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then fattura.Contratto.NumeroRepertorioContratto = rdr.GetString(3)
                fattura.Contratto.IdDocumento = fattura.IdDocumento

                If Not rdr.IsDBNull(4) Then fattura.NumeroFatturaBeneficiario = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then fattura.DataFatturaBeneficiario = rdr.GetDateTime(5)
                If Not rdr.IsDBNull(6) Then fattura.AnagraficaInfo.IdAnagrafica = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then fattura.AnagraficaInfo.Denominazione = rdr.GetString(7)
                If Not rdr.IsDBNull(8) Then fattura.AnagraficaInfo.CodiceFiscale = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then fattura.AnagraficaInfo.PartitaIva = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then fattura.AnagraficaInfo.FlagPersonaFisica = rdr.GetBoolean(10)
                If Not rdr.IsDBNull(11) Then fattura.AnagraficaInfo.IdSede = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then fattura.AnagraficaInfo.SedeVia = rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then fattura.AnagraficaInfo.IdModalitaPag = rdr.GetInt32(13)
                If Not rdr.IsDBNull(14) Then fattura.AnagraficaInfo.DescrizioneModalitaPag = rdr.GetString(14)
                If Not rdr.IsDBNull(15) Then fattura.AnagraficaInfo.Iban = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then fattura.DescrizioneFattura = rdr.GetString(16)
                If Not rdr.IsDBNull(17) Then fattura.ImportoTotaleFattura = rdr.GetDecimal(17)
                If Not rdr.IsDBNull(18) Then fattura.AnagraficaInfo.IdConto = rdr.GetInt32(18)
                If Not rdr.IsDBNull(19) Then fattura.ImportoLiquidato = rdr.GetDecimal(19)
                If Not rdr.IsDBNull(20) Then fattura.Prog = rdr.GetInt64(20)
                If Not rdr.IsDBNull(21) Then fattura.IdProgFatturaInLiquidazione = rdr.GetInt64(21)
                If Not rdr.IsDBNull(22) Then fattura.Contratto.CodieCIG = rdr.GetString(22)
                If Not rdr.IsDBNull(23) Then fattura.Contratto.CodieCUP = rdr.GetString(23)

                listaFatture.Add(fattura)

            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try

        Return listaFatture
    End Function

    Function FO_Get_ListaFattureLiquidazioniAttiveByIdFattura(ByVal idFatturaSIC As String) As Collections.Generic.List(Of ItemFatturaInfoHeader)

        Dim listaFatture As New Generic.List(Of ItemFatturaInfoHeader)
        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""


        Sqlq = " SELECT  Fatture.id_fattura_SIC, Fatture.id_documento, Fatture.id_contratto, Fatture.numeroRepertorio, Fatture.numeroFatturaBeneficiario, Fatture.dataFatturaBeneficiario, " & _
                  "    Fatture.id_anagrafica, Fatture.denominazioneBeneficiario, Fatture.codiceFiscaleBeneficiario, Fatture.partitaIvaBeneficiario, Fatture.flagPersonaFisicaBeneficiario, " & _
                  "    Fatture.id_sede, CONVERT(VARCHAR(MAX), Fatture.sede) AS sede, Fatture.id_metodo_pagamento, Fatture.metodoPagamento, Fatture.iban, Fatture.descrizioneFattura, " & _
                    " Fatture.importo_totale_fattura, Documento_liquidazione.Dli_Stato " & _
                " FROM         Fatture INNER JOIN " & _
                  "                    Documento_Liquidazione_Fattura ON Fatture.Prog = Documento_Liquidazione_Fattura.prog_fattura INNER JOIN " & _
                   "                   Documento_liquidazione ON Documento_Liquidazione_Fattura.id_TabDocLiquidazione = Documento_liquidazione.Dli_prog " & _
                " WHERE     (Documento_liquidazione.Dli_Stato = 1) "

        Dim dimensioneParametri As Integer = 0
        Dim param(dimensioneParametri) As SqlClient.SqlParameter

        If idFatturaSIC <> "" Then
            ReDim Preserve param(dimensioneParametri)
            Dim par As New SqlClient.SqlParameter("@id_Fattura_SIC", SqlDbType.VarChar)
            par.Value = idFatturaSIC
            param(dimensioneParametri) = par
            Sqlq = Sqlq & " AND  Documento_Liquidazione_Fattura.id_Fattura_SIC=@id_Fattura_SIC  "

            dimensioneParametri = dimensioneParametri + 1
        End If


        Dim rdr As SqlClient.SqlDataReader

        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)

            While rdr.Read()

                Dim fattura As ItemFatturaInfoHeader = New ItemFatturaInfoHeader()

                If Not rdr.IsDBNull(0) Then fattura.IdUnivoco = rdr.GetString(0)
                If Not rdr.IsDBNull(1) Then fattura.IdDocumento = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then fattura.Contratto.IdContratto = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then fattura.Contratto.NumeroRepertorioContratto = rdr.GetString(3)
                fattura.Contratto.IdDocumento = fattura.IdDocumento

                If Not rdr.IsDBNull(4) Then fattura.NumeroFatturaBeneficiario = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then fattura.DataFatturaBeneficiario = rdr.GetDateTime(5)
                If Not rdr.IsDBNull(6) Then fattura.AnagraficaInfo.IdAnagrafica = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then fattura.AnagraficaInfo.Denominazione = rdr.GetString(7)
                If Not rdr.IsDBNull(8) Then fattura.AnagraficaInfo.CodiceFiscale = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then fattura.AnagraficaInfo.PartitaIva = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then fattura.AnagraficaInfo.FlagPersonaFisica = rdr.GetBoolean(10)
                If Not rdr.IsDBNull(11) Then fattura.AnagraficaInfo.IdSede = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then fattura.AnagraficaInfo.SedeVia = rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then fattura.AnagraficaInfo.IdModalitaPag = rdr.GetInt32(13)
                If Not rdr.IsDBNull(14) Then fattura.AnagraficaInfo.DescrizioneModalitaPag = rdr.GetString(14)
                If Not rdr.IsDBNull(15) Then fattura.AnagraficaInfo.Iban = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then fattura.DescrizioneFattura = rdr.GetString(16)
                If Not rdr.IsDBNull(17) Then fattura.ImportoTotaleFattura = rdr.GetDecimal(17)

                listaFatture.Add(fattura)

            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try

        Return listaFatture
    End Function
    Function FO_Get_ListaFattureImpegniAttiveByIdFattura(ByVal idFatturaSIC As String) As Collections.Generic.List(Of ItemFatturaInfoHeader)

        Dim listaFatture As New Generic.List(Of ItemFatturaInfoHeader)
        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""


        Sqlq = " SELECT  Fatture.id_fattura_SIC, Fatture.id_documento, Fatture.id_contratto, Fatture.numeroRepertorio, Fatture.numeroFatturaBeneficiario, Fatture.dataFatturaBeneficiario, " & _
                  "    Fatture.id_anagrafica, Fatture.denominazioneBeneficiario, Fatture.codiceFiscaleBeneficiario, Fatture.partitaIvaBeneficiario, Fatture.flagPersonaFisicaBeneficiario, " & _
                  "    Fatture.id_sede, CONVERT(VARCHAR(MAX), Fatture.sede) AS sede, Fatture.id_metodo_pagamento, Fatture.metodoPagamento, Fatture.iban, Fatture.descrizioneFattura, " & _
                    " Fatture.importo_totale_fattura, Documento_impegno.Di_Stato " & _
                " FROM         Fatture INNER JOIN " & _
                  "                    Documento_Impegno_Fattura ON Fatture.id_fattura_SIC = Documento_Impegno_Fattura.id_Fattura_SIC INNER JOIN " & _
                   "                   Documento_impegno ON Documento_Impegno_Fattura.id_TabDocImpegno = Documento_impegno.Di_prog " & _
                " WHERE     (Documento_impegno.Di_Stato = 1) "

        Dim dimensioneParametri As Integer = 0
        Dim param(dimensioneParametri) As SqlClient.SqlParameter

        If idFatturaSIC <> "" Then
            ReDim Preserve param(dimensioneParametri)
            Dim par As New SqlClient.SqlParameter("@id_Fattura_SIC", SqlDbType.VarChar)
            par.Value = idFatturaSIC
            param(dimensioneParametri) = par
            Sqlq = Sqlq & " AND  Documento_Impegno_Fattura.id_Fattura_SIC=@id_Fattura_SIC  "

            dimensioneParametri = dimensioneParametri + 1
        End If


        Dim rdr As SqlClient.SqlDataReader

        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)

            While rdr.Read()

                Dim fattura As ItemFatturaInfoHeader = New ItemFatturaInfoHeader()

                If Not rdr.IsDBNull(0) Then fattura.IdUnivoco = rdr.GetString(0)
                If Not rdr.IsDBNull(1) Then fattura.IdDocumento = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then fattura.Contratto.IdContratto = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then fattura.Contratto.NumeroRepertorioContratto = rdr.GetString(3)
                fattura.Contratto.IdDocumento = fattura.IdDocumento

                If Not rdr.IsDBNull(4) Then fattura.NumeroFatturaBeneficiario = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then fattura.DataFatturaBeneficiario = rdr.GetDateTime(5)
                If Not rdr.IsDBNull(6) Then fattura.AnagraficaInfo.IdAnagrafica = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then fattura.AnagraficaInfo.Denominazione = rdr.GetString(7)
                If Not rdr.IsDBNull(8) Then fattura.AnagraficaInfo.CodiceFiscale = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then fattura.AnagraficaInfo.PartitaIva = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then fattura.AnagraficaInfo.FlagPersonaFisica = rdr.GetBoolean(10)
                If Not rdr.IsDBNull(11) Then fattura.AnagraficaInfo.IdSede = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then fattura.AnagraficaInfo.SedeVia = rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then fattura.AnagraficaInfo.IdModalitaPag = rdr.GetInt32(13)
                If Not rdr.IsDBNull(14) Then fattura.AnagraficaInfo.DescrizioneModalitaPag = rdr.GetString(14)
                If Not rdr.IsDBNull(15) Then fattura.AnagraficaInfo.Iban = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then fattura.DescrizioneFattura = rdr.GetString(16)
                If Not rdr.IsDBNull(17) Then fattura.ImportoTotaleFattura = rdr.GetDecimal(17)

                listaFatture.Add(fattura)

            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try

        Return listaFatture
    End Function
    Function FO_Insert_Impegno_Var(ByVal item As ItemRiduzioneInfo) As ItemRiduzioneInfo
        Dim Insert_Impegno_Var As String = "INSERT INTO  [Documento_Impegno_var] " & _
"       ([Div_Documento] " & _
"          ,[Div_DataRegistrazione] " & _
"          ,[Div_Operatore] " & _
"          ,[Div_Bilancio] " & _
"          ,[Div_UPB] " & _
"          ,[Div_Cap] " & _
"          ,[Div_Costo] " & _
"          ,[Div_NumImpegno] " & _
"          ,[Div_Anno] " & _
"          ,[Div_NumeroReg] " & _
"          ,[Div_TipoAssunzione] " & _
"          ,[Div_Num_assunzione] " & _
"          ,[Div_Data_Assunzione] " & _
"          ,[Div_isEconomia] " & _
"          ,[Div_Stato] " & _
"          ,[Div_MissioneProgramma] " & _
"          ,[HashTokenCallSic] " & _
"          ,[IdDocContabileSic] " & _
"           ) " & _
"    VALUES " & _
"           (" & param_id_Documento & _
"           ," & param_DataRegistrazione & _
"           ," & param_Operatore & _
"           ," & param_Esercizio & _
"           , " & param_UPB & _
"           ," & param_Cap & _
"           ," & param_Costo & _
"           ," & param_NContabile & _
"           ," & param_AnnoImp & _
"           ," & param_NumRegistr & _
"           ," & param_TipoAssunzione & _
"           ," & param_NAssunzione & _
"           ," & param_DataAss & _
"           ," & param_isEconomia & _
"           ," & param_Stato & _
"           ," & param_MissioneProgramma & _
"           ," & param_HashTokenCallSic & _
"           ," & param_IdDocContabileSic & _
" )Select @@identity"


        ' Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(17) As SqlParameter
        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(0).Value = Now 'item.Dli_DataRegistrazione
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = item.Dli_Operatore
        parms(2) = New SqlParameter(param_NContabile, SqlDbType.VarChar)
        parms(2).Value = "" & item.Dli_NumImpegno
        parms(3) = New SqlParameter(param_UPB, SqlDbType.VarChar)
        parms(3).Value = IIf(item.Dli_UPB Is Nothing, "", item.Dli_UPB)
        parms(4) = New SqlParameter(param_Cap, SqlDbType.VarChar)
        parms(4).Value = IIf(item.Dli_Cap Is Nothing, "", item.Dli_Cap)
        parms(5) = New SqlParameter(param_Esercizio, SqlDbType.VarChar)
        parms(5).Value = IIf(item.Dli_Esercizio Is Nothing, "", item.Dli_Esercizio)
        parms(6) = New SqlParameter(param_Costo, SqlDbType.Decimal)
        parms(6).Value = item.Dli_Costo
        parms(7) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(7).Value = item.Dli_Documento
        parms(8) = New SqlParameter(param_AnnoImp, SqlDbType.VarChar)
        parms(8).Value = "" & item.DBi_Anno

        parms(9) = New SqlParameter(param_Stato, SqlDbType.Int)
        parms(9).Value = item.Di_Stato

        parms(10) = New SqlParameter(param_NumRegistr, SqlDbType.VarChar)
        parms(10).Value = "" & item.Div_NumeroReg



        parms(11) = New SqlParameter(param_NAssunzione, SqlDbType.VarChar)
        parms(11).Value = "" & item.Div_Num_assunzione
        parms(12) = New SqlParameter(param_TipoAssunzione, SqlDbType.Int)
        parms(12).Value = item.Div_TipoAssunzione
        parms(13) = New SqlParameter(param_DataAss, SqlDbType.DateTime)
        parms(13).Value = item.Div_Data_Assunzione
        parms(14) = New SqlParameter(param_isEconomia, SqlDbType.SmallInt)
        parms(14).Value = item.Div_IsEconomia
        parms(15) = New SqlParameter(param_MissioneProgramma, SqlDbType.VarChar)
        parms(15).Value = IIf(item.Dli_MissioneProgramma Is Nothing, "", item.Dli_MissioneProgramma)

        parms(16) = New SqlParameter(param_HashTokenCallSic, SqlDbType.VarChar)
        parms(16).Value = IIf(item.HashTokenCallSic Is Nothing, DBNull.Value, item.HashTokenCallSic)
        parms(17) = New SqlParameter(param_IdDocContabileSIC, SqlDbType.VarChar)
        parms(17).Value = IIf(item.IdDocContabileSic Is Nothing, DBNull.Value, item.IdDocContabileSic)

        'Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(strConn, CommandType.Text, Insert_Impegno_Var, parms, -1)

        'item.Dli_prog = returnValue


        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & item.Dli_Operatore & " costo:" & item.Dli_Costo)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction






        Try
            Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, Insert_Impegno_Var, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "IMPVAR", oOperatore, trans)
            trans.Commit()
            item.Dli_prog = returnValue


            ' 

        Catch ex As Exception
            Log.Error(oOperatore.Codice & " :" & ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try





        Return item

    End Function


    Function FO_Update_Impegno_Var(ByVal item As ItemRiduzioneInfo) As ItemRiduzioneInfo
        Dim listaitemLetti As Generic.List(Of DllDocumentale.ItemRiduzioneInfo) = FO_Get_DatiImpegniVariazioni(item.Dli_Documento, item.Dli_prog)

        If listaitemLetti.Count > 0 Then
            Dim itemLetto As DllDocumentale.ItemRiduzioneInfo = listaitemLetti.Item(0)

            Dim Update_Impegno_Var As String = " UPDATE  [Documento_impegno_var] " & _
    " SET [Div_DataRegistrazione] = " & param_DataRegistrazione & _
    "     ,[Div_Operatore] =  " & param_Operatore & _
    "     ,[Div_Bilancio] = " & param_Esercizio & _
    "     ,[Div_UPB] =" & param_UPB & _
    "     ,[Div_Cap] =  " & param_Cap & _
    "     ,[Div_Costo] = " & param_Costo & _
    "     ,[Div_NumImpegno] = " & param_NContabile & _
    "     ,[Div_NumeroReg]  = " & param_NumRegistr & _
    "     ,[Div_Anno] = " & param_AnnoImp & _
    "     ,[Div_TipoAssunzione] = " & param_TipoAssunzione & _
    "     ,[Div_Num_assunzione] = " & param_NAssunzione & _
    "     ,[Div_Data_Assunzione] =  " & param_DataAss & _
    "     ,[Div_isEconomia] = " & param_isEconomia & _
    "     ,[Div_Stato] = " & param_Stato & _
    "     ,[Div_MissioneProgramma] = " & param_MissioneProgramma & _
    "     ,[HashTokenCallSic] = " & param_HashTokenCallSic & _
    "     ,[IdDocContabileSic] = " & param_IdDocContabileSic & _
    " WHERE [Div_Documento] = " & param_id_Documento & " AND [Div_prog]= " & param_Prog_Contabilita




            ' Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            Dim parms(18) As SqlParameter
            parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
            parms(0).Value = Now 'item.Dli_DataRegistrazione
            parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
            parms(1).Value = item.Dli_Operatore
            parms(2) = New SqlParameter(param_NContabile, SqlDbType.VarChar)
            parms(2).Value = "" & item.Dli_NumImpegno
            parms(3) = New SqlParameter(param_UPB, SqlDbType.VarChar)
            parms(3).Value = IIf(item.Dli_UPB Is Nothing, "", item.Dli_UPB)
            parms(4) = New SqlParameter(param_Cap, SqlDbType.VarChar)
            parms(4).Value = IIf(item.Dli_Cap Is Nothing, "", item.Dli_Cap)
            parms(5) = New SqlParameter(param_Esercizio, SqlDbType.VarChar)
            parms(5).Value = IIf(item.Dli_Esercizio Is Nothing, "", item.Dli_Esercizio)
            parms(6) = New SqlParameter(param_Costo, SqlDbType.Decimal)
            parms(6).Value = item.Dli_Costo

            parms(7) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
            parms(7).Value = item.Dli_Documento
            parms(8) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
            parms(8).Value = item.Dli_prog
            parms(9) = New SqlParameter(param_AnnoImp, SqlDbType.VarChar)
            parms(9).Value = "" & item.DBi_Anno
            parms(10) = New SqlParameter(param_NumRegistr, SqlDbType.VarChar)
            parms(10).Value = "" & item.Div_NumeroReg

            parms(11) = New SqlParameter(param_NAssunzione, SqlDbType.VarChar)
            parms(11).Value = "" & item.Div_Num_assunzione
            parms(12) = New SqlParameter(param_TipoAssunzione, SqlDbType.Int)
            parms(12).Value = item.Div_TipoAssunzione
            parms(13) = New SqlParameter(param_DataAss, SqlDbType.DateTime)
            parms(13).Value = item.Div_Data_Assunzione
            parms(14) = New SqlParameter(param_isEconomia, SqlDbType.SmallInt)
            parms(14).Value = item.Div_IsEconomia
            parms(15) = New SqlParameter(param_Stato, SqlDbType.Int)
            parms(15).Value = item.Di_Stato
            parms(16) = New SqlParameter(param_MissioneProgramma, SqlDbType.VarChar)
            parms(16).Value = IIf(item.Dli_MissioneProgramma Is Nothing, "", item.Dli_MissioneProgramma)

            parms(17) = New SqlParameter(param_HashTokenCallSic, SqlDbType.VarChar)
            parms(17).Value = IIf(item.HashTokenCallSic Is Nothing, DBNull.Value, item.HashTokenCallSic)
            parms(18) = New SqlParameter(param_IdDocContabileSIC, SqlDbType.VarChar)
            parms(18).Value = IIf(item.IdDocContabileSic Is Nothing, DBNull.Value, item.IdDocContabileSic)

            Log.Debug("iddoc:" & item.Dli_Documento & " op:" & item.Dli_Operatore & " costo:" & item.Dli_Costo)

            Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
            conn.Open()
            Dim trans As SqlTransaction = Nothing

            trans = conn.BeginTransaction


            Try

                Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, Update_Impegno_Var, parms, -1)
                registra_AttivitaContabile(item.Dli_Documento, "UPIMPVAR", oOperatore, trans, "Num.Registrato:" & item.Div_NumeroReg)
                If itemLetto.Div_IsEconomia <> item.Div_IsEconomia Then
                    Dim messaggionote As String = "Variazione registrata in up:" & itemLetto.Div_IsEconomia & " , modificata in ragioneria :" & item.Div_IsEconomia
                    'la ragioneria ha modificato la tipologia di economia/Riduzione e registro l'attività nello storico
                    registra_AttivitaContabile(item.Dli_Documento, "", oOperatore, trans, messaggionote, "RAG_UPIMPVAR")
                End If
                trans.Commit()
            Catch ex As Exception
                Log.Error(oOperatore.Codice & " :" & ex.Message)

                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
                Throw New Exception(ex.Message)
            Finally
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End Try

            Return item
        Else
            Log.Error(oOperatore.Codice & " :" & "Elemento non trovato, impossibile aggiornare il dato")
            Throw New Exception("Elemento non trovato, impossibile aggiornare il dato")
        End If

    End Function


    Function FO_Insert_Bilancio(ByVal item As ItemImpegnoInfo) As ItemImpegnoInfo
        Dim Insert_Bilancio As String = "INSERT INTO  [Documento_Impegno] " & _
"       ([Di_Documento] " & _
"          ,[Di_DataRegistrazione] " & _
"          ,[Di_Operatore] " & _
"          ,[Di_Bilancio] " & _
"          ,[Di_UPB] " & _
"          ,[Di_Cap] " & _
"          ,[Di_Costo] " & _
"          ,[Di_NumImpegno] " & _
"          ,[Di_Anno] " & _
"          ,[Di_NPreImpegno] " & _
"          ,[Di_ContoEconomica] " & _
"          ,[Di_Ratei] " & _
"          ,[Di_Risconti] " & _
"          ,[Di_ImpostaIrap] " & _
"          ,[Di_NDocPrecedente] " & _
"          ,[Di_PreimpDaPrenotazione] " & _
"          ,[Di_Stato],[Di_CodObGestionale], [Di_PCF], [Di_MissioneProgramma] " & _
"          ,[HashTokenCallSic], [IdDocContabileSic], [HashTokenCallSic_Imp], [IdDocContabileSic_Imp]) " & _
"    VALUES " & _
"           (" & param_id_Documento & _
"           ," & param_DataRegistrazione & _
"           ," & param_Operatore & _
"           ," & param_Esercizio & _
"           , " & param_UPB & _
"           ," & param_Cap & _
"           ," & param_Costo & _
"           ," & param_NContabile & _
"           ," & param_AnnoImp & _
"           ," & param_NPreImp & _
"           ," & param_ContoEconomica & _
"           ," & param_Ratei & _
"           ," & param_Risconti & _
"           ," & param_ImpostaIrap & _
"           ," & param_NDocPrecedente & _
"           ," & param_PreImpDaPrenotazione & _
"           ," & param_Stato & _
"           ," & param_CodObGest & _
"           ," & param_PCF & _
"           ," & param_MissioneProgramma & _
"           ," & param_HashTokenCallSic & 
"           ," & param_IdDocContabileSIC & 
"           ," & param_HashTokenCallSic_Imp & 
"           ," & param_IdDocContabileSIC_Imp  & 
" )Select @@identity"








        Dim parms(23) As SqlParameter
        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(0).Value = Now 'item.Dli_DataRegistrazione
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = item.Dli_Operatore
        parms(2) = New SqlParameter(param_NContabile, SqlDbType.VarChar)
        parms(2).Value = "" & item.Dli_NumImpegno
        parms(3) = New SqlParameter(param_UPB, SqlDbType.VarChar)
        parms(3).Value = IIf(item.Dli_UPB Is Nothing, "", item.Dli_UPB)
        parms(4) = New SqlParameter(param_Cap, SqlDbType.VarChar)
        parms(4).Value = IIf(item.Dli_Cap Is Nothing, "", item.Dli_Cap)
        parms(5) = New SqlParameter(param_Esercizio, SqlDbType.VarChar)
        parms(5).Value = IIf(item.Dli_Esercizio Is Nothing, "", item.Dli_Esercizio)
        parms(6) = New SqlParameter(param_Costo, SqlDbType.Decimal)
        parms(6).Value = item.Dli_Costo
        parms(7) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(7).Value = item.Dli_Documento
        parms(8) = New SqlParameter(param_AnnoImp, SqlDbType.VarChar)
        parms(8).Value = "" & item.DBi_Anno
        parms(9) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
        parms(9).Value = "" & item.Dli_NPreImpegno

        parms(10) = New SqlParameter(param_ContoEconomica, SqlDbType.VarChar)
        parms(10).Value = "" & item.Di_ContoEconomica
        parms(11) = New SqlParameter(param_Ratei, SqlDbType.Decimal)
        parms(11).Value = item.Di_Ratei
        parms(12) = New SqlParameter(param_Risconti, SqlDbType.Decimal)
        parms(12).Value = item.Di_Risconti
        parms(13) = New SqlParameter(param_ImpostaIrap, SqlDbType.Decimal)
        parms(13).Value = item.Di_ImpostaIrap
        parms(14) = New SqlParameter(param_NDocPrecedente, SqlDbType.VarChar)
        parms(14).Value = "" & item.NDocPrecedente
        parms(15) = New SqlParameter(param_PreImpDaPrenotazione, SqlDbType.SmallInt)
        parms(15).Value = item.Di_PreImpDaPrenotazione
        parms(16) = New SqlParameter(param_Stato, SqlDbType.Int)
        parms(16).Value = item.Di_Stato
        parms(17) = New SqlParameter(param_CodObGest, SqlDbType.VarChar)
        parms(17).Value = "" & item.Codice_Obbiettivo_Gestionale
        parms(18) = New SqlParameter(param_PCF, SqlDbType.VarChar)
        parms(18).Value = "" & item.Piano_Dei_Conti_Finanziari
        parms(19) = New SqlParameter(param_MissioneProgramma, SqlDbType.VarChar)
        parms(19).Value = IIf(item.Dli_MissioneProgramma Is Nothing, "", item.Dli_MissioneProgramma)

        parms(20) = New SqlParameter(param_HashTokenCallSic, SqlDbType.VarChar)
        parms(20).Value = IIf(item.HashTokenCallSic Is Nothing, DBNull.Value, item.HashTokenCallSic)
        parms(21) = New SqlParameter(param_IdDocContabileSIC, SqlDbType.VarChar)
        parms(21).Value = IIf(item.IdDocContabileSic Is Nothing, DBNull.Value, item.IdDocContabileSic)

        parms(22) = New SqlParameter(param_HashTokenCallSic_Imp, SqlDbType.VarChar)
        parms(22).Value = IIf(item.HashTokenCallSic_Imp Is Nothing, DBNull.Value, item.HashTokenCallSic_Imp)
        parms(23) = New SqlParameter(param_IdDocContabileSIC_Imp, SqlDbType.VarChar)
        parms(23).Value = IIf(item.IdDocContabileSic_Imp Is Nothing, DBNull.Value, item.IdDocContabileSic_Imp)


        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & item.Dli_Operatore & " costo:" & item.Dli_Costo)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlClient.SqlTransaction = conn.BeginTransaction
        Try


            '  Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(strConn, CommandType.Text, Insert_Bilancio, parms, -1)
            Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, Insert_Bilancio, parms, -1)

            registra_AttivitaContabile(item.Dli_Documento, "IMP", oOperatore, trans)
            trans.Commit()

            item.Dli_prog = returnValue

        Catch ex As Exception
            Log.Error("FO_Insert_Bilancio" & ":" & ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try


        Return item

    End Function
    Function FO_Insert_PreimpegniProvvisori(ByVal item As ItemImpegnoInfo) As ItemImpegnoInfo
        Dim Insert_Bilancio As String = "INSERT INTO  [Documento_Preimpegno] " & _
"       ([Di_Documento] " & _
"          ,[Di_DataRegistrazione] " & _
"          ,[Di_Operatore] " & _
"          ,[Di_Bilancio] " & _
"          ,[Di_UPB] " & _
"          ,[Di_Cap] " & _
"          ,[Di_Costo] " & _
"          ,[Di_NPreImpegno] " & _
"          ,[Di_ContoEconomica] " & _
"          ,[Di_Stato],[Di_CodObGestionale], [Di_PCF], [Di_MissioneProgramma]" & _
"          ,[Di_TipoAssunzioneDescr],[Di_TipoAssunzione], [Di_Num_assunzione], [Di_Data_Assunzione], [HashTokenCallSic], [IdDocContabileSic]) " & _
"    VALUES " & _
"           (" & param_id_Documento & _
"           ," & param_DataRegistrazione & _
"           ," & param_Operatore & _
"           ," & param_Esercizio & _
"           , " & param_UPB & _
"           ," & param_Cap & _
"           ," & param_Costo & _
"           ," & param_NPreImp & _
"           ," & param_ContoEconomica & _
"           ," & param_Stato & _
"           ," & param_CodObGest & _
"           ," & param_PCF & _
"           ," & param_MissioneProgramma & _
"           ," & param_TipoAtto & _
"           ," & param_TipoAssunzione & _
"           ," & param_NAssunzione & _
"           ," & param_DataAss & _
"           ," & param_HashTokenCallSic & _
"           ," & param_IdDocContabileSIC & _
" )Select @@identity"


        Dim parms(18) As SqlParameter
        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(0).Value = Now 'item.Dli_DataRegistrazione
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = item.Dli_Operatore
        parms(2) = New SqlParameter(param_UPB, SqlDbType.VarChar)
        parms(2).Value = IIf(item.Dli_UPB Is Nothing, "", item.Dli_UPB)
        parms(3) = New SqlParameter(param_Cap, SqlDbType.VarChar)
        parms(3).Value = IIf(item.Dli_Cap Is Nothing, "", item.Dli_Cap)
        parms(4) = New SqlParameter(param_Esercizio, SqlDbType.VarChar)
        parms(4).Value = IIf(item.Dli_Esercizio Is Nothing, "", item.Dli_Esercizio)
        parms(5) = New SqlParameter(param_Costo, SqlDbType.Decimal)
        parms(5).Value = item.Dli_Costo
        parms(6) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(6).Value = item.Dli_Documento

        parms(7) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
        parms(7).Value = "" & item.Dli_NPreImpegno

        parms(8) = New SqlParameter(param_ContoEconomica, SqlDbType.VarChar)
        parms(8).Value = "" & item.Di_ContoEconomica
        parms(9) = New SqlParameter(param_Stato, SqlDbType.Int)
        parms(9).Value = item.Di_Stato
        parms(10) = New SqlParameter(param_CodObGest, SqlDbType.VarChar)
        parms(10).Value = "" & item.Codice_Obbiettivo_Gestionale
        parms(11) = New SqlParameter(param_PCF, SqlDbType.VarChar)
        parms(11).Value = "" & item.Piano_Dei_Conti_Finanziari
        parms(12) = New SqlParameter(param_MissioneProgramma, SqlDbType.VarChar)
        parms(12).Value = IIf(item.Dli_MissioneProgramma Is Nothing, "", item.Dli_MissioneProgramma)

        parms(13) = New SqlParameter(param_TipoAtto, SqlDbType.VarChar)
        parms(13).Value = IIf(item.Di_TipoAssunzioneDescr Is Nothing, "", item.Di_TipoAssunzioneDescr)
        parms(14) = New SqlParameter(param_TipoAssunzione, SqlDbType.Int)
        parms(14).Value = item.Di_TipoAssunzione
        parms(15) = New SqlParameter(param_NAssunzione, SqlDbType.VarChar)
        parms(15).Value = IIf(item.Di_Num_assunzione Is Nothing, "", item.Di_Num_assunzione)
        parms(16) = New SqlParameter(param_DataAss, SqlDbType.DateTime)
        parms(16).Value = item.Di_Data_Assunzione
        parms(17) = New SqlParameter(param_HashTokenCallSic, SqlDbType.VarChar)
        parms(17).Value = item.HashTokenCallSic
        parms(18) = New SqlParameter(param_IdDocContabileSIC, SqlDbType.VarChar)
        parms(18).Value = item.IdDocContabileSic

        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & item.Dli_Operatore & " costo:" & item.Dli_Costo)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlClient.SqlTransaction = conn.BeginTransaction
        Try


            '  Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(strConn, CommandType.Text, Insert_Bilancio, parms, -1)
            Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, Insert_Bilancio, parms, -1)

            registra_AttivitaContabile(item.Dli_Documento, "PREIMP", oOperatore, trans)
            trans.Commit()

            item.Dli_prog = returnValue

        Catch ex As Exception
            Log.Error("FO_Insert_Bilancio" & ":" & ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try


        Return item

    End Function
    Function FO_Insert_impegno_LiqContestuali_Da_WS(ByVal opOperazione As DllAmbiente.Operatore, ByVal item As ItemImpegnoInfo, ByVal listaLiq As Generic.List(Of ItemLiquidazioneInfo)) As ItemImpegnoInfo
        Const SFunzione As String = "FO_Insert_impegno_LiqContestuali"

        Dim Insert_Bilancio As String = "INSERT INTO  [Documento_Impegno] " & _
"       ([Di_Documento] " & _
"          ,[Di_DataRegistrazione] " & _
"          ,[Di_Operatore] " & _
"          ,[Di_Bilancio] " & _
"          ,[Di_UPB] " & _
"          ,[Di_Cap] " & _
"          ,[Di_Costo] " & _
"          ,[Di_NumImpegno] " & _
"          ,[Di_Anno] " & _
"          ,[Di_NPreImpegno] " & _
"          ,[Di_ContoEconomica] " & _
"          ,[Di_Ratei] " & _
"          ,[Di_Risconti] " & _
"          ,[Di_ImpostaIrap] " & _
"          ,[Di_NDocPrecedente] " & _
"          ,[Di_PreimpDaPrenotazione] " & _
"          ,[Di_Stato] " & _
"          ,[Di_CodObGestionale] " & _
"          , [Di_MissioneProgramma] " & _
"          , [Di_PCF]  " & _
"          , [HashTokenCallSic]  " & _
"          , [IdDocContabileSic]  " & _
"          , [HashTokenCallSic_Imp]  " & _
"          , [IdDocContabileSic_Imp]) " & _
"    VALUES " & _
"           (" & param_id_Documento & _
"           ," & param_DataRegistrazione & _
"           ," & param_Operatore & _
"           ," & param_Esercizio & _
"           , " & param_UPB & _
"           ," & param_Cap & _
"           ," & param_Costo & _
"           ," & param_NContabile & _
"           ," & param_AnnoImp & _
"           ," & param_NPreImp & _
"           ," & param_ContoEconomica & _
"           ," & param_Ratei & _
"           ," & param_Risconti & _
"           ," & param_ImpostaIrap & _
"           ," & param_NDocPrecedente & _
"           ," & param_PreImpDaPrenotazione & _
"           ," & param_Stato & _
"           ," & param_CodObGest & _
"           ," & param_MissioneProgramma & _
"           ," & param_PCF & _
"           ," & param_HashTokenCallSic & _
"           ," & param_IdDocContabileSIC & _
"           ," & param_HashTokenCallSic_Imp & _
"           ," & param_IdDocContabileSIC_Imp & _
" );"

        Insert_Bilancio = Insert_Bilancio & "update Documento_impegno " & _
        " set Di_NPreImpegno='tmp' + convert(varchar(55),@@identity ) where di_prog=@@identity and Di_NPreImpegno='' ;select scope_identity()"

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing
        
        trans = conn.BeginTransaction

        Dim parms(23) As SqlParameter
        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(0).Value = Now 'item.Dli_DataRegistrazione
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = item.Dli_Operatore
        parms(2) = New SqlParameter(param_NContabile, SqlDbType.VarChar)
        parms(2).Value = "" & item.Dli_NumImpegno
        parms(3) = New SqlParameter(param_UPB, SqlDbType.VarChar)
        parms(3).Value = IIf(item.Dli_UPB Is Nothing, "", item.Dli_UPB)
        parms(4) = New SqlParameter(param_Cap, SqlDbType.VarChar)
        parms(4).Value = IIf(item.Dli_Cap Is Nothing, "", item.Dli_Cap)
        parms(5) = New SqlParameter(param_Esercizio, SqlDbType.VarChar)
        parms(5).Value = IIf(item.Dli_Esercizio Is Nothing, "", item.Dli_Esercizio)
        parms(6) = New SqlParameter(param_Costo, SqlDbType.Decimal)
        parms(6).Value = item.Dli_Costo
        parms(7) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(7).Value = item.Dli_Documento
        parms(8) = New SqlParameter(param_AnnoImp, SqlDbType.VarChar)
        parms(8).Value = "" & item.DBi_Anno
        parms(9) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
        parms(9).Value = "" & item.Dli_NPreImpegno

        parms(10) = New SqlParameter(param_ContoEconomica, SqlDbType.VarChar)
        parms(10).Value = "" & item.Di_ContoEconomica
        parms(11) = New SqlParameter(param_Ratei, SqlDbType.Decimal)
        parms(11).Value = item.Di_Ratei
        parms(12) = New SqlParameter(param_Risconti, SqlDbType.Decimal)
        parms(12).Value = item.Di_Risconti
        parms(13) = New SqlParameter(param_ImpostaIrap, SqlDbType.Decimal)
        parms(13).Value = item.Di_ImpostaIrap
        parms(14) = New SqlParameter(param_NDocPrecedente, SqlDbType.VarChar)
        parms(14).Value = "" & item.NDocPrecedente
        parms(15) = New SqlParameter(param_PreImpDaPrenotazione, SqlDbType.SmallInt)
        parms(15).Value = item.Di_PreImpDaPrenotazione
        parms(16) = New SqlParameter(param_Stato, SqlDbType.Int)
        parms(16).Value = item.Di_Stato
        parms(17) = New SqlParameter(param_CodObGest, SqlDbType.VarChar)
        parms(17).Value = IIf(String.IsNullOrEmpty(item.Codice_Obbiettivo_Gestionale), "", item.Codice_Obbiettivo_Gestionale)
        parms(18) = New SqlParameter(param_MissioneProgramma, SqlDbType.VarChar)
        parms(18).Value = IIf(item.Dli_MissioneProgramma Is Nothing, "", item.Dli_MissioneProgramma)
        parms(19) = New SqlParameter(param_PCF, SqlDbType.VarChar)
        parms(19).Value = IIf(String.IsNullOrEmpty(item.Piano_Dei_Conti_Finanziari), "", item.Piano_Dei_Conti_Finanziari)

        parms(20) = New SqlParameter(param_HashTokenCallSic, SqlDbType.VarChar)
        parms(20).Value = IIf(item.HashTokenCallSic Is Nothing, DBNull.Value, item.HashTokenCallSic)
        parms(21) = New SqlParameter(param_IdDocContabileSIC, SqlDbType.VarChar)
        parms(21).Value = IIf(item.IdDocContabileSic Is Nothing, DBNull.Value, item.IdDocContabileSic)
        parms(22) = New SqlParameter(param_HashTokenCallSic_Imp, SqlDbType.VarChar)
        parms(22).Value =IIf(item.HashTokenCallSic_Imp Is Nothing, DBNull.Value, item.HashTokenCallSic_Imp)
        parms(23) = New SqlParameter(param_IdDocContabileSIC_Imp, SqlDbType.VarChar)
        parms(23).Value = IIf(item.IdDocContabileSic_Imp Is Nothing, DBNull.Value, item.IdDocContabileSic_Imp)


        Dim returnValue As Integer = 0

        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & item.Dli_Operatore & " costo:" & item.Dli_Costo)
        Try
            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, Insert_Bilancio, parms, -1)

            item.Dli_prog = returnValue
            If item.Di_PreImpDaPrenotazione <> 1 Then
                item.Dli_NPreImpegno = "tmp" & returnValue
            End If

            Dim listaBeneficiariImpegno As List(Of DllDocumentale.ItemLiquidazioneImpegnoBeneficiarioInfo) = item.ListaBeneficiari
            If Not listaBeneficiariImpegno Is Nothing AndAlso listaBeneficiariImpegno.Count = 1 Then
                Dim beneficiariImpegno As DllDocumentale.ItemLiquidazioneImpegnoBeneficiarioInfo = listaBeneficiariImpegno.ElementAt(0)
                beneficiariImpegno.IDDocumentoContabile = item.Dli_prog
                FO_Insert_DocumentoImpegnoBeneficiario(opOperazione, beneficiariImpegno, trans)
            End If


            For Each liq As ItemLiquidazioneInfo In listaLiq
                liq.Dli_IdImpegno = item.Dli_prog
                liq.Dli_NPreImpegno = item.Dli_NPreImpegno
                FO_Insert_Liquidazione_Fatture_E_Beneficiari(opOperazione, liq, trans)
            Next

            trans.Commit()

        Catch ex As Exception
            Log.Error(SFunzione & ":" & ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try



        Return item

    End Function
    'LU aggiunta  gestione transazione 23/04/09
    Function FO_Update_Bilancio_E_Liq_NumImpegnoEDatiAssunzione(ByVal itemImp As ItemImpegnoInfo, ByVal itemLiq As ItemLiquidazioneInfo) As Boolean
        Const SFunzione As String = "FO_Update_Bilancio_E_Liq_NumImpegnoEDatiAssunzione"
        Dim result As Boolean = False
        Log.Debug(" op:" & oOperatore.Codice)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing
        trans = conn.BeginTransaction
        Try
            FO_Update_Bilancio(itemImp, trans)
            FO_Update_Liq_NumImpegnoEDatiAssunzione(itemLiq, trans)
            trans.Commit()
            result = True
        Catch ex As Exception
            Log.Error(SFunzione & ":" & ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try

        Return result


    End Function



    Function FO_Update_Bilancio(ByVal item As ItemImpegnoInfo, Optional ByRef trans As SqlTransaction = Nothing) As ItemImpegnoInfo
        'LU modifica gestione transazione 23/04/09
        Dim flagTransEsterna As Boolean = False
        If trans Is Nothing Then
            flagTransEsterna = False
        Else
            flagTransEsterna = True
        End If
        Dim Update_Bilancio As String = " UPDATE  [Documento_impegno] " & _
     " SET [Di_DataRegistrazione] = " & param_DataRegistrazione & _
     "     ,[Di_Operatore] =  " & param_Operatore & _
     "     ,[Di_Bilancio] = " & param_Esercizio & _
     "     ,[Di_UPB] =" & param_UPB & _
     "     ,[Di_Cap] =  " & param_Cap & _
     "     ,[Di_Costo] = " & param_Costo & _
     "     ,[Di_NumImpegno] = " & param_NContabile & _
     "     ,[Di_Anno] = " & param_AnnoImp & _
     "     ,[Di_NPreImpegno] = " & param_NPreImp & _
     "     ,[Di_ContoEconomica] = " & param_ContoEconomica & _
     "     ,[Di_Ratei] = " & param_Ratei & _
     "     ,[Di_Risconti] = " & param_Risconti & _
     "     ,[Di_ImpostaIrap] = " & param_ImpostaIrap & _
     "     ,[Di_NDocPrecedente] = " & param_NDocPrecedente & _
     "     ,[Di_Stato] = " & param_Stato & _
     "     ,[Di_PCF] = " & param_PCF & _
     "     ,[Di_MissioneProgramma] = " & param_MissioneProgramma & _
     "     ,[HashTokenCallSic] = " & param_HashTokenCallSic & _
     "     ,[IdDocContabileSic] = " & param_IdDocContabileSIC & _
     "     ,[HashTokenCallSic_Imp] = " & param_HashTokenCallSic_Imp & _
     "     ,[IdDocContabileSic_Imp] = " & param_IdDocContabileSIC_Imp & _
             " WHERE [Di_Documento] = " & param_id_Documento & " AND [Di_prog]= " & param_Prog_Contabilita




        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(22) As SqlParameter
        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(0).Value = Now 'item.Dli_DataRegistrazione
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = item.Dli_Operatore
        parms(2) = New SqlParameter(param_NContabile, SqlDbType.VarChar)
        parms(2).Value = "" & item.Dli_NumImpegno
        parms(3) = New SqlParameter(param_UPB, SqlDbType.VarChar)
        parms(3).Value = IIf(item.Dli_UPB Is Nothing, "", item.Dli_UPB)
        parms(4) = New SqlParameter(param_Cap, SqlDbType.VarChar)
        parms(4).Value = IIf(item.Dli_Cap Is Nothing, "", item.Dli_Cap)
        parms(5) = New SqlParameter(param_Esercizio, SqlDbType.VarChar)
        parms(5).Value = IIf(item.Dli_Esercizio Is Nothing, "", item.Dli_Esercizio)
        parms(6) = New SqlParameter(param_Costo, SqlDbType.Decimal)
        parms(6).Value = item.Dli_Costo

        parms(7) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(7).Value = item.Dli_Documento
        parms(8) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(8).Value = item.Dli_prog
        parms(9) = New SqlParameter(param_AnnoImp, SqlDbType.VarChar)
        parms(9).Value = "" & item.DBi_Anno
        parms(10) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
        parms(10).Value = "" & item.Dli_NPreImpegno

        parms(11) = New SqlParameter(param_ContoEconomica, SqlDbType.VarChar)
        parms(11).Value = "" & item.Di_ContoEconomica
        parms(12) = New SqlParameter(param_Ratei, SqlDbType.Decimal)
        parms(12).Value = item.Di_Ratei

        parms(13) = New SqlParameter(param_Risconti, SqlDbType.Decimal)
        parms(13).Value = item.Di_Risconti

        parms(14) = New SqlParameter(param_ImpostaIrap, SqlDbType.Decimal)
        parms(14).Value = item.Di_ImpostaIrap


        parms(15) = New SqlParameter(param_NDocPrecedente, SqlDbType.VarChar)
        parms(15).Value = "" & item.NDocPrecedente

        parms(16) = New SqlParameter(param_Stato, SqlDbType.VarChar)
        parms(16).Value = "" & item.Di_Stato

        parms(17) = New SqlParameter(param_PCF, SqlDbType.VarChar)
        parms(17).Value = "" & item.Piano_Dei_Conti_Finanziari

        parms(18) = New SqlParameter(param_MissioneProgramma, SqlDbType.VarChar)
        parms(18).Value = IIf(item.Dli_MissioneProgramma Is Nothing, "", item.Dli_MissioneProgramma)

        parms(19) = New SqlParameter(param_HashTokenCallSic, SqlDbType.VarChar)
        parms(19).Value = IIf(item.HashTokenCallSic Is Nothing, DBNull.Value, item.HashTokenCallSic)
        parms(20) = New SqlParameter(param_IdDocContabileSIC, SqlDbType.VarChar)
        parms(20).Value = IIf(item.IdDocContabileSic Is Nothing, DBNull.Value, item.IdDocContabileSic)

        parms(21) = New SqlParameter(param_HashTokenCallSic_Imp, SqlDbType.VarChar)
        parms(21).Value = IIf(item.HashTokenCallSic_Imp Is Nothing, DBNull.Value, item.HashTokenCallSic_Imp)
        parms(22) = New SqlParameter(param_IdDocContabileSIC_Imp, SqlDbType.VarChar)
        parms(22).Value = IIf(item.IdDocContabileSic_Imp Is Nothing, DBNull.Value, item.IdDocContabileSic_Imp)

        Dim returnValue As Integer = 0
        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & item.Dli_Operatore & " costo:" & item.Dli_Costo)

        If flagTransEsterna Then
            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, Update_Bilancio, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "UPIMP", oOperatore, trans)
        Else


            Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
            conn.Open()
            Dim transInterna As SqlClient.SqlTransaction = conn.BeginTransaction
            Try

                returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(transInterna, CommandType.Text, Update_Bilancio, parms, -1)

                registra_AttivitaContabile(item.Dli_Documento, "UPIMP", oOperatore, transInterna)
                transInterna.Commit()

            Catch ex As Exception
                Log.Error(ex.Message)

                If Not transInterna Is Nothing Then
                    transInterna.Rollback()
                End If
                Throw New Exception(ex.Message)
            Finally
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End Try

        End If


        Return item
    End Function


    Function FO_Insert_Mandato(ByVal item As ItemMandatoInfo) As ItemMandatoInfo
        Dim Insert_Mandato As String = "INSERT INTO  [Documento_Mandato]" & _
        "   ([Man_Nmandato]" & _
          " ,[Man_Doc_id]" & _
          " ,[Man_Nimpegno]" & _
          " ,[Man_NLiquidazione]" & _
          " ,[Man_NImporto]" & _
          " ,[Man_DataMandato])" & _
        "VALUES" & _
  " (" & param_NMandato & _
          "           ," & param_id_Documento & _
           "           ," & param_NImpegno & _
           "           ," & param_NLiquidazione & _
           "           ," & param_Importo & _
           "           ," & param_DataRegistrazione & _
" )Select @@identity"








        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(5) As SqlParameter
        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(0).Value = item.Man_DataMandato
        parms(1) = New SqlParameter(param_NMandato, SqlDbType.VarChar)
        parms(1).Value = item.Man_Nmandato
        parms(2) = New SqlParameter(param_NLiquidazione, SqlDbType.BigInt)
        parms(2).Value = item.Man_NLiquidazione
        parms(3) = New SqlParameter(param_Importo, SqlDbType.Decimal)
        parms(3).Value = item.Man_NImporto
        parms(4) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(4).Value = item.Man_Doc_id
        parms(5) = New SqlParameter(param_NImpegno, SqlDbType.VarChar)
        parms(5).Value = item.Man_Nimpegno

        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(strConn, CommandType.Text, Insert_Mandato, parms, -1)

        item.Man_id = returnValue

        Return item

    End Function
    Function FO_Insert_Liquidazione(ByVal item As ItemLiquidazioneInfo, Optional ByVal trans As SqlTransaction = Nothing) As ItemLiquidazioneInfo

        Dim flagTransEsterna As Boolean = False
        If trans Is Nothing Then
            flagTransEsterna = False
        Else
            flagTransEsterna = True
        End If

        Dim Insert_Liquidazione As String = "INSERT INTO  [Documento_liquidazione] " & _
"  ([Dli_Documento] " & _
"           ,[Dli_DataRegistrazione] " & _
"           ,[Dli_Operatore] " & _
"           ,[Dli_Esercizio] " & _
"           ,[Dli_UPB] " & _
"           ,[Dli_Cap] " & _
"           ,[Dli_Costo] " & _
"           ,[Dli_NumImpegno] " & _
"           ,[Dli_TipoAssunzione] " & _
"           ,[Dli_Num_assunzione] " & _
"           ,[Dli_Data_Assunzione] " & _
"           ,[Dli_Anno] " & _
"           ,[Dli_NPreImpegno] " & _
"           ,[Dli_NLiquidazione] " & _
"           ,[Dli_ContoEconomica] " & _
"           ,[Dli_ImportoIva] " & _
"           ,[Dli_POR] " & _
"           ,[Dli_AllegatoPor]  " & _
"           ,[Dli_Stato] " & _
"           ,[Dli_IdImpegno] " & _
"           ,[Dli_MissioneProgramma]" & _
"           ,[Dli_PCF]" & _
"           ,[HashTokenCallSic] " & _
"           ,[IdDocContabileSic])" & _
"     VALUES (" & _
param_id_Documento & _
"           ," & param_DataRegistrazione & _
"           ," & param_Operatore & _
"           ," & param_Esercizio & _
"           ," & param_UPB & _
"           ," & param_Cap & _
"           , " & param_Costo & _
"           ," & param_NContabile & _
"           ," & param_TipoAssunzione & _
"           ," & param_NAssunzione & _
"           ," & param_DataAss & _
"           ," & param_AnnoImp & _
"           ," & param_NPreImp & _
"           ," & param_NLiquidazione & _
"           ," & param_ContoEconomica & _
"           ," & param_ImportoIva & _
"           ," & param_Por & _
"           ," & param_AllegatoPor & _
"           ," & param_Stato & _
"           ," & param_IdImpegno & _
"           ," & param_MissioneProgramma & _
"           ," & param_PCF & _
"           ," & param_HashTokenCallSic & _
"           ," & param_IdDocContabileSic & _
");Select @@identity"


        ' Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(23) As SqlParameter
        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(0).Value = Now
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = item.Dli_Operatore
        parms(2) = New SqlParameter(param_NContabile, SqlDbType.VarChar)
        parms(2).Value = "" & item.Dli_NumImpegno
        parms(3) = New SqlParameter(param_UPB, SqlDbType.VarChar)
        parms(3).Value = IIf(item.Dli_UPB Is Nothing, "", item.Dli_UPB)
        parms(4) = New SqlParameter(param_Cap, SqlDbType.VarChar)
        parms(4).Value = IIf(item.Dli_Cap Is Nothing, "", item.Dli_Cap)
        parms(5) = New SqlParameter(param_Esercizio, SqlDbType.VarChar)
        parms(5).Value = IIf(item.Dli_Esercizio Is Nothing, "", item.Dli_Esercizio)
        parms(6) = New SqlParameter(param_Costo, SqlDbType.Decimal)
        parms(6).Value = item.Dli_Costo

        parms(7) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(7).Value = item.Dli_Documento

        parms(8) = New SqlParameter(param_NAssunzione, SqlDbType.VarChar)
        parms(8).Value = "" & item.Dli_Num_assunzione
        parms(9) = New SqlParameter(param_TipoAssunzione, SqlDbType.Int)
        parms(9).Value = item.Dli_TipoAssunzione
        parms(10) = New SqlParameter(param_DataAss, SqlDbType.DateTime)
        parms(10).Value = item.Dli_Data_Assunzione
        parms(11) = New SqlParameter(param_AnnoImp, SqlDbType.VarChar)
        parms(11).Value = "" & item.Dli_Anno
        parms(12) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
        parms(12).Value = "" & item.Dli_NPreImpegno

        parms(13) = New SqlParameter(param_NLiquidazione, SqlDbType.BigInt)
        parms(13).Value = item.Dli_NLiquidazione

        parms(14) = New SqlParameter(param_ContoEconomica, SqlDbType.VarChar)
        parms(14).Value = "" & item.Di_ContoEconomica
        parms(15) = New SqlParameter(param_ImportoIva, SqlDbType.Decimal)
        parms(15).Value = item.Dli_ImportoIva
        parms(16) = New SqlParameter(param_Por, SqlDbType.SmallInt)
        parms(16).Value = item.Dli_Por
        parms(17) = New SqlParameter(param_AllegatoPor, SqlDbType.Image)
        parms(17).Value = IIf(item.Dli_Allegato Is Nothing, DBNull.Value, item.Dli_Allegato)
        parms(18) = New SqlParameter(param_Stato, SqlDbType.Int)
        parms(18).Value = item.Di_Stato
        parms(19) = New SqlParameter(param_IdImpegno, SqlDbType.BigInt)
        parms(19).Value = IIf(item.Dli_IdImpegno = 0, DBNull.Value, item.Dli_IdImpegno)
        parms(20) = New SqlParameter(param_MissioneProgramma, SqlDbType.VarChar)
        parms(20).Value = IIf(item.Dli_MissioneProgramma Is Nothing, "", item.Dli_MissioneProgramma)

        parms(21) = New SqlParameter(param_PCF, SqlDbType.VarChar)
        parms(21).Value = IIf(item.Dli_PianoDeiContiFinanziari Is Nothing, "", item.Dli_PianoDeiContiFinanziari)

        parms(22) = New SqlParameter(param_HashTokenCallSic, SqlDbType.VarChar)
        parms(22).Value = IIf(item.HashTokenCallSic Is Nothing, DBNull.Value, item.HashTokenCallSic)

        parms(23) = New SqlParameter(param_IdDocContabileSic, SqlDbType.VarChar)
        parms(23).Value = IIf(item.IdDocContabileSic Is Nothing, DBNull.Value, item.IdDocContabileSic)


        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & item.Dli_Operatore & " costo:" & item.Dli_Costo)

        Dim returnValue As Integer = 0


        If flagTransEsterna Then
            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, Insert_Liquidazione, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "LIQ", oOperatore, trans)

        Else
            Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
            conn.Open()
            Dim transInterna As SqlTransaction = Nothing

            transInterna = conn.BeginTransaction

            Try

                returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(transInterna, CommandType.Text, Insert_Liquidazione, parms, -1)

                registra_AttivitaContabile(item.Dli_Documento, "LIQ", oOperatore, transInterna)
                transInterna.Commit()
                item.Dli_prog = returnValue

            Catch ex As Exception
                Log.Error(oOperatore.Codice & " :" & ex.Message)

                If Not transInterna Is Nothing Then
                    transInterna.Rollback()
                End If
                Throw New Exception(ex.Message)
            Finally
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End Try

        End If

        'Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(strConn, CommandType.Text, Insert_Liquidazione, parms, -1)
        item.Dli_prog = returnValue
        Return item
    End Function


    Function FO_Update_Liquidazione(ByVal item As ItemLiquidazioneInfo) As ItemLiquidazioneInfo

        Dim Update_Liquidazione As String = " UPDATE  [Documento_liquidazione] " & _
        " SET   [Dli_DataRegistrazione] = " & param_DataRegistrazione & _
"      ,[Dli_Operatore] = " & param_Operatore & _
"      ,[Dli_Esercizio] = " & param_Esercizio & _
"      ,[Dli_UPB] = " & param_UPB & _
"      ,[Dli_Cap] = " & param_Cap & _
"      ,[Dli_Costo] = " & param_Costo & _
"      ,[Dli_NumImpegno] = " & param_NContabile & _
"      ,[Dli_TipoAssunzione] = " & param_TipoAssunzione & _
"      ,[Dli_Num_assunzione] = " & param_NAssunzione & _
"      ,[Dli_Data_Assunzione] =  " & param_DataAss & _
"      ,[Dli_Anno] =  " & param_AnnoImp & _
"      ,[Dli_NPreImpegno] =  " & param_NPreImp & _
"           ,[Dli_NLiquidazione] =  " & param_NLiquidazione & _
"           ,[Dli_ContoEconomica] =  " & param_ContoEconomica & _
"           ,[Dli_ImportoIva]=  " & param_ImportoIva & _
"           ,[Dli_POR] =  " & param_Por & _
"           ,[Dli_AllegatoPor] =  " & param_AllegatoPor & _
"           ,[Dli_Stato] =  " & param_Stato & _
"           ,[Dli_MissioneProgramma] =  " & param_MissioneProgramma & _
"           ,[Dli_PCF] =  " & param_PCF & _
"           ,[HashTokenCallSic] =  " & param_HashTokenCallSic & _
"           ,[IdDocContabileSic] =  " & param_IdDocContabileSic & _
        " WHERE [Dli_Documento] = " & param_id_Documento & " AND [Dli_prog]= " & param_Prog_Contabilita & _
        " AND ([Dli_IdImpegno] IS NULL OR Dli_IdImpegno = " & param_IdImpegno & ")"




        '  Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(24) As SqlParameter
        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(0).Value = Now
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = item.Dli_Operatore
        parms(2) = New SqlParameter(param_NContabile, SqlDbType.VarChar)
        parms(2).Value = "" & item.Dli_NumImpegno
        parms(3) = New SqlParameter(param_UPB, SqlDbType.VarChar)
        parms(3).Value = IIf(item.Dli_UPB Is Nothing, "", item.Dli_UPB)
        parms(4) = New SqlParameter(param_Cap, SqlDbType.VarChar)
        parms(4).Value = IIf(item.Dli_Cap Is Nothing, "", item.Dli_Cap)
        parms(5) = New SqlParameter(param_Esercizio, SqlDbType.VarChar)
        parms(5).Value = IIf(item.Dli_Esercizio Is Nothing, "", item.Dli_Esercizio)
        parms(6) = New SqlParameter(param_Costo, SqlDbType.Decimal)
        parms(6).Value = item.Dli_Costo

        parms(7) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(7).Value = item.Dli_Documento
        parms(8) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(8).Value = item.Dli_prog

        parms(9) = New SqlParameter(param_NAssunzione, SqlDbType.VarChar)
        parms(9).Value = "" & item.Dli_Num_assunzione
        parms(10) = New SqlParameter(param_TipoAssunzione, SqlDbType.Int)
        parms(10).Value = item.Dli_TipoAssunzione
        parms(11) = New SqlParameter(param_DataAss, SqlDbType.DateTime)
        parms(11).Value = item.Dli_Data_Assunzione
        parms(12) = New SqlParameter(param_AnnoImp, SqlDbType.VarChar)
        parms(12).Value = "" & item.Dli_Anno
        parms(13) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
        parms(13).Value = "" & item.Dli_NPreImpegno


        parms(14) = New SqlParameter(param_ContoEconomica, SqlDbType.VarChar)
        parms(14).Value = "" & item.Di_ContoEconomica
        parms(15) = New SqlParameter(param_ImportoIva, SqlDbType.Decimal)
        parms(15).Value = item.Dli_ImportoIva
        parms(16) = New SqlParameter(param_Por, SqlDbType.SmallInt)
        parms(16).Value = item.Dli_Por
        parms(17) = New SqlParameter(param_AllegatoPor, SqlDbType.Image)
        parms(17).Value = IIf(item.Dli_Allegato Is Nothing, DBNull.Value, item.Dli_Allegato)
        parms(18) = New SqlParameter(param_NLiquidazione, SqlDbType.BigInt)
        parms(18).Value = item.Dli_NLiquidazione
        parms(19) = New SqlParameter(param_Stato, SqlDbType.Int)
        parms(19).Value = item.Di_Stato
        parms(20) = New SqlParameter(param_IdImpegno, SqlDbType.BigInt)
        parms(20).Value = item.Dli_IdImpegno
        parms(21) = New SqlParameter(param_MissioneProgramma, SqlDbType.VarChar)
        parms(21).Value = IIf(item.Dli_MissioneProgramma Is Nothing, "", item.Dli_MissioneProgramma)

        parms(22) = New SqlParameter(param_PCF, SqlDbType.VarChar)
        parms(22).Value = IIf(item.Dli_PianoDeiContiFinanziari Is Nothing, "", item.Dli_PianoDeiContiFinanziari)

        parms(23) = New SqlParameter(param_HashTokenCallSic, SqlDbType.VarChar)
        parms(23).Value = IIf(item.HashTokenCallSic Is Nothing, DBNull.Value, item.HashTokenCallSic)

        parms(24) = New SqlParameter(param_IdDocContabileSic, SqlDbType.VarChar)
        parms(24).Value = IIf(item.IdDocContabileSic Is Nothing, DBNull.Value, item.IdDocContabileSic)

        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & item.Dli_Operatore & " costo:" & item.Dli_Costo)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction

        Try

            Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, Update_Liquidazione, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "UPLIQ", oOperatore, trans)
            FO_Update_Ben_NumLiquidazione(item, trans)
            trans.Commit()

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try
        Return item
    End Function

    Function FO_Update_Preimpegno(ByVal item As ItemImpegnoInfo, Optional ByVal registraAzioneUtenteDoc As Boolean = True) As ItemImpegnoInfo

        Dim Update_Liquidazione As String = " UPDATE  [Documento_preimpegno] " & _
        " SET   [Di_DataRegistrazione] = " & param_DataRegistrazione & _
"      ,[Di_Operatore] = " & param_Operatore & _
"      ,[Di_Bilancio] = " & param_Esercizio & _
"      ,[Di_UPB] = " & param_UPB & _
"      ,[Di_Cap] = " & param_Cap & _
"      ,[Di_Costo] = " & param_Costo & _
"      ,[Di_ContoEconomica] =  " & param_ContoEconomica & _
"      ,[Di_Stato] =  " & param_Stato & _
"      ,[Di_CodObGestionale] =  " & param_CodObGest & _
"      ,[Di_PCF] =  " & param_PCF & _
"      ,[Di_MissioneProgramma] =  " & param_MissioneProgramma & _
"      ,[Di_TipoAssunzioneDescr] =  " & param_TipoAssunzioneDescr & _
"      ,[Di_TipoAssunzione] = " & param_TipoAssunzione & _
"      ,[Di_Num_assunzione] = " & param_NAssunzione & _
"      ,[Di_Data_Assunzione] =  " & param_DataAss & _
"      ,[Di_NPreImpegno] = " & param_NPreImp & _
"      ,[HashTokenCallSic] = " & param_HashTokenCallSic & _
"      ,[IdDocContabileSic] = " & param_IdDocContabileSIC & _
        " WHERE [Di_Documento] = " & param_id_Documento & " AND [Di_prog]= " & param_Prog_Contabilita

        Dim parms(19) As SqlParameter
        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(0).Value = Now
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = item.Dli_Operatore
        parms(2) = New SqlParameter(param_Esercizio, SqlDbType.VarChar)
        parms(2).Value = IIf(item.Dli_Esercizio Is Nothing, "", item.Dli_Esercizio)
        parms(3) = New SqlParameter(param_UPB, SqlDbType.VarChar)
        parms(3).Value = IIf(item.Dli_UPB Is Nothing, "", item.Dli_UPB)
        parms(4) = New SqlParameter(param_Cap, SqlDbType.VarChar)
        parms(4).Value = IIf(item.Dli_Cap Is Nothing, "", item.Dli_Cap)
        parms(5) = New SqlParameter(param_Costo, SqlDbType.Decimal)
        parms(5).Value = item.Dli_Costo
        parms(6) = New SqlParameter(param_ContoEconomica, SqlDbType.VarChar)
        parms(6).Value = "" & item.Di_ContoEconomica
        parms(7) = New SqlParameter(param_Stato, SqlDbType.Int)
        parms(7).Value = item.Di_Stato
        parms(8) = New SqlParameter(param_CodObGest, SqlDbType.VarChar)
        parms(8).Value = item.Codice_Obbiettivo_Gestionale
        parms(9) = New SqlParameter(param_PCF, SqlDbType.VarChar)
        parms(9).Value = IIf(item.Dli_PianoDeiContiFinanziari Is Nothing, item.Piano_Dei_Conti_Finanziari, item.Dli_PianoDeiContiFinanziari)
        parms(10) = New SqlParameter(param_MissioneProgramma, SqlDbType.VarChar)
        parms(10).Value = IIf(item.Dli_MissioneProgramma Is Nothing, "", item.Dli_MissioneProgramma)
        parms(11) = New SqlParameter(param_TipoAssunzioneDescr, SqlDbType.VarChar)
        parms(11).Value = IIf(item.Di_TipoAssunzioneDescr Is Nothing, "", item.Di_TipoAssunzioneDescr)
        parms(12) = New SqlParameter(param_TipoAssunzione, SqlDbType.Int)
        parms(12).Value = item.Di_TipoAssunzione
        parms(13) = New SqlParameter(param_NAssunzione, SqlDbType.VarChar)
        parms(13).Value = "" & item.Di_Num_assunzione
        parms(14) = New SqlParameter(param_DataAss, SqlDbType.DateTime)
        parms(14).Value = item.Di_Data_Assunzione

        parms(15) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
        parms(15).Value = item.Dli_NPreImpegno

        parms(16) = New SqlParameter(param_HashTokenCallSic, SqlDbType.VarChar)
        parms(16).Value = item.HashTokenCallSic
        parms(17) = New SqlParameter(param_IdDocContabileSIC, SqlDbType.VarChar)
        parms(17).Value = item.IdDocContabileSic

        parms(18) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(18).Value = item.Dli_Documento
        parms(19) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(19).Value = item.Dli_prog

       

        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & item.Dli_Operatore & " costo:" & item.Dli_Costo)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction

        Try

            Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, Update_Liquidazione, parms, -1)

            If registraAzioneUtenteDoc Then
                registra_AttivitaContabile(item.Dli_Documento, "UPPREIMP", oOperatore, trans)
            End If

            trans.Commit()

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try
        Return item
    End Function



    '    Function FO_Insert_Liquidazione(ByVal item As ItemLiquidazioneInfo) As ItemLiquidazioneInfo

    '        Dim Insert_Liquidazione As String = "INSERT INTO  [Documento_liquidazione] " & _
    '"  ([Dli_Documento] " & _
    '"           ,[Dli_DataRegistrazione] " & _
    '"           ,[Dli_Operatore] " & _
    '"           ,[Dli_Esercizio] " & _
    '"           ,[Dli_UPB] " & _
    '"           ,[Dli_Cap] " & _
    '"           ,[Dli_Costo] " & _
    '"           ,[Dli_NContabile] " & _
    '"           ,[Dli_TipoAssunzione] " & _
    '"           ,[Dli_Num_assunzione] " & _
    '"           ,[Dli_Data_Assunzione] " & _
    '"           ,[Dli_Anno] " & _
    '"           ,[Dli_NPreImpegno]) " & _
    '"     VALUES (" & _
    'param_id_Documento & _
    '"           ," & param_DataRegistrazione & _
    '"           ," & param_Operatore & _
    '"           ," & param_Esercizio & _
    '"           ," & param_UPB & _
    '"           ," & param_Cap & _
    '"           , " & param_Costo & _
    '"           ," & param_NContabile & _
    '"           ," & param_TipoAssunzione & _
    '"           ," & param_NAssunzione & _
    '"           ," & param_DataAss & _
    '"           ," & param_AnnoImp & _
    '"           ," & param_NPreImp & ");Select @@identity"







    '       
    '        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


    '        Dim parms(12) As SqlParameter
    '        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
    '        parms(0).Value = Now
    '        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
    '        parms(1).Value = item.Dli_Operatore
    '        parms(2) = New SqlParameter(param_NContabile, SqlDbType.VarChar)
    '        parms(2).Value = "" & item.Dli_NContabile
    '        parms(3) = New SqlParameter(param_UPB, SqlDbType.VarChar)
    '        parms(3).Value = IIf(item.Dli_UPB Is Nothing, "", item.Dli_UPB)
    '        parms(4) = New SqlParameter(param_Cap, SqlDbType.VarChar)
    '        parms(4).Value = IIf(item.Dli_Cap Is Nothing, "", item.Dli_Cap)
    '        parms(5) = New SqlParameter(param_Esercizio, SqlDbType.VarChar)
    '        parms(5).Value = IIf(item.Dli_Esercizio Is Nothing, "", item.Dli_Esercizio)
    '        parms(6) = New SqlParameter(param_Costo, SqlDbType.Decimal)
    '        parms(6).Value = item.Dli_Costo

    '        parms(7) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
    '        parms(7).Value = item.Dli_Documento

    '        parms(8) = New SqlParameter(param_NAssunzione, SqlDbType.VarChar)
    '        parms(8).Value = "" & item.Dli_Num_assunzione
    '        parms(9) = New SqlParameter(param_TipoAssunzione, SqlDbType.Int)
    '        parms(9).Value = item.Dli_TipoAssunzione
    '        parms(10) = New SqlParameter(param_DataAss, SqlDbType.DateTime)
    '        parms(10).Value = item.Dli_Data_Assunzione
    '        parms(11) = New SqlParameter(param_AnnoImp, SqlDbType.VarChar)
    '        parms(11).Value = "" & item.Dli_Anno
    '        parms(12) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
    '        parms(12).Value = "" & item.Dli_NPreImpegno

    '        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, Insert_Liquidazione, parms, -1)
    '        item.Dli_prog = returnValue
    '        Return item
    '    End Function


    '    Function FO_Insert_RagLiquidazione(ByVal item As ItemRagLiquidazioneInfo) As ItemRagLiquidazioneInfo

    '        Dim Insert_RagLiquidazione As String = "INSERT INTO  [Documento_rag_liquidazione] " & _
    '"           ([DRL_Id_Documento] " & _
    '"           ,[DRL_DataRegistrazione] " & _
    '"           ,[DRL_Operatore] " & _
    '"           ,[DRL_NLiquidazione] " & _
    '"           ,[DRL_UPB] " & _
    '"           ,[DRL_Cap] " & _
    '"           ,[DRL_Esercizio] " & _
    '"           ,[DRL_Costo] " & _
    '"           ,[DRL_NContabile] " & _
    '"           ,[DRL_TipoAssunzione] " & _
    '"           ,[DRL_NAssunzione] " & _
    '"           ,[DRL_Data] " & _
    '"           ,[DRL_NPreImpegno]) " & _
    '"     VALUES " & _
    '"           ( " & _
    'param_id_Documento & _
    '"           ," & param_DataRegistrazione & _
    '"           ," & param_Operatore & _
    '"           , " & param_NLiquidazione & _
    '"           ," & param_UPB & _
    '"           ," & param_Cap & _
    '"           , " & param_Esercizio & _
    '"           , " & param_Costo & _
    '"           ," & param_NContabile & _
    '"           ," & param_TipoAssunzione & _
    '"           ," & param_NAssunzione & _
    '"           ," & param_DataAss & _
    '"           ," & param_NPreImp & _
    '");Select @@identity"




    '       
    '        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


    '        Dim parms(12) As SqlParameter
    '        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
    '        parms(0).Value = Now
    '        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
    '        parms(1).Value = item.Dli_Operatore
    '        parms(2) = New SqlParameter(param_NContabile, SqlDbType.VarChar)
    '        parms(2).Value = "" & item.Dli_NContabile
    '        parms(3) = New SqlParameter(param_UPB, SqlDbType.VarChar)
    '        parms(3).Value = IIf(item.Dli_UPB Is Nothing, "", item.Dli_UPB)
    '        parms(4) = New SqlParameter(param_Cap, SqlDbType.VarChar)
    '        parms(4).Value = IIf(item.Dli_Cap Is Nothing, "", item.Dli_Cap)
    '        parms(5) = New SqlParameter(param_Esercizio, SqlDbType.VarChar)
    '        parms(5).Value = IIf(item.Dli_Esercizio Is Nothing, "", item.Dli_Esercizio)
    '        parms(6) = New SqlParameter(param_Costo, SqlDbType.Decimal)
    '        parms(6).Value = item.Dli_Costo

    '        parms(7) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
    '        parms(7).Value = item.Dli_Documento

    '        parms(8) = New SqlParameter(param_NAssunzione, SqlDbType.VarChar)
    '        parms(8).Value = "" & item.Dli_Num_assunzione
    '        parms(9) = New SqlParameter(param_TipoAssunzione, SqlDbType.Int)
    '        parms(9).Value = item.Dli_TipoAssunzione
    '        parms(10) = New SqlParameter(param_DataAss, SqlDbType.DateTime)
    '        parms(10).Value = item.Dli_Data_Assunzione
    '        parms(11) = New SqlParameter(param_NLiquidazione, SqlDbType.BigInt)
    '        parms(11).Value = item.DRL_NLiquidazione
    '        parms(12) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
    '        parms(12).Value = "" & item.Dli_NPreImpegno

    '        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, Insert_RagLiquidazione, parms, -1)
    '        item.Dli_prog = returnValue
    '        Return item
    '    End Function

    '    Function FO_Update_Liquidazione(ByVal item As ItemLiquidazioneInfo) As ItemLiquidazioneInfo

    '        Dim Update_Liquidazione As String = " UPDATE  [Documento_liquidazione] " & _
    '        " SET   [Dli_DataRegistrazione] = " & param_DataRegistrazione & _
    '"      ,[Dli_Operatore] = " & param_Operatore & _
    '"      ,[Dli_Esercizio] = " & param_Esercizio & _
    '"      ,[Dli_UPB] = " & param_UPB & _
    '"      ,[Dli_Cap] = " & param_Cap & _
    '"      ,[Dli_Costo] = " & param_Costo & _
    '"      ,[Dli_NumImpegno] = " & param_NContabile & _
    '"      ,[Dli_TipoAssunzione] = " & param_TipoAssunzione & _
    '"      ,[Dli_Num_assunzione] = " & param_NAssunzione & _
    '"      ,[Dli_Data_Assunzione] =  " & param_DataAss & _
    '"      ,[Dli_Anno] =  " & param_AnnoImp & _
    '"      ,[Dli_NPreImpegno] =  " & param_NPreImp & _
    '" WHERE [Dli_Documento] = " & param_id_Documento & " AND [Dli_prog]= " & param_Prog_Contabilita



    '       
    '        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


    '        Dim parms(13) As SqlParameter
    '        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
    '        parms(0).Value = Now
    '        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
    '        parms(1).Value = item.Dli_Operatore
    '        parms(2) = New SqlParameter(param_NContabile, SqlDbType.VarChar)
    '        parms(2).Value = "" & item.Dli_NContabile
    '        parms(3) = New SqlParameter(param_UPB, SqlDbType.VarChar)
    '        parms(3).Value = IIf(item.Dli_UPB Is Nothing, "", item.Dli_UPB)
    '        parms(4) = New SqlParameter(param_Cap, SqlDbType.VarChar)
    '        parms(4).Value = IIf(item.Dli_Cap Is Nothing, "", item.Dli_Cap)
    '        parms(5) = New SqlParameter(param_Esercizio, SqlDbType.VarChar)
    '        parms(5).Value = IIf(item.Dli_Esercizio Is Nothing, "", item.Dli_Esercizio)
    '        parms(6) = New SqlParameter(param_Costo, SqlDbType.Decimal)
    '        parms(6).Value = item.Dli_Costo

    '        parms(7) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
    '        parms(7).Value = item.Dli_Documento
    '        parms(8) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
    '        parms(8).Value = item.Dli_prog

    '        parms(9) = New SqlParameter(param_NAssunzione, SqlDbType.VarChar)
    '        parms(9).Value = "" & item.Dli_Num_assunzione
    '        parms(10) = New SqlParameter(param_TipoAssunzione, SqlDbType.Int)
    '        parms(10).Value = item.Dli_TipoAssunzione
    '        parms(11) = New SqlParameter(param_DataAss, SqlDbType.DateTime)
    '        parms(11).Value = item.Dli_Data_Assunzione
    '        parms(12) = New SqlParameter(param_AnnoImp, SqlDbType.VarChar)
    '        parms(12).Value = "" & item.Dli_Anno
    '        parms(13) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
    '        parms(13).Value = "" & item.Dli_NPreImpegno




    '        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, Update_Liquidazione, parms, -1)

    '        Return item
    '    End Function


    '   Function FO_Update_RagLiquidazione(ByVal item As ItemRagLiquidazioneInfo) As ItemRagLiquidazioneInfo

    '       Dim Update_RagLiquidazione As String = " UPDATE  [Documento_rag_liquidazione] " & _
    '"   SET [DRL_DataRegistrazione] = " & param_DataRegistrazione & _
    '"      ,[DRL_Operatore] = " & param_Operatore & _
    '"      ,[DRL_NContabile] = " & param_NContabile & _
    '"      ,[DRL_UPB] = " & param_UPB & _
    '"      ,[DRL_Cap] = " & param_Cap & _
    '"      ,[DRL_Esercizio] = " & param_Esercizio & _
    '"      ,[DRL_Costo] = " & param_Costo & _
    '"      ,[DRL_NAssunzione] = " & param_NAssunzione & _
    '"      ,[DRL_TipoAssunzione] = " & param_TipoAssunzione & _
    '"      ,[DRL_NLiquidazione] = " & param_NLiquidazione & _
    '"      ,[DRL_Data] = " & param_DataAss & _
    '"      ,[DRL_NPreImpegno] = " & param_NPreImp & _
    ' " WHERE [DRL_id_Documento] = " & param_id_Documento & " AND [DRL_prog]= " & param_Prog_Contabilita



    '      
    '       Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


    '       Dim parms(13) As SqlParameter
    '       parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
    '       parms(0).Value = Now
    '       parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
    '       parms(1).Value = item.Dli_Operatore
    '       parms(2) = New SqlParameter(param_NContabile, SqlDbType.VarChar)
    '       parms(2).Value = "" & item.Dli_NContabile
    '       parms(3) = New SqlParameter(param_UPB, SqlDbType.VarChar)
    '       parms(3).Value = IIf(item.Dli_UPB Is Nothing, "", item.Dli_UPB)
    '       parms(4) = New SqlParameter(param_Cap, SqlDbType.VarChar)
    '       parms(4).Value = IIf(item.Dli_Cap Is Nothing, "", item.Dli_Cap)
    '       parms(5) = New SqlParameter(param_Esercizio, SqlDbType.VarChar)
    '       parms(5).Value = IIf(item.Dli_Esercizio Is Nothing, "", item.Dli_Esercizio)
    '       parms(6) = New SqlParameter(param_Costo, SqlDbType.Decimal)
    '       parms(6).Value = item.Dli_Costo

    '       parms(7) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
    '       parms(7).Value = item.Dli_Documento
    '       parms(8) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
    '       parms(8).Value = item.Dli_prog

    '       parms(9) = New SqlParameter(param_NAssunzione, SqlDbType.VarChar)
    '       parms(9).Value = "" & item.Dli_Num_assunzione
    '       parms(10) = New SqlParameter(param_TipoAssunzione, SqlDbType.Int)
    '       parms(10).Value = item.Dli_TipoAssunzione
    '       parms(11) = New SqlParameter(param_DataAss, SqlDbType.DateTime)
    '       parms(11).Value = item.Dli_Data_Assunzione
    '       parms(12) = New SqlParameter(param_NLiquidazione, SqlDbType.BigInt)
    '       parms(12).Value = item.DRL_NLiquidazione
    '       parms(13) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
    '       parms(13).Value = "" & item.Dli_NPreImpegno

    '       Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, Update_RagLiquidazione, parms, -1)

    '       Return item
    '   End Function



    Function FO_Delete_Impegno_var(ByVal item As ItemRiduzioneInfo) As Integer

        Dim delete_bil As String = " delete from  [Documento_impegno_var] " & _
  " WHERE [Div_Documento] = " & param_id_Documento & " AND [Div_prog]= " & param_Prog_Contabilita




        'Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(1) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = item.Dli_Documento
        parms(1) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(1).Value = item.Dli_prog


        Log.Debug(" op:" & oOperatore.Codice)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction
        Dim returnValue As Integer = 0
        Try

            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, delete_bil, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "DELIMPVAR", oOperatore, trans)
            trans.Commit()

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try

        Return returnValue
    End Function
    Function FO_Delete_PreImpegno_var(ByVal item As ItemRiduzioneInfo) As Integer

        Dim delete_PreimpRid As String = " delete from  [Documento_Preimpegno_var] " & _
  " WHERE [Div_prog]= " & param_Prog_Contabilita




        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(0) As SqlParameter

        parms(0) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(0).Value = item.Dli_prog

        Log.Debug(" op:" & oOperatore.Codice)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction
        Dim returnValue As Integer = 0
        Try


            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, delete_PreimpRid, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "DELPREIMPVAR", oOperatore, trans)
            trans.Commit()

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try
        Return returnValue
    End Function
    Function FO_Delete_Logica_Impegno_Var(ByVal item As ItemRiduzioneInfo) As Integer

        Dim delete_bil As String = " update [Documento_impegno_var] set [Div_Stato]=0 " & _
  " WHERE [Div_Documento] = " & param_id_Documento & " AND [Div_prog]= " & param_Prog_Contabilita


        Log.Debug(" op:" & oOperatore.Codice)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(1) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = item.Dli_Documento
        parms(1) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(1).Value = item.Dli_prog




        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, delete_bil, parms, -1)

        Return returnValue
    End Function

    Function FO_Delete_Assunzione(ByVal item As ItemAssunzioneContabileInfo) As Integer

        Dim delete_ass As String = " delete from  [Documento_assunzione] " & _
  " WHERE [Da_Documento] = " & param_id_Documento & " AND [Da_prog]= " & param_Prog_Contabilita




        ' Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(1) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = item.Da_Documento
        parms(1) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(1).Value = item.Da_prog


        Log.Debug("iddoc:" & item.Da_Documento & " op:" & oOperatore.Codice)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction
        Dim returnValue As Integer = 0
        Try

            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, delete_ass, parms, -1)

            registra_AttivitaContabile(item.Da_Documento, "DELACC", oOperatore, trans)
            trans.Commit()

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try
        Return returnValue
    End Function
    Function FO_Delete_Logica_Assunzione(ByVal item As ItemAssunzioneContabileInfo) As Integer

        Dim delete_ass As String = " update [Documento_assunzione] set [Da_Stato]=0 " & _
  " WHERE [Da_Documento] = " & param_id_Documento & " AND [Da_prog]= " & param_Prog_Contabilita


        Log.Debug(" op:" & oOperatore.Codice)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(1) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = item.Da_Documento
        parms(1) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(1).Value = item.Da_prog




        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, delete_ass, parms, -1)

        Return returnValue
    End Function



    Function FO_Delete_ImpegnoByDocID(ByVal item As ItemImpegnoInfo) As Integer

        Dim delete_bil As String = " delete from  [Documento_impegno] " & _
  " WHERE [Di_Documento] = " & param_id_Documento & " AND [Di_prog]= " & param_Prog_Contabilita




        ' Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(1) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = item.Dli_Documento
        parms(1) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(1).Value = item.Dli_prog


        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & oOperatore.Codice)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction
        Dim returnValue As Integer = 0
        Try


            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, delete_bil, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "DELIMP", oOperatore, trans)
            trans.Commit()

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try

        Return returnValue
    End Function
    Function FO_Delete_PreimpegnoByDocID(ByVal item As ItemImpegnoInfo) As Integer

        Dim delete_bil As String = " delete from  [Documento_preimpegno] " & _
  " WHERE [Di_Documento] = " & param_id_Documento & " AND [Di_prog]= " & param_Prog_Contabilita




        ' Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(1) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = item.Dli_Documento
        parms(1) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(1).Value = item.Dli_prog


        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & oOperatore.Codice)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction
        Dim returnValue As Integer = 0
        Try


            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, delete_bil, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "DELPREIMP", oOperatore, trans)
            trans.Commit()

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try

        Return returnValue
    End Function
    Function FO_Delete_Logica_Preimpegno(ByVal item As ItemImpegnoInfo) As Integer

        Dim delete_bil As String = " update [Documento_preimpegno] set [Di_Stato]=0 " & _
        " WHERE [Di_Documento] = " & param_id_Documento & " AND [Di_prog]= " & param_Prog_Contabilita

        Log.Debug(" op:" & oOperatore.Codice)


        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(1) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = item.Dli_Documento
        parms(1) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(1).Value = item.Dli_prog




        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, delete_bil, parms, -1)

        Return returnValue
    End Function
    Function FO_Delete_Logica_Bil(ByVal item As ItemImpegnoInfo) As Integer

        Dim delete_bil As String = " update [Documento_impegno] set [Di_Stato]=0 " & _
  " WHERE [Di_Documento] = " & param_id_Documento & " AND [Di_prog]= " & param_Prog_Contabilita

        Log.Debug(" op:" & oOperatore.Codice)


        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(1) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = item.Dli_Documento
        parms(1) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(1).Value = item.Dli_prog




        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, delete_bil, parms, -1)

        Return returnValue
    End Function
    Function FO_Delete_BilDaPreimpegno(ByVal item As ItemImpegnoInfo) As Integer

        Dim delete_bil As String = " delete from  [Documento_impegno] " & _
        " WHERE [Di_Documento] = " & param_id_Documento & " AND [Di_NPreImpegno]= " & param_NPreImp




        '      Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(1) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = item.Dli_Documento
        parms(1) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
        parms(1).Value = item.Dli_NPreImpegno


        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & oOperatore.Codice)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction
        Dim returnValue As Integer = 0
        Try


            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, delete_bil, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "DELIMPPRE", oOperatore, trans)
            trans.Commit()

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try

        Return returnValue
    End Function

    Function FO_Delete_Liq(ByVal item As ItemLiquidazioneInfo) As Integer

        Dim delete_liq As String = " delete from  [Documento_liquidazione] " & _
  " WHERE [Dli_Documento] = " & param_id_Documento & " AND [Dli_prog]= " & param_Prog_Contabilita




        '    Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(1) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = item.Dli_Documento
        parms(1) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(1).Value = item.Dli_prog

        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & oOperatore.Codice)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction
        Dim returnValue As Integer = 0
        Try

            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, delete_liq, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "DELLIQ", oOperatore, trans)
            trans.Commit()

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try
        Return returnValue
    End Function
    Function FO_Delete_Logica_Liq(ByVal item As ItemLiquidazioneInfo) As Integer

        Dim delete_liq As String = " update [Documento_liquidazione] set [Dli_Stato] = 0" & _
  " WHERE [Dli_Documento] = " & param_id_Documento & " AND [Dli_prog]= " & param_Prog_Contabilita


        Log.Debug(" op:" & oOperatore.Codice)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(1) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = item.Dli_Documento
        parms(1) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(1).Value = item.Dli_prog


        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, delete_liq, parms, -1)

        Return returnValue
    End Function


    Function FO_Delete_Impegno_Fattura(ByVal idDocumento As String, ByVal idImpegno As Integer, Optional ByVal idFattura As String = "", Optional ByVal trans As SqlTransaction = Nothing) As Integer

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim delete_fattura_impegno As String = " DELETE FROM  [Documento_Impegno_Fattura] " & _
        " WHERE [id_Documento] = @id_documento AND [id_TabDocImpegno] = @id_TabDocImpegno "
        ' AND [id_Fattura_SIC] = @id_fattura "

        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False

        If trans Is Nothing Then
            conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
            conn.Open()
            trans = conn.BeginTransaction
            chiudereConn = True
        End If
        Dim params(1) As SqlParameter

        params(0) = New SqlParameter("@id_documento", SqlDbType.VarChar)
        params(0).Value = idDocumento & ""
        params(1) = New SqlParameter("@id_TabDocImpegno", SqlDbType.Int)
        params(1).Value = idImpegno & ""

        Dim par As SqlClient.SqlParameter
        If idFattura <> "" Then
            ReDim Preserve params(2)

            delete_fattura_impegno = delete_fattura_impegno & " AND [id_Fattura_SIC] = @id_fattura "

            par = New SqlParameter("@id_fattura", SqlDbType.VarChar)
            par.Value = idFattura & ""
            params(2) = par
        End If

        Try
            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, delete_fattura_impegno, params, -1)


            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try
        Return returnValue
    End Function


    Function FO_Delete_Liquidazione_Fattura(ByVal idDocumento As String, ByVal idLiquidazione As Integer, ByVal idFattura As String, Optional ByVal trans As SqlTransaction = Nothing) As Integer

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim delete_fattura_liquidazione As String = " DELETE FROM  [Documento_Liquidazione_Fattura] " & _
        " WHERE [id_Documento] = @id_documento AND [id_TabDocLiquidazione] = @id_TabDocLiquidazione AND [id_Fattura_SIC] = @id_fattura "

        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False

        If trans Is Nothing Then
            conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
            conn.Open()
            trans = conn.BeginTransaction
            chiudereConn = True
        End If
        Dim parms(2) As SqlParameter

        parms(0) = New SqlParameter("@id_documento", SqlDbType.VarChar)
        parms(0).Value = idDocumento & ""
        parms(1) = New SqlParameter("@id_TabDocLiquidazione", SqlDbType.Int)
        parms(1).Value = idLiquidazione & ""
        parms(2) = New SqlParameter("@id_fattura", SqlDbType.VarChar)
        parms(2).Value = idFattura & ""
        Try
            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, delete_fattura_liquidazione, parms, -1)

            'registra_AttivitaContabile(Item.Dli_Documento, "DELLIQ", oOperatore, trans)
            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try
        Return returnValue
    End Function


    Function FO_Delete_LiqDaimpegno(ByVal item As ItemLiquidazioneInfo) As Integer

        Dim delete_liq As String = " delete from  [Documento_liquidazione] " & _
        " WHERE [Dli_Documento] = " & param_id_Documento & ""


        ' Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(0) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = item.Dli_Documento
        Dim conta As Integer = 0
        If Not String.IsNullOrEmpty(item.Dli_NPreImpegno) Then
            conta += 1
            ReDim Preserve parms(conta)

            delete_liq = delete_liq & " AND [Dli_NPreImpegno]= " & param_NPreImp
            parms(conta) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
            parms(conta).Value = item.Dli_NPreImpegno
        End If
        If Not String.IsNullOrEmpty(item.Dli_NumImpegno) Then
            conta += 1
            ReDim Preserve parms(conta)

            delete_liq = delete_liq & " AND [Dli_NumImpegno] = " & param_NContabile
            parms(conta) = New SqlParameter(param_NContabile, SqlDbType.VarChar)
            parms(conta).Value = item.Dli_NumImpegno
        End If
        If item.Dli_prog > 0 Then
            conta += 1
            ReDim Preserve parms(conta)
            delete_liq = delete_liq & " AND [Dli_prog] = " & param_Prog_Contabilita
            parms(conta) = New SqlParameter(param_Prog_Contabilita, SqlDbType.Int)
            parms(conta).Value = item.Dli_prog
        End If


        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & oOperatore.Codice)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction
        Dim returnValue As Integer = 0
        Try

            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, delete_liq, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "DELLIQ", oOperatore, trans)
            trans.Commit()

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try
        Return returnValue
    End Function
    Function FO_Delete_LiqConImporto(ByVal item As ItemLiquidazioneInfo) As Integer

        'se esistono più liquidazioni sullo stesso preimpegno dello stesso importo, ne cancello uno solo
        Dim delete_liq As String = " delete  top (1) from  [Documento_liquidazione] " & _
        " WHERE [Dli_Documento] = " & param_id_Documento & ""


        '   Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(0) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = item.Dli_Documento

        Dim conta As Integer = 0
        If Not String.IsNullOrEmpty(item.Dli_NPreImpegno) Then
            conta += 1
            ReDim Preserve parms(conta)

            delete_liq = delete_liq & " AND [Dli_NPreImpegno]= " & param_NPreImp
            parms(conta) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
            parms(conta).Value = item.Dli_NPreImpegno
        End If

        If item.Dli_Costo > 0 Then
            conta += 1
            ReDim Preserve parms(conta)

            delete_liq = delete_liq & " AND [Dli_Costo]= " & param_Costo
            parms(conta) = New SqlParameter(param_Costo, SqlDbType.Decimal)
            parms(conta).Value = item.Dli_Costo
        End If

        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & oOperatore.Codice)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction
        Dim returnValue As Integer = 0
        Try
            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, delete_liq, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "DELLIQ", oOperatore, trans)
            trans.Commit()

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try
        Return returnValue
    End Function


    'aggiorno il numero di impegno sulle liquidazione collegate
    'aggiorno il numero di impegno sulle liquidazione collegate
    Function FO_Update_Liq_NumImpegnoEDatiAssunzione(ByVal item As ItemLiquidazioneInfo, Optional ByRef trans As SqlTransaction = Nothing) As Integer
        'LU modifica gestione transazione 23/04/09
        Dim flagTransEsterna As Boolean = False
        If trans Is Nothing Then
            flagTransEsterna = False
        Else
            flagTransEsterna = True
        End If
        Dim update_liq As String = " Update   [Documento_liquidazione] " & _
        " Set [Dli_NumImpegno] = " & param_NContabile & _
        " , [Dli_TipoAssunzione] = " & param_TipoAssunzione & _
        " , [Dli_Num_assunzione] = " & param_NAssunzione & _
        " , [Dli_Data_Assunzione] = " & param_DataAss & _
        " WHERE [Dli_Documento] = " & param_id_Documento & _
        " AND [Dli_NPreImpegno] = " & param_NPreImp & _
        " AND ([Dli_IdImpegno] Is NULL OR [Dli_IdImpegno] = " & param_IdImpegno & ")"


        '  Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(6) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = item.Dli_Documento

        parms(1) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
        parms(1).Value = item.Dli_NPreImpegno

        parms(2) = New SqlParameter(param_NContabile, SqlDbType.VarChar)
        parms(2).Value = item.Dli_NumImpegno


        parms(3) = New SqlParameter(param_TipoAssunzione, SqlDbType.Int)
        parms(3).Value = item.Dli_TipoAssunzione


        parms(4) = New SqlParameter(param_NAssunzione, SqlDbType.VarChar)
        parms(4).Value = item.Dli_Num_assunzione


        parms(5) = New SqlParameter(param_DataAss, SqlDbType.DateTime)
        parms(5).Value = item.Dli_Data_Assunzione

        parms(6) = New SqlParameter(param_IdImpegno, SqlDbType.BigInt)
        parms(6).Value = item.Dli_IdImpegno

        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & item.Dli_Operatore)

        Dim returnValue As Integer = 0
        If flagTransEsterna Then
            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, update_liq, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "UPLIQIMPACC", oOperatore, trans)
        Else


            Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
            conn.Open()
            Dim transInterna As SqlClient.SqlTransaction = conn.BeginTransaction
            Try


                returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(transInterna, CommandType.Text, update_liq, parms, -1)
                registra_AttivitaContabile(item.Dli_Documento, "UPLIQIMPACC", oOperatore, transInterna)
                transInterna.Commit()

            Catch ex As Exception
                Log.Error(ex.Message)

                If Not transInterna Is Nothing Then
                    transInterna.Rollback()
                End If
                Throw New Exception(ex.Message)
            Finally
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End Try


        End If





        Return returnValue
    End Function

    Function FO_Update_AzioneUtenteDocumento(ByVal idDocumento As String, ByVal idallegato As String, ByVal codOp As String, ByVal codAzione As String) As Integer

        Dim Update_AzioneUtenteDocumento As String = " UPDATE [Azioni_Utente_Documento] " & _
            " SET [Sto_idAllegato] = " & param_id_Allegato & _
            " WHERE [Sto_id_Doc] = " & param_id_Documento & " and [Sto_Utente]= " & param_Utente & _
            " and [Sto_TipoAttivita]= " & param_TipoAttivita & " and [Sto_Prog] = " & _
            " (select max([Sto_Prog]) from [Azioni_Utente_Documento] " & _
            " WHERE [Sto_id_Doc] = " & param_id_Documento & " and [Sto_Utente]= " & param_Utente & _
            " and [Sto_TipoAttivita]= " & param_TipoAttivita & " )"




        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(3) As SqlParameter
        parms(0) = New SqlParameter(param_id_Allegato, SqlDbType.VarChar)
        parms(0).Value = idallegato
        parms(1) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(1).Value = idDocumento
        parms(2) = New SqlParameter(param_Utente, SqlDbType.VarChar)
        parms(2).Value = codOp
        parms(3) = New SqlParameter(param_TipoAttivita, SqlDbType.VarChar)
        parms(3).Value = codAzione
        'parms(4) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        'parms(4).Value = idDocumento
        'parms(5) = New SqlParameter(param_Utente, SqlDbType.VarChar)
        'parms(5).Value = codOp
        'parms(6) = New SqlParameter(param_TipoAttivita, SqlDbType.VarChar)
        'parms(6).Value = codAzione


        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, Update_AzioneUtenteDocumento, parms, -1)
        Return returnValue
    End Function



    'Riscrittura funzioni Object
    Public Function Calcola_Progressivo_object(ByRef trans As SqlTransaction, ByVal TipoContatore As String, Optional ByVal Anno As Integer = 0, Optional ByVal RacchiudiTransazione As Boolean = True, Optional ByVal struttura As String = "0", Optional ByVal sFormato As String = "") As Object
        Const sfun As String = "Calcola_Progressivo_object"
        Dim flagTransazioneEsterna As Boolean = False

        If Not trans Is Nothing Then
            flagTransazioneEsterna = True
        End If

        Dim Progressivo As String
        Dim Sqlq As String
        Dim vRit(1) As Object
        Dim vR As Object = Nothing
        Dim Formato As String
        Dim Prefisso As String
        Dim PresidioContatore As String
        Dim vParam(2) As Object
        Dim contatoreFormattato As String



        Dim lista_Compiti As IList
        Dim parms(1) As SqlParameter
        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = idDocumento

        parms(1) = New SqlParameter(param_Struttura, SqlDbType.VarChar)
        parms(1).Value = struttura


        Dim rdr As SqlClient.SqlDataReader = Nothing
        Dim conn As SqlConnection = Nothing
        Try
            conn = New SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))

            If Not trans Is Nothing Then

            Else
                conn.Open()
                trans = conn.BeginTransaction()
            End If

            Sqlq = "SELECT TCO_Struttura, TCo_Codice, Tco_Anno, Tco_Formato, Tco_Contatore, Tco_Descrizione, TCO_PREFISSO FROM Tab_Contatori WHERE Tco_Codice = '" & TipoContatore & "' AND Tco_Anno = " & Anno
            If struttura <> "0" Then
                Sqlq = Sqlq & " AND Tco_Struttura= '" & struttura & "'"
            End If

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(trans, CommandType.Text, Sqlq, Nothing)
            Dim flagTrovataStruttura As Boolean = False
            While rdr.Read()
                flagTrovataStruttura = True
            End While
            rdr.Close()

            If Not flagTrovataStruttura Then

                Sqlq = "Select * from Tab_Tipo_Contatore where Tco_Codice='" & TipoContatore & "'"
                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(trans, CommandType.Text, Sqlq, Nothing)
                If sFormato <> "" Then
                    Formato = sFormato
                Else
                    Formato = struttura + Trim(Str(Anno) & "00000")
                End If

                While rdr.Read
                    Formato = "" & rdr.GetString(2)
                    Prefisso = "" & rdr.GetString(3)
                End While

                Formato = Replace(Formato, "%ANNO%", Anno)

                Formato = Replace(Formato, "%UFFICIO%", oOperatore.oUfficio.leggiUfficioPubblico(oOperatore.oUfficio.CodUfficio))


            End If


            If flagTransazioneEsterna = False Then
                trans.Commit()
            End If
        Catch ex As Exception
            trans.Rollback()
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try



        '        If RS.EOF And RS.BOF Then
        '            vParam(0) = DB
        '            vParam(1) = "Select * from Tab_Tipo_Contatore where Tco_Codice='" & TipoContatore & "'"
        '            vParam(2) = 2
        '            vR = GDB.DBQuery(vParam)
        '            If vR(0) = 0 Then
        '                Formato = vR(1)(2, 0) & ""
        '                Prefisso = vR(1)(3, 0) & ""
        '            Else
        '                If sFormato <> "" Then
        '                    Formato = sFormato
        '                Else
        '                    Formato = struttura + Trim(Str(Anno) & "00000")
        '                End If
        '            End If
        '            Formato = Replace(Formato, "%ANNO%", Anno)

        '            Formato = Replace(Formato, "%UFFICIO%", utente.oUfficio.leggiUfficioPubblico(utente.oUfficio.CodUfficio))

        '            Call DB.AddRS(RS)
        '            If DB.errore <> 0 Then
        '                vRit(0) = DB.errore
        '                vRit(1) = DB.ErrDescr
        '                Call SISTEMA.Registra_Log(vRit(1), sfun)
        '                GoTo RollTrans
        '            End If
        '            RS("Tco_Struttura").Value = struttura
        '            RS("Tco_Contatore").Value = 1
        '            RS("Tco_Anno").Value = Anno
        '            RS("Tco_Codice").Value = TipoContatore
        '            RS("Tco_Formato").Value = Formato
        '            RS("Tco_Prefisso").Value = Prefisso
        '            contatoreFormattato = (RS("Tco_Formato").Value).replace(".", "_")
        '            Progressivo = RS("Tco_Prefisso").Value + Format(RS("Tco_Contatore").Value, contatoreFormattato)
        '            If Progressivo.IndexOf("_") > 0 Then
        '                Progressivo = Progressivo.Replace("_", ".")
        '            End If
        '        Else
        '            Call DB.EditRS(RS)
        '            If DB.errore <> 0 Then
        '                vRit(0) = DB.errore
        '                vRit(1) = DB.ErrDescr
        '                Call SISTEMA.Registra_Log(vRit(1), sfun)
        '                GoTo RollTrans
        '            End If
        '            RS("Tco_Contatore").Value = RS("Tco_Contatore").Value + 1
        '            contatoreFormattato = (RS("Tco_formato").Value).replace(".", "_")
        '            Progressivo = Format(RS("Tco_Contatore").Value, contatoreFormattato)
        '            If Progressivo.IndexOf("_") > 0 Then
        '                Progressivo = Progressivo.Replace("_", ".")
        '            End If
        '            Progressivo = RS("Tco_Prefisso").Value & "" & Progressivo
        '        End If

        '        Call DB.UpdateRS(RS)
        '        If DB.errore <> 0 Then
        '            vRit(0) = DB.errore
        '            vRit(1) = DB.ErrDescr
        '            Call SISTEMA.Registra_Log(vRit(1), sfun)
        '            GoTo RollTrans
        '        End If

        '        If RacchiudiTransazione Then
        '            Call DB.CommitTrans()
        '            If DB.errore <> 0 Then
        '                vRit(0) = DB.errore
        '                vRit(1) = DB.ErrDescr
        '                Call SISTEMA.Registra_Log(vRit(1), sfun)
        '                GoTo RollTrans
        '            End If
        '        End If
        '        vRit(0) = 0
        '        vRit(1) = Progressivo

        'FineSub:
        '        Calcola_Progressivo_object = vRit
        '        Exit Function

        'RollTrans:
        '        If RacchiudiTransazione Then
        '            If Not DB Is Nothing Then
        '                Call DB.RollTrans()
        '                If DB.errore <> 0 Then
        '                    Call SISTEMA.Registra_Log(DB.ErrDescr, sfun)
        '                End If
        '            End If
        '        End If
        '        GoTo FineSub

        'Herr:
        '        vRit(0) = Err.Number
        '        vRit(1) = Err.Description
        '        Call SISTEMA.Registra_Log(vRit(1), sfun)
        '        GoTo RollTrans
        '        Resume

    End Function
    Function GetIdDocumentoFrom_NumProv_NumDef_CodEster(ByVal codice As String, ByVal tipoCodice As String, Optional ByVal cod_App As String = "") As String

        'tipoCodice 
        '0 provv
        '1 definitivo 
        '2 Esterno
        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Dim lstr_StrinSearch As String = ""
        Select Case tipoCodice
            Case 0
                lstr_StrinSearch = "Documento.Doc_numeroProvvisorio = @idDocumento"
            Case 1
                lstr_StrinSearch = "Documento.Doc_numero = @idDocumento"
            Case 2
                lstr_StrinSearch = "Documento.Doc_cod_Esterno= @idDocumento"

        End Select

        If Not String.IsNullOrEmpty(cod_App) Then
            lstr_StrinSearch = lstr_StrinSearch & " and Documento.Doc_codApp='" & cod_App & "'"
        End If

        Dim parms(0) As SqlParameter
        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = codice


        Dim Sqlq As String = "   SELECT     Documento.Doc_Id FROM Documento "
        Sqlq += " Join Stato_Istanza_Documento on ( Stato_Istanza_Documento.Doc_Id = Documento.Doc_Id and Ruolo <> 'A' ) "
        Sqlq += "where " & lstr_StrinSearch
        Dim rdr As SqlClient.SqlDataReader


        Dim cod_documento As String = ""
        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, parms)
            Using rdr
                While rdr.Read()
                    cod_documento = rdr.GetString(0)
                End While
                rdr.Close()
            End Using
        Catch ex As SqlClient.SqlException
            Log.Error("Errore ricerca documento codice: " & codice & " tipo codice " & tipoCodice & "" & ex.Message)
            rdr.Close()
        Catch ex As Exception
            Err.Description = ex.Message
            rdr.Close()
        End Try
        Return cod_documento

    End Function
    Friend Function FO_Leggi_Documento_Object(ByVal vParm As Object, Optional ByVal avviaTransazione As Boolean = True, Optional ByVal DB As Object = Nothing) As Model.DocumentoInfo
        'Log.Info
        Dim docItem As Model.DocumentoInfo = Nothing

        Dim Sqlq As String
        Dim RS As Object = Nothing
        Dim vP(2) As Object
        Dim vR As Object = Nothing

        Dim sXmlDatiRichiesta As String
        Dim chiudereDb As Boolean = True


        Dim idDocumentoLocale As String = vParm(Dic_FODocumentale.vc_Leggi_Documento.c_idDocumento)
        sXmlDatiRichiesta = vParm(Dic_FODocumentale.vc_Leggi_Documento.c_xmlDatiDocumento)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(0) As SqlParameter
        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = idDocumentoLocale


        Sqlq = "   SELECT     Documento.Doc_Id, Documento.Doc_numeroProvvisorio, Documento.Doc_numero, Documento.Doc_Oggetto, Documento.Doc_Cod_Uff_Prop, " & _
                " Documento.Doc_Data, Documento.Doc_Tipo, Documento.Doc_Codice_Documento, Documento.Doc_Stato, Documento.Doc_liquidazione,  " & _
                " Documento.Doc_Contabile, Documento.Doc_Pubblicazione, Documento.Doc_Testo, Documento.Doc_id_WFE, Documento.Doc_utenteCreazione, " & _
                " Documento.Doc_privacy, Documento.Doc_AOOprotocollo, Documento.Doc_numProtocollo, Documento.Doc_NumDefinitivo, " & _
                " Documento.Doc_dataRegistrazione, Documento.Doc_operatore, Documento.Doc_IsContabile, Documento.Doc_dataRicezione, " & _
                " ISNULL(Struttura.Str_codiceUtente, '') AS Str_codiceUtente, ISNULL(Struttura.Str_descrizione, '') AS Str_descrizione,ISNULL(Doc_TipoOpCont, '') " & _
          ", ISNULL(Documento.[Doc_codCup],'') " & _
      ",ISNULL(Documento.[Doc_codApp],'') " & _
      ",ISNULL(Documento.[Doc_cod_Esterno],'')" & _
      ",ISNULL(Documento.[Doc_Investimento_Pub],0) " & _
                 " FROM         Documento LEFT OUTER JOIN " & _
                                 " Struttura ON Documento.Doc_Cod_Uff_Prop = Struttura.Str_id " & _
                                 " where  (Documento.Doc_Id = @idDocumento)"



        Try

            Using rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, parms)
                While rdr.Read()
                    docItem = New Model.DocumentoInfo
                    docItem.Doc_id = rdr.GetString(0)
                    If Not rdr.IsDBNull(1) Then docItem.Doc_numeroProvvisorio = rdr.GetString(1)
                    If Not rdr.IsDBNull(2) Then docItem.Doc_numero = rdr.GetString(2)
                    If Not rdr.IsDBNull(3) Then docItem.Doc_Oggetto = rdr.GetString(3)
                    If Not rdr.IsDBNull(4) Then docItem.Doc_Cod_Uff_Prop = rdr.GetString(4)

                    If Not rdr.IsDBNull(5) Then docItem.Doc_Data = rdr.GetDateTime(5)
                    If Not rdr.IsDBNull(6) Then docItem.Doc_Tipo = rdr.GetInt32(6)
                    'utilizzato per contenere il valore del corpo del testo
                    'valore = 1 -> modello word intero, contenente frontespizio, parte centrale e ultima pagina
                    'valore = 2 -> solo testo uploadato come file allegato, la pagina iniziale e finale sono aggiunte a runtime
                    'valore = 3 -> testo html trasformato in pdf, la pagina iniziale e finale sono aggiunte a runtime
                    If Not rdr.IsDBNull(7) Then docItem.Doc_Codice_Documento = rdr.GetInt32(7)
                    If Not rdr.IsDBNull(8) Then docItem.Doc_Stato = rdr.GetInt32(8)
                    If Not rdr.IsDBNull(9) Then docItem.Doc_liquidazione = rdr.GetInt16(9)
                    If Not rdr.IsDBNull(10) Then docItem.Doc_Contabile = rdr.GetByte(10)
                    '' Doc_Pubblicazione verificare il getByte con valore 2
                    If Not rdr.IsDBNull(11) Then docItem.Doc_Pubblicazione = rdr.GetByte(11)
                    If Not rdr.IsDBNull(12) Then docItem.Doc_Testo = rdr.GetString(12)
                    If Not rdr.IsDBNull(13) Then docItem.Doc_id_WFE = rdr.GetString(13)
                    If Not rdr.IsDBNull(14) Then docItem.Doc_utenteCreazione = rdr.GetString(14)
                    If Not rdr.IsDBNull(15) Then docItem.Doc_privacy = rdr.GetByte(15)
                    If Not rdr.IsDBNull(16) Then docItem.Doc_AOOprotocollo = rdr.GetString(16)
                    If Not rdr.IsDBNull(17) Then docItem.Doc_numProtocollo = rdr.GetString(17)
                    If Not rdr.IsDBNull(18) Then docItem.Doc_NumCronologico = rdr.GetString(18)
                    If Not rdr.IsDBNull(19) Then docItem.Doc_dataRegistrazione = rdr.GetDateTime(19)
                    'Struttura?
                    If Not rdr.IsDBNull(20) Then docItem.Doc_operatore = rdr.GetString(20)
                    If Not rdr.IsDBNull(21) Then docItem.Doc_IsContabile = rdr.GetByte(21)
                    If Not rdr.IsDBNull(22) Then docItem.Doc_dataRicezione = rdr.GetDateTime(22)
                    If Not rdr.IsDBNull(23) Then docItem.Doc_Cod_Uff_Pubblico = rdr.GetString(23)
                    If Not rdr.IsDBNull(24) Then docItem.Doc_Descrizione_ufficio = rdr.GetString(24)
                    If Not rdr.IsDBNull(25) Then docItem.ListaOpContabil = rdr.GetString(25).Split(";")

                    If Not rdr.IsDBNull(26) Then docItem.Doc_codCup = rdr.GetString(26)
                    If Not rdr.IsDBNull(27) Then docItem.Doc_codApp = rdr.GetString(27)
                    If Not rdr.IsDBNull(28) Then docItem.Doc_cod_Esterno = rdr.GetString(28)
                    If Not rdr.IsDBNull(29) Then docItem.Doc_Investimento_Pub = rdr.GetByte(29)



                End While
                rdr.Close()
            End Using
        Catch ex As SqlClient.SqlException
            Log.Error("Errore caricamento documento id: " & idDocumentoLocale & " " & ex.Message)
            docItem = Nothing
            Return docItem
        End Try

        docItem.Lista_Compiti = Get_Documento_compito_utente(idDocumentoLocale, oOperatore.Codice)
        docItem.Lista_UfficiDiCompetenza = Get_Lista_Documento_Uffici_Competenza(idDocumentoLocale, oOperatore.Codice)
        'Log.info

        Return docItem

    End Function
    Friend Function FO_Registra_Documento_object(ByVal vParm As Object) As Object
        Throw New NotImplementedException()
        '        Const SFunzione As String = "FO_Registra_Documento_objetc"
        '        Dim vRitPar(3) As Object
        '        Dim vRitSql As Object
        '        Dim Sqlq As String
        '        Dim sWhere As String
        '        Dim RS As Object
        '        Dim vR As Object
        '        Dim vP(2) As Object

        '        Dim oggetto As String
        '        Dim testo As String
        '        Dim pubblicazioneIntegrale As Integer
        '        Dim sXmlDatiDocumento As String
        '        Dim isContabile As Int16
        '        Dim domDatiDocumento As System.Xml.XmlDocument
        '        Dim domDatiCreaPdf As System.Xml.XmlDocument
        '        Dim nodoTabella As System.Xml.XmlNode
        '        Dim nodoColonna As System.Xml.XmlNode
        '        Dim attributoNodoTabella As System.Xml.XmlAttribute
        '        Dim attributoColonnaTabella As System.Xml.XmlAttribute
        '        Dim nomeTabella As String
        '        Dim chiaveTabella As String
        '        Dim colonnaProgRegistrazioneTabella As String
        '        Dim ProgRegistrazioneTabella As Integer
        '        Dim colonnaDataRegistrazioneTabella As String
        '        Dim colonnaOperatoreRegistrazioneTabella As String
        '        Dim tipoColonnaTabella As String
        '        Dim nomeColonnaTabella As String
        '        Dim attoreCorrente As String
        '        Dim nomeModelloXsl As String
        '        Dim i As Integer

        '        Dim progReg As Integer
        '        Dim compitiUtenteDocumento As String
        '        Dim compitiCampoDocumento As String



        '        vRitPar(0) = 0
        '        vRitPar(1) = ""

        '        'Log.Info
        '        Dim docItem As Model.DocumentoInfo = vParm(Dic_FODocumentale.vc_Registra_Documento_Object.c_Documento_Info)

        '        If Trim(docItem.Doc_id) = "" Then
        '            'Lor.error "Parametri insufficienti"
        '            Return Nothing
        '        End If
        '        'verifico se la proposta è ancora assegnata all'utente

        '        idIstanzaWFE = docItem.Doc_id_WFE
        '        If tipoDocumento = "" Then
        '            tipoDocumento = docItem.Doc_Tipo
        '        End If

        '        vR = Leggi_StatoIstanza_WFE(idIstanzaWFE, utente.Codice)

        '        If vR(0) <> 0 Then
        '            'Log.Error istanza non in carico
        '            Return Nothing
        '        End If
        '        attoreCorrente = vR(1)(2) & ""
        '        If UCase(Trim(attoreCorrente)) <> UCase(Trim(utente.Codice)) Then
        '            'Log.Error "L'utente non ha più in carico il documento"
        '            Return Nothing
        '        End If

        '       
        '        Dim connDoc As New SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        '        Dim transDoc As SqlTransaction = connDoc.BeginTransaction()
        '        If idDocumento = 0 Then
        '            'insert
        '            Insert_Documento(docItem, transDoc)
        '        Else
        '            'Update
        '            Update_Documento(docItem, transDoc)
        '        End If


        '        'vR = DB_Aggiungi_RSLOG(RS, DBLOG, "Log_Documento")

        '        transDoc.Commit()

        '        Dim listaCompiti As IList = Get_Documento_compito_utente(idDocumento, utente.Codice, transDoc)


        '        domDatiDocumento = New System.Xml.XmlDocument

        '        If Trim(docItem.Doc_XML) = "" Then
        '            docItem.Doc_XML = "<datiDocumento/>"
        '        End If

        '        domDatiDocumento.LoadXml(docItem.Doc_XML & "")

        '        If Not domDatiDocumento Is Nothing Then

        '            For Each nodoTabella In domDatiDocumento.SelectNodes("//tabella")
        '                For Each attributoNodoTabella In nodoTabella.Attributes
        '                    Select Case UCase(attributoNodoTabella.Name())
        '                        Case "NOME_TABELLA"
        '                            nomeTabella = attributoNodoTabella.Value
        '                        Case "CHIAVE_TABELLA"
        '                            chiaveTabella = attributoNodoTabella.Value
        '                        Case "COL_PROG_REGISTRAZIONE"
        '                            colonnaProgRegistrazioneTabella = attributoNodoTabella.Value
        '                        Case "COL_DATA_REGISTRAZIONE"
        '                            colonnaDataRegistrazioneTabella = attributoNodoTabella.Value
        '                        Case "COL_OPERATORE_REGISTRAZIONE"
        '                            colonnaOperatoreRegistrazioneTabella = attributoNodoTabella.Value
        '                    End Select
        '                Next

        '                nodoColonna = nodoTabella.SelectSingleNode("/" + colonnaProgRegistrazioneTabella)
        '                ProgRegistrazioneTabella = 0
        '                For Each nodoColonna In nodoTabella.ChildNodes
        '                    If nodoColonna.Name = colonnaProgRegistrazioneTabella Then
        '                        If IsNumeric(nodoColonna.InnerText) Then
        '                            ProgRegistrazioneTabella = CInt(nodoColonna.InnerText)
        '                        Else
        '                            ProgRegistrazioneTabella = 0
        '                        End If
        '                    End If
        '                Next

        '                If ProgRegistrazioneTabella = 0 Then
        '                    Sqlq = "SELECT * " & _
        '                           " FROM " & nomeTabella & _
        '                           " WHERE  (" & chiaveTabella & "= '" & idDocumento & "' ) "
        '                    '   " AND (" & colonnaProgRegistrazioneTabella & " = " & ProgRegistrazioneTabella & " ) "

        '                    RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaForward)
        '                    If DB.errore <> 0 Then
        '                        vRitPar(0) = DB.errore
        '                        vRitPar(1) = DB.ErrDescr
        '                        GoTo RollTrans
        '                    End If

        '                    progReg = 0
        '                    If Not RS.EOF Then
        '                        RS.MoveFirst()
        '                        While Not RS.EOF
        '                            If progReg <= CInt(RS(colonnaProgRegistrazioneTabella).value) Then
        '                                progReg = CInt(RS(colonnaProgRegistrazioneTabella).value)
        '                            End If
        '                            RS.MoveNext()
        '                        End While
        '                    End If
        '                    progReg = progReg + 1

        '                    ProgRegistrazioneTabella = progReg
        '                    DB.ChiudiRS(RS)
        '                End If




        '                Sqlq = "SELECT * " & _
        '                           " FROM " & nomeTabella & _
        '                           " WHERE  (" & chiaveTabella & "= '" & idDocumento & "' ) " & _
        '                            " AND (" & colonnaProgRegistrazioneTabella & " = " & ProgRegistrazioneTabella & " ) "

        '                Call DB.BeginTrans()
        '                If DB.errore <> 0 Then
        '                    vRitPar(0) = DB.errore
        '                    vRitPar(1) = DB.ErrDescr
        '                    GoTo RollTrans
        '                End If

        '                RS = DB.ApriRS(Sqlq, DllGestDBNET.clDicGDB.dbCostAperturaRs.dbAperturaKeyset, DllGestDBNET.clDicGDB.dbCostLock.dbLockPessimistico)
        '                If DB.errore <> 0 Then
        '                    vRitPar(0) = DB.errore
        '                    vRitPar(1) = DB.ErrDescr
        '                    GoTo RollTrans
        '                End If
        '                If RS.EOF Then
        '                    Call DB.AddRS(RS)
        '                    If DB.errore <> 0 Then
        '                        vRitPar(0) = DB.errore
        '                        vRitPar(1) = DB.ErrDescr
        '                        GoTo RollTrans
        '                    End If
        '                    RS(chiaveTabella) = idDocumento
        '                    RS(colonnaProgRegistrazioneTabella) = ProgRegistrazioneTabella
        '                Else
        '                    Call DB.EditRS(RS)
        '                    If DB.errore <> 0 Then
        '                        vRitPar(0) = DB.errore
        '                        vRitPar(1) = DB.ErrDescr
        '                        GoTo RollTrans
        '                    End If
        '                End If

        '                RS(colonnaDataRegistrazioneTabella) = Now
        '                If UCase(nomeTabella) <> UCase("Documento_noteosservazioni") Then
        '                    RS(colonnaOperatoreRegistrazioneTabella) = SISTEMA.Client_Operatore
        '                End If

        '                For Each nodoColonna In nodoTabella.ChildNodes
        '                    If nodoColonna.Name = colonnaProgRegistrazioneTabella Then
        '                        nodoColonna.InnerText = ProgRegistrazioneTabella
        '                    End If
        '                    tipoColonnaTabella = ""
        '                    compitiCampoDocumento = "*"
        '                    For Each attributoColonnaTabella In nodoColonna.Attributes()
        '                        Select Case UCase(attributoColonnaTabella.Name)
        '                            Case Is = "TIPO"
        '                                tipoColonnaTabella = attributoColonnaTabella.Value
        '                            Case Is = "COMPITO"
        '                                compitiCampoDocumento = attributoColonnaTabella.Value
        '                        End Select
        '                    Next
        '                    If Test_Compito(compitiCampoDocumento, compitiUtenteDocumento) Then


        '                        Select Case UCase(tipoColonnaTabella)
        '                            Case "STRING"
        '                                RS(nodoColonna.Name).value = CStr(nodoColonna.InnerText)
        '                            Case "INT", "FLOAT"
        '                                If Trim(nodoColonna.InnerText) <> "" Then
        '                                    If IsNumeric(nodoColonna.InnerText) Then
        '                                        RS(nodoColonna.Name).value = nodoColonna.InnerText
        '                                    Else
        '                                        Dim att As System.Xml.XmlAttribute
        '                                        att = domDatiDocumento.CreateAttribute("erroreTipoDato")
        '                                        att.Value = "Il campo deve essere di tipo numerico"
        '                                        nodoColonna.Attributes.Append(att)
        '                                        'nodoColonna.InnerText = RS(nodoColonna.Name).value
        '                                    End If
        '                                Else
        '                                    'RS(nodoColonna.Name).value = System.DBNull
        '                                End If
        '                            Case "DATA"
        '                                If Trim(nodoColonna.InnerText) <> "" Then
        '                                    If IsDate(nodoColonna.InnerText) Then
        '                                        RS(nodoColonna.Name).value = CDate(nodoColonna.InnerText)
        '                                    Else
        '                                        Dim att As System.Xml.XmlAttribute
        '                                        att = domDatiDocumento.CreateAttribute("erroreTipoDato")
        '                                        att.Value = "Il campo deve essere una data"
        '                                        nodoColonna.Attributes.Append(att)
        '                                        'nodoColonna.InnerText = RS(nodoColonna.Name).value
        '                                    End If
        '                                Else
        '                                    'RS(nodoColonna.Name).value = System.DBNull
        '                                End If
        '                            Case Else
        '                                If UCase(nodoColonna.Name) = UCase("DNO_Oparatore") Then
        '                                    RS(nodoColonna.Name) = SISTEMA.Client_Operatore
        '                                Else
        '                                    RS(nodoColonna.Name).value = nodoColonna.InnerText
        '                                End If

        '                        End Select
        '                    Else
        '                        Dim att As System.Xml.XmlAttribute
        '                        att = domDatiDocumento.CreateAttribute("erroreCompito")
        '                        att.Value = "Non si hanno i diritti per strivere il dato"
        '                        nodoColonna.Attributes.Append(att)

        '                        'Vittorio 26/07/2006
        '                        If nodoColonna.Name.Equals("Dno_testo") AndAlso RS(nodoColonna.Name).value = "" Then
        '                            RS(nodoColonna.Name).value = ""
        '                        End If

        '                    End If
        '                Next

        '                Call DB.UpdateRS(RS)
        '                If DB.errore <> 0 Then
        '                    vRitPar(0) = DB.errore
        '                    vRitPar(1) = DB.ErrDescr
        '                    GoTo RollTrans
        '                End If

        '                'rocco 11-05-2006 : togliere funzione e portare tutto su trigger
        '                vR = DB_Aggiungi_RSLOG(RS, DBLOG, "Log_" + nomeTabella)
        '                If vR(0) <> 0 Then
        '                    vRitPar(0) = vR(0)
        '                    vRitPar(1) = vR(1)
        '                    GoTo RollTrans
        '                End If

        '                DB.ChiudiRS(RS)
        '                If DB.errore <> 0 Then
        '                    vRitPar(0) = DB.errore
        '                    vRitPar(1) = DB.ErrDescr
        '                    GoTo RollTrans
        '                End If

        '                Call DB.CommitTrans()

        '                If DB.errore <> 0 Then
        '                    vRitPar(0) = DB.errore
        '                    vRitPar(1) = DB.ErrDescr
        '                    GoTo RollTrans
        '                End If


        '            Next
        '        End If

        '        'registro la creazione della determina tra le attività dell'utente
        '        Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
        '        vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = "IMMISDATI"
        '        vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_info_attivita) = ""

        '        vR = FO_Registra_Attivita(vRegAtt, DB)
        '        If vR(0) <> 0 Then
        '            vRitPar(0) = vR(0)
        '            vRitPar(1) = vR(1)
        '            GoTo FineSub
        '        End If

        '        vRitPar(0) = 0
        '        vRitPar(1) = domDatiDocumento.OuterXml

        'FineSub:
        '        FO_Registra_Documento = vRitPar
        '        On Error Resume Next
        '        If Not DB Is Nothing Then
        '            Call DB.ChiudiDB()
        '            DB = Nothing
        '        End If
        '        If Not DBLOG Is Nothing Then
        '            Call DBLOG.ChiudiDB()
        '            DBLOG = Nothing
        '        End If
        '        domDatiDocumento = Nothing
        '        nodoTabella = Nothing
        '        nodoColonna = Nothing
        '        attributoNodoTabella = Nothing
        '        attributoColonnaTabella = Nothing


        '        If vRitPar(0) <> 0 Then
        '            Call SISTEMA.Registra_Log(vRitPar(1), SFunzione)
        '        End If
        '        If SISTEMA.bTRACE Then
        '            Call SISTEMA.Registra_Trace("Fine", SFunzione)
        '        End If
        '        On Error GoTo 0
        '        Exit Function

        'RollTrans:
        '        If Not DB Is Nothing Then
        '            Call DB.RollTrans()
        '            If DB.errore <> 0 Then
        '                Call SISTEMA.Registra_Log(DB.ErrDescr, SFunzione)
        '            End If
        '        End If
        '        GoTo FineSub

        'Herr:

        '        vRitPar(0) = Err.Number
        '        vRitPar(1) = Err.Description
        '        Call SISTEMA.Registra_Log(vRitPar(1) & " ", SFunzione)
        '        GoTo RollTrans
        '        ' Resume
    End Function

    Friend Function Get_Documento_compito_utente(ByVal idDocumento As String, ByVal codOperatore As String, Optional ByVal trans As SqlTransaction = Nothing) As IList


        Dim lista_Compiti As IList
        Dim parms(1) As SqlParameter
        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = idDocumento

        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = codOperatore

        Dim Sqlq As String = "SELECT    isnull(Dco_Compito,'') as Dco_Compito " & _
               " FROM          Documento_compito_utente " & _
               " WHERE      ( Dco_id_Documento = @idDocumento) AND (Dco_utente = @Operatore)"

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try

            If Not trans Is Nothing Then
                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(trans, CommandType.Text, Sqlq, parms)
            Else
                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"), CommandType.Text, Sqlq, parms)
            End If


            While rdr.Read()
                If lista_Compiti Is Nothing Then
                    lista_Compiti = New Generic.List(Of String)
                End If
                lista_Compiti.Add(rdr.GetString(0))
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            'Log.Error
            If rdr Is Nothing Then
                rdr.Close()
            End If
            rdr = Nothing
            lista_Compiti = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try
        Return lista_Compiti
    End Function
    Friend Function Insert_Documento(ByVal newDocument As Model.DocumentoInfo, Optional ByRef trans As SqlTransaction = Nothing) As Integer
        Throw New NotImplementedException





        'Dim parms(1) As SqlParameter
        'parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        'parms(0).Value = idDocumento

        'parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        'parms(1).Value = utente.Codice

        'Dim SqlqInsert As String = ""

        'Dim returnValue As Integer = -1
        'Try
        '    If Not trans Is Nothing Then
        '        returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, SqlqInsert, parms)
        '    Else
        '        returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"), CommandType.Text, SqlqInsert, parms)
        '    End If

        'Catch ex As SqlClient.SqlException
        '    'Log.Error
        '    returnValue = -1
        'End Try
        'Return returnValue
    End Function
    Friend Function Update_Documento(ByVal newDocument As Model.DocumentoInfo, Optional ByRef trans As SqlTransaction = Nothing) As Integer
        Throw New NotImplementedException


        'Dim parms(1) As SqlParameter
        'parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        'parms(0).Value = idDocumento

        'parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        'parms(1).Value = utente.Codice

        'Dim SqlqInsert As String = ""

        'Dim returnValue As Integer = -1
        'Try
        '    If Not trans Is Nothing Then
        '        returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, SqlqInsert, parms)
        '    Else
        '        returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"), CommandType.Text, SqlqInsert, parms)
        '    End If

        'Catch ex As SqlClient.SqlException
        '    'Log.Error
        '    returnValue = -1
        'End Try
        'Return returnValue
    End Function

    Function Conta_allegatiPerDocumento(ByVal idDocumento As String) As Integer
        Dim result As Integer = 0


        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        'or All_Tipo=16
        Sqlq = "SELECT COUNT(*) FROM Allegati where " & _
        " (  " & _
        " All_Tipo=0 or All_Tipo=15  or All_Tipo=19 " & _
        " ) AND (All_Annullato IS NULL) and All_Documento =" & Dic_FODocumentale.param_id_Documento


        Dim param(0) As SqlClient.SqlParameter

        Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
        par.Value = idDocumento
        param(0) = par


        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                If Not rdr.IsDBNull(0) Then result = rdr.GetInt32(0)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            rdr.Close()
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing

        End Try




        Return result

    End Function

    ' Metodi CRUD per StatoIstanzaDocumento
    Friend Function Insert_StatoIstanzaDocumento(ByVal istanza As StatoIstanzaDocumentoInfo, Optional ByRef trans As SqlTransaction = Nothing) As Integer



        Dim parms(5) As SqlParameter
        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = istanza.Doc_id
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = istanza.Operatore
        parms(2) = New SqlParameter(param_CodiceUfficio, SqlDbType.VarChar)
        parms(2).Value = istanza.CodiceUfficio
        parms(3) = New SqlParameter(param_DataUltimaOperazione, SqlDbType.DateTime)
        parms(3).Value = Date.Now
        parms(4) = New SqlParameter(param_Ruolo, SqlDbType.Char)
        parms(4).Value = istanza.Ruolo
        parms(5) = New SqlParameter(param_LivelloUfficio, SqlDbType.VarChar)
        parms(5).Value = istanza.LivelloUfficio

        Dim returnValue As Integer = -1

        Dim SqlqInsert As String = "INSERT INTO [Stato_Istanza_Documento]" & _
                           "([Doc_Id]" & _
                           ",[Operatore]" & _
                           ",[Cod_Ufficio]" & _
                           ",[Data_Ultima_Operazione]" & _
                           ",[Ruolo]" & _
                           ",[Livello_Ufficio])" & _
                           "     VALUES(" & _
                            param_id_Documento & "," & _
                            param_Operatore & "," & _
                            param_CodiceUfficio & "," & _
                            param_DataUltimaOperazione & "," & _
                            param_Ruolo & "," & _
                            param_LivelloUfficio & _
                           ")"

        Try
            If Not trans Is Nothing Then
                returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, SqlqInsert, parms)
            Else
                returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"), CommandType.Text, SqlqInsert, parms)
            End If

        Catch ex As SqlClient.SqlException
            'Log.Error
            returnValue = -1
        End Try
        Return returnValue
    End Function

    Friend Function Delete_StatoIstanzaDocumento(ByVal istanza As StatoIstanzaDocumentoInfo, Optional ByRef trans As SqlTransaction = Nothing) As Integer


        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Dim SqlqDelete As String = "DELETE FROM [Stato_Istanza_Documento] WHERE [Doc_Id] = " & param_id_Documento

        Dim parms(0) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = istanza.Doc_id

        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, SqlqDelete, parms, -1)

        Return returnValue
    End Function

    Friend Function Update_StatoIstanzaDocumento(ByVal istanza As StatoIstanzaDocumentoInfo, Optional ByRef trans As SqlTransaction = Nothing) As Integer


        Dim parms(5) As SqlParameter
        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = istanza.Doc_id
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = istanza.Operatore
        parms(2) = New SqlParameter(param_CodiceUfficio, SqlDbType.VarChar)
        parms(2).Value = istanza.CodiceUfficio
        parms(3) = New SqlParameter(param_DataUltimaOperazione, SqlDbType.DateTime)
        parms(3).Value = Date.Now
        parms(4) = New SqlParameter(param_Ruolo, SqlDbType.Char)
        parms(4).Value = istanza.Ruolo
        parms(5) = New SqlParameter(param_LivelloUfficio, SqlDbType.VarChar)
        parms(5).Value = istanza.LivelloUfficio

        Dim SqlqUpdate As String = "UPDATE [Stato_Istanza_Documento] " & _
                         "SET [Operatore] = " & param_Operatore & "," & _
                             "[Cod_Ufficio] = " & param_CodiceUfficio & "," & _
                             "[Data_Ultima_Operazione] = " & param_DataUltimaOperazione & "," & _
                             "[Ruolo] = " & param_Ruolo & "," & _
                             "[Livello_Ufficio] = " & param_LivelloUfficio & _
                         " WHERE [Doc_Id] = " & param_id_Documento

        Dim returnValue As Integer = -1

        Try
            If Not trans Is Nothing Then
                returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, SqlqUpdate, parms)
            Else
                returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"), CommandType.Text, SqlqUpdate, parms)
            End If

        Catch ex As SqlClient.SqlException
            'Log.Error
            returnValue = -1
        End Try
        Return returnValue
    End Function

    Public Function Get_StatoIstanzaDocumento(ByVal docId As String, Optional ByRef trans As SqlTransaction = Nothing) As StatoIstanzaDocumentoInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim istanza As StatoIstanzaDocumentoInfo = Nothing
        Dim SqlqSelect As String = "SELECT [Doc_Id],[Operatore],[Cod_Ufficio],[Data_Ultima_Operazione],[Ruolo],[Livello_Ufficio] FROM [Stato_Istanza_Documento] WHERE [Doc_Id] = " & param_id_Documento

        Dim parms(0) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = docId

        Dim rdr As SqlClient.SqlDataReader = Nothing

        Try
            If Not trans Is Nothing Then
                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(trans, CommandType.Text, SqlqSelect, parms)
            Else
                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"), CommandType.Text, SqlqSelect, parms)
            End If

            If rdr.Read Then
                istanza = New StatoIstanzaDocumentoInfo
                istanza.Doc_id = rdr.GetString(0)
                istanza.Operatore = rdr.GetString(1)
                istanza.CodiceUfficio = rdr.GetString(2)
                istanza.DataUltimaOperazione = rdr.GetDateTime(3)
                istanza.Ruolo = rdr.GetString(4)
                istanza.LivelloUfficio = rdr.GetString(5)
            End If

            rdr.Close()

        Catch ex As SqlClient.SqlException
            If rdr Is Nothing Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try
        Return istanza
    End Function
    Public Function Get_StatoIstanzaDocumento(ByVal operatore As String, ByVal tipo As Integer, Optional ByRef trans As SqlTransaction = Nothing) As Generic.List(Of StatoIstanzaDocumentoInfo)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim istanze As New Generic.List(Of StatoIstanzaDocumentoInfo)
        Dim SqlqSelect As String = "SELECT [Stato_Istanza_Documento].[Doc_Id],[Operatore],[Cod_Ufficio],[Data_Ultima_Operazione],[Ruolo],[Livello_Ufficio] " & _
                "FROM [Stato_Istanza_Documento], [Documento] WHERE [Stato_Istanza_Documento].[Doc_Id] = [Documento].[Doc_Id] " & _
                " AND [Documento].[Doc_Tipo] = " & param_TipoDocumento & " AND [Stato_Istanza_Documento].[Operatore] = " & param_Operatore & _
                " AND [Stato_Istanza_Documento].[Ruolo] <> 'A'"

        Dim parms(1) As SqlParameter

        parms(0) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(0).Value = operatore
        parms(1) = New SqlParameter(param_TipoDocumento, SqlDbType.Int)
        parms(1).Value = tipo

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try

            If Not trans Is Nothing Then
                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(trans, CommandType.Text, SqlqSelect, parms)
            Else
                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"), CommandType.Text, SqlqSelect, parms)
            End If

            While rdr.Read
                Dim istanza As New StatoIstanzaDocumentoInfo
                istanza.Doc_id = rdr.GetString(0)
                istanza.Operatore = rdr.GetString(1)
                istanza.CodiceUfficio = rdr.GetString(2)
                istanza.DataUltimaOperazione = rdr.GetDateTime(3)
                istanza.Ruolo = rdr.GetString(4)
                istanza.LivelloUfficio = rdr.GetString(5)
                istanze.Add(istanza)
            End While

            rdr.Close()

        Catch ex As SqlClient.SqlException
            'Log.Error
            If rdr Is Nothing Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try

        Return istanze
    End Function
    ' fine metodi CRUD per StatoIstanzaDocumento
    Private Function GetXmlDati(Optional ByVal tipoMessaggio As Integer = 0) As XmlDocument
        Dim xmldocument As XmlDocument
        xmldocument = objDocumento.getXmlDati(tipoMessaggio)

        Dim nodo As XmlNode = xmldocument.CreateNode(System.Xml.XmlNodeType.Element, "note", "")
        If tipoMessaggio = 7 And Me.note = "" Then
            Me.note = "Atto Riconfermato"
        End If
        nodo.InnerText = Me.note
        xmldocument.FirstChild.AppendChild(nodo)

        nodo = xmldocument.CreateNode(System.Xml.XmlNodeType.Element, "utente", "")
        nodo.InnerText = Me.pAttore
        xmldocument.FirstChild.AppendChild(nodo)

        nodo = xmldocument.CreateNode(System.Xml.XmlNodeType.Element, "nominativoUtente", "")
        nodo.InnerText = oOperatore.Cognome & " " & oOperatore.Nome
        xmldocument.FirstChild.AppendChild(nodo)

        nodo = xmldocument.CreateNode(System.Xml.XmlNodeType.Element, "prossimoAttore", "")
        nodo.InnerText = Me.prossimoAttore
        xmldocument.FirstChild.AppendChild(nodo)

        If Not String.IsNullOrEmpty(Me.descrizioneUfficioCompetenza) Then
            nodo = xmldocument.CreateNode(System.Xml.XmlNodeType.Element, "ufficiocompetenza", "")
            nodo.InnerText = Me.descrizioneUfficioCompetenza
            xmldocument.FirstChild.AppendChild(nodo)
        End If
        Return xmldocument
    End Function
    Private Function Verifica_Compito_Utente(ByVal iddocumento As String) As Object
        Const SFunzione As String = "Verifica_Compito_Utente"
        Dim Sqlq As String
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim rdr As SqlClient.SqlDataReader
        Dim returnValueBool As Boolean

        Try

            If Trim(iddocumento) = "" Or Trim(oOperatore.Codice) = "" Then
                Throw New Exception("Parametri insufficienti")
            End If

            Log.Debug("***INIZIO " & SFunzione & " - Operatore:" & oOperatore.Codice & " IdDocumento: " & iddocumento & " " & Now)

            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            Sqlq = " SELECT  Tcd_Unicita " & _
                   " FROM   Documento_compito_utente  " & _
                   "    INNER JOIN Tab_Compiti_Documento " & _
                   " ON Documento_compito_utente.Dco_Compito = Tab_Compiti_Documento.Tcd_Compito " & _
                   " WHERE     (Dco_id_Documento = '" & iddocumento & "') AND (Dco_utente = '" & oOperatore.Codice & "') "

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)

            While rdr.Read()
                If rdr.IsDBNull(0) Then
                    returnValueBool = False
                Else
                    returnValueBool = rdr.GetBoolean(0)
                End If
            End While
            rdr.Close()
            Log.Debug("***FINE " & SFunzione & " - Operatore:" & oOperatore.Codice & " IdDocumento: " & iddocumento & " " & Now)

        Catch ex As Exception
            Log.Error(ex.Message)
            Throw New Exception(ex.Message)
        End Try

        Return returnValueBool
    End Function
    Friend Function FO_Update_Compiti_Specifici_to_Generici(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Update_Compiti_Specifici_to_Generici"
        Dim vRitPar(3) As Object
        Dim Sqlq As String

        Dim SqlqUpdate As String
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim trans As SqlClient.SqlTransaction = Nothing

        Dim returnVAlue As Integer
        Dim rdr As SqlClient.SqlDataReader
        Dim parms(4) As SqlParameter

        vRitPar(0) = 0
        vRitPar(1) = ""
        Try

            Log.Debug(oOperatore.Codice & ": Inizio" & SFunzione)
            idDocumento = vParm(Dic_FODocumentale.vc_Registra_Compito.c_idDocumento) & ""

            If Trim(idDocumento) = "" Then
                vRitPar(0) = 1
                vRitPar(1) = "Parametri insufficienti, " + SFunzione
                Throw New Exception(oOperatore.Codice & ": Parametri insufficienti, " + SFunzione)
            End If

            Dim arrayListCompitiSpecifici As ArrayList = Get_Anagrafica_Compiti(True)
            conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
            conn.Open()
            trans = conn.BeginTransaction

            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
            For Each compitoSpecifico As String In arrayListCompitiSpecifici

                'leggo se per il documento corrente ci sono i compiti specifici registrati
                Sqlq = " SELECT  Dco_id_Documento, Dco_Compito,Dco_utente " & _
                  " FROM   Documento_compito_utente  " & _
                  "    INNER JOIN Tab_Compiti_Documento " & _
                  " ON Documento_compito_utente.Dco_Compito = Tab_Compiti_Documento.Tcd_Compito " & _
                  " WHERE     (Dco_id_Documento = '" & idDocumento & "') AND (Dco_Compito = '" & compitoSpecifico & "') "
                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(trans, CommandType.Text, Sqlq, Nothing)

                While rdr.Read()
                    If Not rdr.IsDBNull(2) Then
                        Dim operatore_da_modificare As New DllAmbiente.Operatore
                        operatore_da_modificare.Codice = rdr.GetString(2)
                        Dim compito_Generico As String = Definisci_Compito(idDocumento, False, operatore_da_modificare)

                        Try
                            ' FO_Update_Compito_Utente(idDocumento, operatore_da_modificare.Codice, compitoSpecifico, compito_Generico, trans)
                            FO_Update_Compito_Utente(idDocumento, operatore_da_modificare.Codice, compitoSpecifico, compito_Generico)

                        Catch ex As Exception
                            'se si genera un'eccezione, continua con le modifiche di specifico in generico
                            Log.Error(operatore_da_modificare.Codice & ": " & ex.Message)
                        End Try

                    End If
                End While
                rdr.Close()
            Next
            trans.Commit()
        Catch ex As Exception
            Log.Error(ex.Message)
            vRitPar(0) = "1"
            vRitPar(1) = ex.Message
            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try

        Return vRitPar
    End Function
    Private Function Get_Anagrafica_Compiti(ByVal specifico As Boolean) As ArrayList
        Const SFunzione As String = "Get_Anagrafica_Compiti"
        Dim Sqlq As String
        Dim rdr As SqlClient.SqlDataReader
        Dim parms(0) As SqlParameter

        Dim compiti_richiesti As ArrayList = Nothing
        Try

            Log.Debug(oOperatore.Codice & ": Inizio" & SFunzione)
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            parms(0) = New SqlParameter(param_unicita, SqlDbType.Bit)
            parms(0).Value = specifico

            Sqlq = " SELECT  Tcd_Compito " & _
                   " FROM   Tab_Compiti_Documento " & _
                   " WHERE     (Tcd_Unicita = " & param_unicita & ")"

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, parms)
            Log.Info(oOperatore.Codice & ": Lettura" & Sqlq)

            If rdr.HasRows() Then
                compiti_richiesti = New ArrayList
            End If
            While rdr.Read()
                If Not rdr.IsDBNull(0) Then
                    compiti_richiesti.Add(rdr.GetString(0))
                End If
            End While
            Log.Info(oOperatore.Codice & ": Lettura eseguita")
            rdr.Close()

        Catch ex As Exception
            Log.Error(oOperatore.Codice & ":" & ex.Message)
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            Throw New Exception(ex.Message)
        Finally
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try

        Return compiti_richiesti
    End Function
    Friend Function FO_Update_Compito_Utente(ByVal idDocumentoLocale As String, ByVal operatore As String, ByVal compitoRegistrato As String, ByVal compito_Da_Registrare As String, Optional ByVal trans As SqlTransaction = Nothing) As Object
        Const SFunzione As String = "FO_Update_Compito_Utente"
        Dim vRitPar(3) As Object

        Dim SqlqUpdate As String
        Dim conn As SqlClient.SqlConnection = Nothing

        Dim returnValue As Integer
        Dim parms(4) As SqlParameter
        Dim chiudereConn As Boolean = False

        Try

            Log.Debug(oOperatore.Codice & ": Inizio" & SFunzione)

            If Trim(idDocumentoLocale) = "" Or operatore = "" Or compito_Da_Registrare = "" Or compitoRegistrato = "" Then
                vRitPar(0) = 1
                vRitPar(1) = "Parametri insufficienti, " + SFunzione
                Throw New Exception(oOperatore.Codice & ": Parametri insufficienti, " + SFunzione)
            End If

            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            SqlqUpdate = " UPDATE [Documento_compito_utente]" & _
                " SET [Dco_Compito] = " & param_Compito & _
                " ,[Dco_DataRegistrazione] = " & param_DataRegistrazione & _
                " where [Dco_id_Documento]=" & param_id_Documento & "   AND [Dco_Compito] = " & param_CompitoSpecifico_Generico & _
                " AND [Dco_utente] = " & param_Operatore

            parms(0) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
            parms(0).Value = operatore
            parms(1) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
            parms(1).Value = Now
            parms(2) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
            parms(2).Value = idDocumento
            parms(3) = New SqlParameter(param_Compito, SqlDbType.VarChar)
            parms(3).Value = compito_Da_Registrare
            parms(4) = New SqlParameter(param_CompitoSpecifico_Generico, SqlDbType.VarChar)
            parms(4).Value = compitoRegistrato

            Try
                returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, SqlqUpdate, parms, -1)
            Catch ex As Exception
                'se si genera un'eccezione, continua con le modifiche di specifico in generico
                Log.Error(operatore & ": " & ex.Message)
            End Try

            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try

        Return vRitPar
    End Function
    Friend Function FO_Update_Utente_Da_Compito(ByVal idDocumentoLocale As String, ByVal operatore_Registrato As String, ByVal compito As String, Optional ByVal trans As SqlTransaction = Nothing) As Object
        Const SFunzione As String = "FO_Update_Utente_Da_Compito"

        Dim SqlqUpdate As String
        Dim conn As SqlClient.SqlConnection = Nothing

        Dim returnValue As Integer
        Dim parms(3) As SqlParameter
        Dim chiudereConn As Boolean = False

        Try

            Log.Debug(oOperatore.Codice & ": Inizio" & SFunzione)

            If Trim(idDocumentoLocale) = "" Or compito = "" Or operatore_Registrato = "" Then
                Throw New Exception(oOperatore.Codice & ": Parametri insufficienti, " + SFunzione)
            End If

            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            '     Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            SqlqUpdate = " UPDATE [Documento_compito_utente]" & _
                        " SET [Dco_utente] = " & param_Operatore & _
                        " ,[Dco_Operatore] =  " & param_Operatore & _
                        " ,[Dco_DataRegistrazione] = " & param_DataRegistrazione & _
                        " where [Dco_id_Documento]=" & param_id_Documento & "   and [Dco_Compito] = " & param_Compito

            parms(0) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
            parms(0).Value = operatore_Registrato
            parms(1) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
            parms(1).Value = Now
            parms(2) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
            parms(2).Value = idDocumento
            parms(3) = New SqlParameter(param_Compito, SqlDbType.VarChar)
            parms(3).Value = compito



            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, SqlqUpdate, parms, -1)

            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(operatore_Registrato & ":" & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(operatore_Registrato & ":" & ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
        Return returnValue
    End Function
    Friend Function FO_Insert_Compito_Utente(ByVal idDocumentoLocale As String, ByVal operatore As String, ByVal compito_Da_Registrare As String, Optional ByVal certificato_utente As String = "", Optional ByVal trans As SqlTransaction = Nothing) As Object
        Const SFunzione As String = "FO_Insert_Compito_Utente"

        Dim SqlqInsert As String
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim returnValue As Integer
        Dim parms(4) As SqlParameter
        Dim chiudereConn As Boolean = False

        Try
            Log.Debug(oOperatore.Codice & ": Inizio" & SFunzione)

            If Trim(idDocumentoLocale) = "" Or operatore = "" Or compito_Da_Registrare = "" Then
                Throw New Exception(oOperatore.Codice & ": Parametri insufficienti, " + SFunzione)
            End If

            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If


            SqlqInsert = "   INSERT INTO [Documento_compito_utente] " & _
                             " ([Dco_id_Documento]" & _
                             " ,[Dco_Compito]" & _
                             " ,[Dco_utente]" & _
                             " ,[Dco_Operatore]" & _
                             " ,[Dco_DataRegistrazione]" & _
                             " ,[Dco_certificatoUtente] ) " & _
                             "  VALUES (" & _
                                 param_id_Documento & ", " & _
                                 param_Compito & ", " & _
                                 param_Operatore & ", " & _
                                 param_Operatore & ", " & _
                                 param_DataRegistrazione & ", " & _
                                 param_certificatoUtente & ")"

            parms(0) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
            parms(0).Value = operatore
            parms(1) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
            parms(1).Value = Now
            parms(2) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
            parms(2).Value = idDocumento
            parms(3) = New SqlParameter(param_Compito, SqlDbType.VarChar)
            parms(3).Value = compito_Da_Registrare
            parms(4) = New SqlParameter(param_certificatoUtente, SqlDbType.VarChar)
            parms(4).Value = certificato_utente


            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, SqlqInsert, parms, -1)

            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try

        Return returnValue
    End Function

    Friend Function FO_Delete_Documento_Uffici_Competenza(ByVal idDocumentoLocale As String, ByVal codOperatore As String, Optional ByVal trans As SqlTransaction = Nothing) As Object
        Const SFunzione As String = "FO_Delete_Documento_Uffici_Competenza"

        Dim SqlqInsert As String
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim returnValue As Integer
        Dim parms(0) As SqlParameter
        Dim chiudereConn As Boolean = False

        Try
            Log.Debug(codOperatore & ": Inizio" & SFunzione)



            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


            SqlqInsert = "     delete  Documento_Uff_Competenza where [duc_idDocumento] = " & param_id_Documento


            parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
            parms(0).Value = idDocumentoLocale



            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, SqlqInsert, parms, -1)

            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try

        Return returnValue
    End Function

    Public Function FO_Insert_Documento_Uffici_Competenza(ByVal idDocumentoLocale As String, ByVal codOperatore As String, ByVal listaUffici As Collections.Generic.IList(Of DllAmbiente.StrutturaInfo), Optional ByVal trans As SqlTransaction = Nothing) As Object
        Const SFunzione As String = "FO_Insert_Documento_Uffici_Competenza"

        Dim SqlqInsert As String
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim returnValue As Integer
        Dim parms(1) As SqlParameter
        Dim chiudereConn As Boolean = False

        Try
            Log.Debug(codOperatore & ": Inizio" & SFunzione)



            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            FO_Delete_Documento_Uffici_Competenza(idDocumentoLocale, codOperatore, trans)
            If listaUffici.Count > 0 Then


                SqlqInsert = "     INSERT INTO Documento_Uff_Competenza " & _
                               " ([duc_idDocumento]" & _
                               ",[duc_ufficiCompetenza])" & _
                               " VALUES ( " & _
                                   param_id_Documento & ", " & _
                                     param_Documento_ufficio_Competenza & "); "



                parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
                parms(0).Value = idDocumentoLocale
                parms(1) = New SqlParameter(param_Documento_ufficio_Competenza, SqlDbType.VarChar)
                ' parms(1).Value = listaUffici
                ' returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, SqlqInsert, parms, -1)
                For Each Item As DllAmbiente.StrutturaInfo In listaUffici
                    parms(1).Value = Item.CodiceInterno
                    returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, SqlqInsert, parms, -1)
                Next




            End If

            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try

        Return returnValue
    End Function


    Public Function Get_Lista_Documento_Uffici_Competenza(ByVal idDocumentoLocale As String, Optional ByVal codOperatore As String = "", Optional ByVal trans As SqlTransaction = Nothing) As Collections.Generic.IList(Of DllAmbiente.StrutturaInfo)


        Dim lista_UfficiCompetenza As New Collections.Generic.List(Of DllAmbiente.StrutturaInfo)
        Dim parms(0) As SqlParameter
        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = idDocumentoLocale


        Dim Sqlq As String = "SELECT  [duc_ufficiCompetenza],Str_descrBreve,Str_descrizione, Str_codiceUtente " & _
               " FROM          Documento_Uff_Competenza join Struttura on  duc_ufficiCompetenza= str_id" & _
               " WHERE      duc_idDocumento =  " & param_id_Documento

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try

            If Not trans Is Nothing Then
                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(trans, CommandType.Text, Sqlq, parms)
            Else
                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"), CommandType.Text, Sqlq, parms)
            End If

            Dim lstr_ListaUffici As String = ""
            Dim objStruttura As DllAmbiente.StrutturaInfo = Nothing
            While rdr.Read()
                objStruttura = New DllAmbiente.StrutturaInfo
                objStruttura.CodiceInterno = rdr.GetString(0)
                objStruttura.DescrizioneBreve = rdr.GetString(1)
                objStruttura.Descrizione = rdr.GetString(2)
                objStruttura.CodicePubblico = rdr.GetString(3)
                lista_UfficiCompetenza.Add(objStruttura)
            End While

            rdr.Close()

            ' lista_UfficiCompetenza = lstr_ListaUffici.Split(";".ToCharArray, StringSplitOptions.RemoveEmptyEntries)

        Catch ex As SqlClient.SqlException
        Catch ex As Exception
            'Log.Error
            If rdr Is Nothing Then
                rdr.Close()
            End If
            rdr = Nothing
            lista_UfficiCompetenza = Nothing
        End Try
        Return lista_UfficiCompetenza
    End Function

    Friend Function FO_Delete_Documento_Utenti_Uffici_Competenza(ByVal idDocumentoLocale As String, ByVal codOperatore As String, Optional ByVal trans As SqlTransaction = Nothing) As Object
        Const SFunzione As String = "FO_Delete_Documento_Utenti_Uffici_Competenza"

        Dim SqlqInsert As String
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim returnValue As Integer
        Dim parms(0) As SqlParameter
        Dim chiudereConn As Boolean = False

        Try
            Log.Debug(codOperatore & ": Inizio" & SFunzione)
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


            SqlqInsert = "     delete  Documento_Utenti_Competenza where [duc_idDocumento] = " & param_id_Documento


            parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
            parms(0).Value = idDocumentoLocale


            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, SqlqInsert, parms, -1)

            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try

        Return returnValue
    End Function

    Public Function FO_Insert_Documento_Utente_Uffici_Competenza(ByVal idDocumentoLocale As String, ByVal codOperatore As String, ByVal listaUtenti As Collections.Generic.IList(Of String), Optional ByVal trans As SqlTransaction = Nothing) As Object
        Const SFunzione As String = "FO_Insert_Documento_Utente_Uffici_Competenza"

        Dim SqlqInsert As String
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim returnValue As Integer
        Dim parms(1) As SqlParameter
        Dim chiudereConn As Boolean = False

        Try
            Log.Debug(codOperatore & ": Inizio" & SFunzione)



            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            FO_Delete_Documento_Utenti_Uffici_Competenza(idDocumentoLocale, codOperatore, trans)
            If listaUtenti.Count > 0 Then


                SqlqInsert = "     INSERT INTO Documento_Utenti_Competenza " & _
                               " ([duc_idDocumento]" & _
                               ",[duc_accountUtentiCompetenza])" & _
                               " VALUES ( " & _
                                   param_id_Documento & ", " & _
                                     param_Documento_accountUtenti_Competenza & "); "



                parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
                parms(0).Value = idDocumentoLocale
                parms(1) = New SqlParameter(param_Documento_accountUtenti_Competenza, SqlDbType.VarChar)
                ' parms(1).Value = listaUffici
                ' returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, SqlqInsert, parms, -1)
                For Each accountUtente As String In listaUtenti
                    parms(1).Value = accountUtente
                    returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, SqlqInsert, parms, -1)
                Next
            End If

            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try

        Return returnValue
    End Function
    Public Function Get_Lista_Documento_Utenti_Uffici_Competenza(ByVal idDocumentoLocale As String, Optional ByVal codOperatore As String = "", Optional ByVal trans As SqlTransaction = Nothing) As Collections.Generic.IList(Of DllAmbiente.Utente)
        'stef()

        Dim lista_utentiCompetenza As New Collections.Generic.List(Of DllAmbiente.Utente)
        Dim parms(0) As SqlParameter
        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = idDocumentoLocale


        Dim Sqlq As String = " SELECT      duc_accountUtentiCompetenza,  Tab_Operatori.Op_Cognome + ' ' + Tab_Operatori.Op_Nome " & _
               " FROM            Documento_Utenti_Competenza INNER JOIN Tab_Operatori ON Documento_Utenti_Competenza.duc_accountUtentiCompetenza = Tab_Operatori.Op_Codice_Operatore " & _
               " WHERE      duc_idDocumento =  " & param_id_Documento



        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try

            If Not trans Is Nothing Then
                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(trans, CommandType.Text, Sqlq, parms)
            Else
                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"), CommandType.Text, Sqlq, parms)
            End If


            Dim objUtente As DllAmbiente.Utente = Nothing
            While rdr.Read()
                objUtente = New DllAmbiente.Utente
                objUtente.Account = rdr.GetString(0)
                objUtente.Denominazione = rdr.GetString(1)

                lista_utentiCompetenza.Add(objUtente)
            End While

            rdr.Close()

            ' lista_UfficiCompetenza = lstr_ListaUffici.Split(";".ToCharArray, StringSplitOptions.RemoveEmptyEntries)

        Catch ex As SqlClient.SqlException
        Catch ex As Exception
            'Log.Error
            If rdr Is Nothing Then
                rdr.Close()
            End If
            rdr = Nothing
            lista_utentiCompetenza = Nothing
        End Try
        Return lista_utentiCompetenza
    End Function
    Public Function EsistenzaFatture(ByVal idFattura As String) As Boolean

        Dim parms(0) As SqlParameter
        parms(0) = New SqlParameter("@idUnivoco", SqlDbType.VarChar)
        parms(0).Value = idFattura


        Dim Sqlq As String = "SELECT    Prog " & _
                                " FROM Fatture " & _
                                "   INNER Join " & _
                                " Stato_Istanza_Documento ON Fatture.id_documento = Stato_Istanza_Documento.Doc_Id " & _
                                " WHERE     (Fatture.id_fattura_SIC =  @idUnivoco ) AND (Stato_Istanza_Documento.Ruolo <> 'A')"

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"), CommandType.Text, Sqlq, parms)

            If rdr.HasRows Then
                rdr.Close()
                Return True
            Else
                rdr.Close()
                Return False
            End If
        Catch ex As SqlClient.SqlException
        Catch ex As Exception
            Log.Error(oOperatore.Codice & ":" & ex.Message)
            If rdr Is Nothing Then
                rdr.Close()
            End If
            rdr = Nothing
            Return False
        End Try
    End Function
    Public Function EsistenzaOggetto(ByVal tipoDocumento As String, ByVal oggetto As String) As Boolean

        Dim parms(1) As SqlParameter
        parms(0) = New SqlParameter(param_TipoDocumento, SqlDbType.VarChar)
        parms(0).Value = tipoDocumento
        parms(1) = New SqlParameter(param_Oggetto, SqlDbType.NText)
        parms(1).Value = "%" & oggetto & "%"

        Dim Sqlq As String = "SELECT     Documento.Doc_Id " & _
                                " FROM Documento " & _
                                "   INNER Join " & _
                                " Stato_Istanza_Documento ON Documento.Doc_Id = Stato_Istanza_Documento.Doc_Id " & _
                                " WHERE     (Doc_Oggetto LIKE  " & param_Oggetto & " ) AND (Doc_Tipo =" & param_TipoDocumento & ") and (Stato_Istanza_Documento.Ruolo <> 'A')"

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"), CommandType.Text, Sqlq, parms)

            If rdr.HasRows Then
                rdr.Close()
                Return True
            Else
                rdr.Close()
                Return False
            End If
        Catch ex As SqlClient.SqlException
        Catch ex As Exception
            Log.Error(oOperatore.Codice & ":" & ex.Message)
            If rdr Is Nothing Then
                rdr.Close()
            End If
            rdr = Nothing
            Return False
        End Try
    End Function

    Function FO_Get_Lista_Relatori_Attivi() As Collections.Generic.List(Of ItemRelatore)

        Dim listaRelatori As New Collections.Generic.List(Of ItemRelatore)
        Dim itemRelatore As ItemRelatore = Nothing

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""

        Sqlq = " SELECT Tr_id, Tr_Cognome, Tr_Nome, Tr_Ordine_Apparizione, Tr_Carica, Tr_attivo, Tr_dataattivazione, Tr_datadisattivazione, Tr_IdStruttura " & _
                " FROM Tab_Relatori  " & _
                " WHERE Tr_attivo = 1  " & _
                " ORDER BY Tr_Ordine_Apparizione "



        Dim rdr As SqlClient.SqlDataReader = Nothing

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)
            While rdr.Read()
                itemRelatore = New ItemRelatore
                If Not rdr.IsDBNull(0) Then itemRelatore.Id = rdr.GetInt32(0)
                If Not rdr.IsDBNull(1) Then itemRelatore.Cognome = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then itemRelatore.Nome = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then itemRelatore.OrdineApparizione = rdr.GetInt32(3)
                If Not rdr.IsDBNull(4) Then itemRelatore.Carica = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then itemRelatore.Attivo = rdr.GetBoolean(5)
                If Not rdr.IsDBNull(6) Then itemRelatore.DataAttivazione = rdr.GetDateTime(6)
                If Not rdr.IsDBNull(7) Then itemRelatore.DataDisttivazione = rdr.GetDateTime(7)
                If Not rdr.IsDBNull(8) Then itemRelatore.IdStruttura = rdr.GetString(8)

                listaRelatori.Add(itemRelatore)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not (rdr Is Nothing) Then
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
            End If
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing

        End Try
        Return listaRelatori

    End Function
    Public Sub SEGNA_MESSAGGIO_COME_LETTO(ByVal idMessaggio As String)
        Const SFunzione As String = "SEGNA_MESSAGGIO_COME_LETTO"
        Dim sqlq As String = ""
        Dim parms(0) As SqlParameter

        Log.Info("Inizio" & SFunzione)
        Try
            If Not String.IsNullOrEmpty(idMessaggio) Then


                parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
                parms(0).Value = Now

                idMessaggio = IIf(Not idMessaggio.StartsWith("'"), "'" & idMessaggio, idMessaggio)
                idMessaggio = IIf(Not idMessaggio.EndsWith("'"), idMessaggio & "'", idMessaggio)
                sqlq = " UPDATE  [Messaggi] " & _
                    " SET [Msg_dataLettura] =  " & param_DataRegistrazione & _
                    " WHERE [Msg_id] in (" & idMessaggio & ") and Msg_cancellato = 0"


                Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

                Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(strConn, CommandType.Text, sqlq, parms, -1)

            End If

        Catch ex As Exception
            Log.Error(SFunzione & "-" & ex.Message)
        End Try

    End Sub
    Function FO_Insert_Osservazione(ByVal operatore As String, ByVal item As OsservazioneInfo, Optional ByRef trans As SqlClient.SqlTransaction = Nothing) As OsservazioneInfo
        Dim sFunzione As String = "FO_Insert_Osservazione"
        Log.Debug(operatore & ":Inizio " & sFunzione)

        Dim Insert_osservazione As String = "INSERT INTO  [Documento_noteosservazioni] " & _
                "       ([Dno_id_documento] " & _
                "          ,[Dno_testo] " & _
                "          ,[Dno_tipo] " & _
                "          ,[Dno_DataRegistrazione] " & _
                "          ,[Dno_Oparatore]) " & _
                "    VALUES " & _
                "           (" & param_id_Documento & _
                "           ," & param_Oggetto & _
                "           ," & param_TipoAttivita & _
                "           ," & param_DataRegistrazione & _
                "           ," & param_Operatore & _
                " )"

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Dim parms(4) As SqlParameter
        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(0).Value = Now
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = item.Operatore
        parms(2) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(2).Value = item.IdDocumento
        parms(3) = New SqlParameter(param_TipoAttivita, SqlDbType.VarChar)
        parms(3).Value = item.Tipologia
        parms(4) = New SqlParameter(param_Oggetto, SqlDbType.Text)
        parms(4).Value = item.Testo
        Dim returnValue As Integer

        If trans Is Nothing Then
            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(strConn, CommandType.Text, Insert_osservazione, parms, -1)
        Else
            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, Insert_osservazione, parms, -1)
        End If

        Log.Debug(operatore & ":Fine " & sFunzione)
        Return item
    End Function
    Function FO_Update_Osservazione(ByVal operatore As String, ByVal item As OsservazioneInfo, Optional ByRef trans As SqlClient.SqlTransaction = Nothing) As OsservazioneInfo
        Dim sFunzione As String = "FO_Update_Osservazione"
        Log.Debug(operatore & ":Inizio " & sFunzione)
        Dim Update_osservazione As String = ""

        Update_osservazione = " UPDATE  [Documento_noteosservazioni] " & _
            " SET [Dno_DataRegistrazione] = " & param_DataRegistrazione & _
            "     ,[Dno_Oparatore] =  " & param_Operatore & _
            "     , [Dno_testo] = " & param_Oggetto & _
            " WHERE [Dno_id_documento] = " & param_id_Documento & " AND [Dno_tipo]= " & param_TipoAttivita

        Dim parms(4) As SqlParameter

        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(0).Value = Now
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = item.Operatore
        parms(2) = New SqlParameter(param_Oggetto, SqlDbType.Text)
        parms(2).Value = item.Testo
        parms(3) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(3).Value = item.IdDocumento
        parms(4) = New SqlParameter(param_TipoAttivita, SqlDbType.VarChar)
        parms(4).Value = item.Tipologia

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim returnValue As Integer
        If trans Is Nothing Then
            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, Update_osservazione, parms, -1)
        Else
            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, Update_osservazione, parms, -1)
        End If
        Log.Debug(operatore & ":Fine " & sFunzione)
        Return item
    End Function
    Function GetOsservazione(ByVal operatore As String, ByVal idDocumento As String, ByVal tipologia As String) As OsservazioneInfo
        Dim sFunzione As String = "GetOsservazione"
        Log.Debug(operatore & ":Inizio " & sFunzione)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT [Dno_id_documento]" & _
      ",[Dno_prog]" & _
      ",[Dno_DataRegistrazione]" & _
      ",[Dno_Oparatore]" & _
      ",[Dno_testo]" & _
      ",[Dno_tipo]" & _
       " FROM [Documento_noteosservazioni] "
        Sqlq = Sqlq & " where [Dno_id_documento] = " & param_id_Documento & " AND [Dno_tipo]= " & param_TipoAttivita

        Dim param(1) As SqlClient.SqlParameter

        Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
        par.Value = idDocumento
        param(0) = par
        Dim par2 As New SqlClient.SqlParameter(Dic_FODocumentale.param_TipoAttivita, SqlDbType.VarChar)
        par2.Value = tipologia
        param(1) = par2


        Dim rdr As SqlClient.SqlDataReader
        Dim oss As OsservazioneInfo
        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)

            While rdr.Read()
                oss = New OsservazioneInfo
                oss.IdDocumento = rdr.GetString(0)
                oss.Progressivo = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then oss.DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then oss.Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then oss.Testo = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then oss.Tipologia = rdr.GetString(5)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Log.Error(operatore & ":" & sFunzione & "-" & ex.Message)
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try
        Log.Debug(operatore & ":Fine " & sFunzione)
        Return oss
    End Function
    Friend Function FO_Registra_Osservazione(ByVal vParm As Object) As Object
        Const SFunzione As String = "FO_Registra_Osservazione"

        Dim vRitPar(3) As Object
        vRitPar(0) = 0
        vRitPar(1) = ""

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim trans As SqlClient.SqlTransaction = Nothing

        Dim operatore As String = ""
        Try
            operatore = vParm(Dic_FODocumentale.vc_Registra_Osservazione.c_operatore) & ""

            Log.Debug(operatore & " - Inizio" & SFunzione)
            idDocumento = vParm(Dic_FODocumentale.vc_Registra_Osservazione.c_idDocumento) & ""
            Dim tipologia As String = vParm(Dic_FODocumentale.vc_Registra_Osservazione.c_Tipologia) & ""
            Dim testo As String = vParm(Dic_FODocumentale.vc_Registra_Osservazione.c_Testo) & ""


            If Trim(idDocumento) = "" Or Trim(tipologia) = "" Then
                vRitPar(0) = 1
                vRitPar(1) = "Parametri insufficienti, " + SFunzione
                Throw New Exception()
            End If

            conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
            conn.Open()
            trans = conn.BeginTransaction


            Dim oss As OsservazioneInfo = GetOsservazione(operatore, idDocumento, tipologia)
            If Not oss Is Nothing Then
                If (oss.Testo <> testo) Then
                    oss.Testo = testo
                    FO_Update_Osservazione(oOperatore.Codice, oss, trans)
                End If
            Else
                oss = New OsservazioneInfo
                oss.IdDocumento = idDocumento
                oss.Operatore = oOperatore.Codice
                oss.DataRegistrazione = Now
                oss.Testo = testo
                oss.Tipologia = tipologia
                FO_Insert_Osservazione(operatore, oss, trans)
            End If
            Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = "OSSERVAZIONI"
            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_info_attivita) = ""
            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = idDocumento
            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = oOperatore.Cognome & " " & oOperatore.Nome
            FO_Registra_Attivita_new(vRegAtt, trans)

            vRitPar(0) = "0"
            vRitPar(1) = ""

            trans.Commit()

        Catch ex As Exception

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Log.Error(ex.Message)
            vRitPar(0) = "1"
            vRitPar(1) = ex.Message
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
            Log.Debug(operatore & ":Fine " & SFunzione)

        End Try
        Return vRitPar
    End Function
    Public Function GetOsservazioniPerDocumento(ByVal operatore As String, ByVal idDocumento As String) As Collections.Generic.Dictionary(Of String, OsservazioneInfo)
        Dim sFunzione As String = "GetOsservazioniPerDocumento"
        Log.Debug(operatore & ":Inizio " & sFunzione)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT [Dno_id_documento]" & _
          ",[Dno_prog]" & _
          ",[Dno_DataRegistrazione]" & _
          ",[Dno_Oparatore]" & _
          ",[Dno_testo]" & _
          ",[Dno_tipo]" & _
          " FROM [Documento_noteosservazioni] "
        Sqlq = Sqlq & " where [Dno_id_documento] = " & param_id_Documento

        Dim param(0) As SqlClient.SqlParameter

        Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
        par.Value = idDocumento
        param(0) = par

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Dim listaRitorno As New Collections.Generic.Dictionary(Of String, OsservazioneInfo)
        Try
            Dim oss As OsservazioneInfo

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)

            While rdr.Read()
                oss = New OsservazioneInfo
                oss.IdDocumento = rdr.GetString(0)
                oss.Progressivo = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then oss.DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then oss.Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then oss.Testo = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then oss.Tipologia = rdr.GetString(5)
                listaRitorno.Add(oss.Tipologia, oss)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Log.Error(operatore & ":" & sFunzione & "-" & ex.Message)
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try
        Log.Debug(operatore & ":Fine " & sFunzione)
        Return listaRitorno
    End Function
    Function FO_Update_Liq_Preimpegno(ByVal vecchioPreImp As String, ByVal item As ItemImpegnoInfo, Optional ByRef trans As SqlTransaction = Nothing) As Integer
        Dim flagTransEsterna As Boolean = False
        If trans Is Nothing Then
            flagTransEsterna = False
        Else
            flagTransEsterna = True
        End If
        Dim update_liq As String = " Update   [Documento_liquidazione] " & _
        " Set [Dli_NPreImpegno] = " & param_NPreImp & _
        " WHERE [Dli_Documento] = " & param_id_Documento & _
        " AND [Dli_NPreImpegno] = '" & vecchioPreImp & "'"


        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(1) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = item.Dli_Documento

        parms(1) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
        parms(1).Value = item.Dli_NPreImpegno

        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & item.Dli_Operatore)


        Dim returnValue As Integer = 0
        If flagTransEsterna Then
            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, update_liq, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "UPLIQPRE", oOperatore, trans)
        Else
            Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
            conn.Open()
            Dim transInterna As SqlClient.SqlTransaction = conn.BeginTransaction
            Try

                returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(transInterna, CommandType.Text, update_liq, parms, -1)

                registra_AttivitaContabile(item.Dli_Documento, "UPLIQPRE", oOperatore, transInterna)


                transInterna.Commit()

            Catch ex As Exception
                Log.Error(ex.Message)

                If Not transInterna Is Nothing Then
                    transInterna.Rollback()
                End If
                Throw New Exception(ex.Message)
            Finally
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End Try

        End If

        Return returnValue
    End Function
    Function FO_Update_Bilancio_E_Liq_PreImpegno(ByVal vecchioPreimp As String, ByVal itemImp As ItemImpegnoInfo) As Boolean
        Const SFunzione As String = "FO_Update_Bilancio_E_Liq_PreImpegno"
        Dim result As Boolean = False
        Log.Debug(" op:" & oOperatore.Codice)
        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing
        trans = conn.BeginTransaction
        Try
            FO_Update_Bilancio(itemImp, trans)
            FO_Update_Liq_Preimpegno(vecchioPreimp, itemImp, trans)
            trans.Commit()
            result = True
        Catch ex As Exception
            Log.Error(SFunzione & ":" & ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try

        Return result


    End Function
    Function FO_Insert_Preimpegno_Var(ByVal item As ItemRiduzioneInfo) As ItemRiduzioneInfo
        Dim Insert_PreImpegno_Var As String = "INSERT INTO  [Documento_Preimpegno_var] " & _
"       ([Div_Documento] " & _
"          ,[Div_DataRegistrazione] " & _
"          ,[Div_Operatore] " & _
"          ,[Div_Bilancio] " & _
"          ,[Div_UPB] " & _
"          ,[Div_Cap] " & _
"          ,[Div_Costo] " & _
"          ,[Div_NumPreImpegno] " & _
"          ,[Div_Anno] " & _
"          ,[Div_NumeroReg] " & _
"          ,[Div_TipoAssunzione] " & _
"          ,[Div_Num_assunzione] " & _
"          ,[Div_Data_Assunzione] " & _
"          ,[Div_Stato] " & _
"          ,[Div_MissioneProgramma] " & _
"          ,[HashTokenCallSic] " & _
"          ,[IdDocContabileSic]) " & _
"    VALUES " & _
"           (" & param_id_Documento & _
"           ," & param_DataRegistrazione & _
"           ," & param_Operatore & _
"           ," & param_Esercizio & _
"           , " & param_UPB & _
"           ," & param_Cap & _
"           ," & param_Costo & _
"           ," & param_NContabile & _
"           ," & param_AnnoImp & _
"           ," & param_NumRegistr & _
"           ," & param_TipoAssunzione & _
"           ," & param_NAssunzione & _
"           ," & param_DataAss & _
"           ," & param_Stato & _
"           ," & param_MissioneProgramma & _
"           ," & param_HashTokenCallSic & _
"           ," & param_IdDocContabileSic & _
" )Select @@identity"



        ' Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(16) As SqlParameter
        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(0).Value = Now 'item.Dli_DataRegistrazione
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = item.Dli_Operatore
        parms(2) = New SqlParameter(param_NContabile, SqlDbType.VarChar)
        parms(2).Value = "" & item.Dli_NumImpegno
        parms(3) = New SqlParameter(param_UPB, SqlDbType.VarChar)
        parms(3).Value = IIf(item.Dli_UPB Is Nothing, "", item.Dli_UPB)
        parms(4) = New SqlParameter(param_Cap, SqlDbType.VarChar)
        parms(4).Value = IIf(item.Dli_Cap Is Nothing, "", item.Dli_Cap)
        parms(5) = New SqlParameter(param_Esercizio, SqlDbType.VarChar)
        parms(5).Value = IIf(item.Dli_Esercizio Is Nothing, "", item.Dli_Esercizio)
        parms(6) = New SqlParameter(param_Costo, SqlDbType.Decimal)
        parms(6).Value = item.Dli_Costo
        parms(7) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(7).Value = item.Dli_Documento
        parms(8) = New SqlParameter(param_AnnoImp, SqlDbType.VarChar)
        parms(8).Value = "" & item.DBi_Anno

        parms(9) = New SqlParameter(param_Stato, SqlDbType.Int)
        parms(9).Value = item.Di_Stato

        parms(10) = New SqlParameter(param_NumRegistr, SqlDbType.VarChar)
        parms(10).Value = "" & item.Div_NumeroReg



        parms(11) = New SqlParameter(param_NAssunzione, SqlDbType.VarChar)
        parms(11).Value = "" & item.Div_Num_assunzione
        parms(12) = New SqlParameter(param_TipoAssunzione, SqlDbType.Int)
        parms(12).Value = item.Div_TipoAssunzione
        parms(13) = New SqlParameter(param_DataAss, SqlDbType.DateTime)
        parms(13).Value = item.Div_Data_Assunzione
        parms(14) = New SqlParameter(param_MissioneProgramma, SqlDbType.VarChar)
        parms(14).Value = IIf(item.Dli_MissioneProgramma Is Nothing, "", item.Dli_MissioneProgramma)

        parms(15) = New SqlParameter(param_HashTokenCallSic, SqlDbType.VarChar)
        parms(15).Value = IIf(item.HashTokenCallSic Is Nothing, DBNull.Value, item.HashTokenCallSic)
        parms(16) = New SqlParameter(param_IdDocContabileSIC, SqlDbType.VarChar)
        parms(16).Value = IIf(item.IdDocContabileSic Is Nothing, DBNull.Value, item.IdDocContabileSic)

        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & item.Dli_Operatore & " costo:" & item.Dli_Costo)


        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction

        Try

            Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, Insert_PreImpegno_Var, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "PREIMPVAR", oOperatore, trans)
            trans.Commit()
            item.Dli_prog = returnValue
            ' 

        Catch ex As Exception
            Log.Error(oOperatore.Codice & " :" & ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try

        Return item

    End Function


    Function FO_Update_Preimpegno_Var(ByVal item As ItemRiduzioneInfo) As ItemRiduzioneInfo


        Dim Update_PreImpegno_Var As String = " UPDATE  [Documento_Preimpegno_var] " & _
     " SET [Div_DataRegistrazione] = " & param_DataRegistrazione & _
     "     ,[Div_Operatore] =  " & param_Operatore & _
     "     ,[Div_Bilancio] = " & param_Esercizio & _
     "     ,[Div_UPB] =" & param_UPB & _
     "     ,[Div_Cap] =  " & param_Cap & _
     "     ,[Div_Costo] = " & param_Costo & _
     "     ,[Div_NumPreImpegno] = " & param_NContabile & _
     "     ,[Div_NumeroReg]  = " & param_NumRegistr & _
     "     ,[Div_Anno] = " & param_AnnoImp & _
     "     ,[Div_TipoAssunzione] = " & param_TipoAssunzione & _
     "     ,[Div_Num_assunzione] = " & param_NAssunzione & _
     "     ,[Div_Data_Assunzione] =  " & param_DataAss & _
     "     ,[Div_Stato] = " & param_Stato & _
     "     ,[Div_MissioneProgramma] = " & param_MissioneProgramma & _
     "     ,[HashTokenCallSic] = " & param_HashTokenCallSic & _
     "     ,[IdDocContabileSic] = " & param_IdDocContabileSic & _
     " WHERE [Div_Documento] = " & param_id_Documento & " AND [Div_prog]= " & param_Prog_Contabilita

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Dim parms(17) As SqlParameter
        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(0).Value = Now 'item.Dli_DataRegistrazione
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = item.Dli_Operatore
        parms(2) = New SqlParameter(param_NContabile, SqlDbType.VarChar)
        parms(2).Value = "" & item.Dli_NPreImpegno
        parms(3) = New SqlParameter(param_UPB, SqlDbType.VarChar)
        parms(3).Value = IIf(item.Dli_UPB Is Nothing, "", item.Dli_UPB)
        parms(4) = New SqlParameter(param_Cap, SqlDbType.VarChar)
        parms(4).Value = IIf(item.Dli_Cap Is Nothing, "", item.Dli_Cap)
        parms(5) = New SqlParameter(param_Esercizio, SqlDbType.VarChar)
        parms(5).Value = IIf(item.Dli_Esercizio Is Nothing, "", item.Dli_Esercizio)
        parms(6) = New SqlParameter(param_Costo, SqlDbType.Decimal)
        parms(6).Value = item.Dli_Costo

        parms(7) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(7).Value = item.Dli_Documento
        parms(8) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(8).Value = item.Dli_prog
        parms(9) = New SqlParameter(param_AnnoImp, SqlDbType.VarChar)
        parms(9).Value = "" & item.DBi_Anno
        parms(10) = New SqlParameter(param_NumRegistr, SqlDbType.VarChar)
        parms(10).Value = "" & item.Div_NumeroReg

        parms(11) = New SqlParameter(param_NAssunzione, SqlDbType.VarChar)
        parms(11).Value = "" & item.Div_Num_assunzione
        parms(12) = New SqlParameter(param_TipoAssunzione, SqlDbType.Int)
        parms(12).Value = item.Div_TipoAssunzione
        parms(13) = New SqlParameter(param_DataAss, SqlDbType.DateTime)
        parms(13).Value = item.Div_Data_Assunzione
        parms(14) = New SqlParameter(param_Stato, SqlDbType.Int)
        parms(14).Value = item.Di_Stato
        parms(15) = New SqlParameter(param_MissioneProgramma, SqlDbType.VarChar)
        parms(15).Value = IIf(item.Dli_MissioneProgramma Is Nothing, "", item.Dli_MissioneProgramma)

        parms(16) = New SqlParameter(param_HashTokenCallSic, SqlDbType.VarChar)
        parms(16).Value = IIf(item.HashTokenCallSic Is Nothing, DBNull.Value, item.HashTokenCallSic)
        parms(17) = New SqlParameter(param_IdDocContabileSIC, SqlDbType.VarChar)
        parms(17).Value = IIf(item.IdDocContabileSic Is Nothing, DBNull.Value, item.IdDocContabileSic)

        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & item.Dli_Operatore & " costo:" & item.Dli_Costo)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction

        Try

            Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, Update_PreImpegno_Var, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "UPPREVAR", oOperatore, trans)
            trans.Commit()

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try

        Return item
    End Function
    Function FO_Get_DatiPreImpegniVariazioni(Optional ByVal idDocumento As String = "", Optional ByVal prog As Long = 0) As Collections.Generic.List(Of ItemRiduzioneInfo)
        Dim lista As New Generic.List(Of ItemRiduzioneInfo)
        Dim con As New ItemRiduzioneInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT [Div_Documento],[Div_prog],[Div_DataRegistrazione], " & _
                " [Div_Operatore],[Div_Bilancio] ,[Div_UPB] ,[Div_Cap],[Div_Costo],[Div_NumPreImpegno],[Div_Anno], " & _
                " CASE WHEN [Div_Stato]=0 THEN '' ELSE  [Div_NumeroReg] END as [Div_NumeroReg], " & _
                " [Div_TipoAssunzione]," & _
                " [Div_Num_assunzione]," & _
                " [Div_Data_Assunzione]," & _
                " [Div_Stato]," & _
                " [Div_MissioneProgramma], " & _
                " [HashTokenCallSic], " & _
                " [IdDocContabileSic] " & _
                " FROM [Documento_Preimpegno_var] "

        Dim param() As SqlClient.SqlParameter

        If idDocumento <> "" Then
            ReDim Preserve param(0)
            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
            par.Value = idDocumento
            param(0) = par
            If Sqlq.Contains("where ") Then
                Sqlq = Sqlq & " and Div_Documento = " & Dic_FODocumentale.param_id_Documento
            Else
                Sqlq = Sqlq & " where Div_Documento = " & Dic_FODocumentale.param_id_Documento
            End If

        End If

        If prog > 0 Then

            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_Prog_Contabilita, SqlDbType.BigInt)
            par.Value = prog

            If idDocumento <> "" Then
                ReDim Preserve param(1)
                param(1) = par
            Else
                ReDim Preserve param(0)
                param(0) = par
            End If

            If Sqlq.Contains("where ") Then
                Sqlq = Sqlq & " and Div_prog = " & Dic_FODocumentale.param_Prog_Contabilita
            Else
                Sqlq = Sqlq & " where Div_prog = " & Dic_FODocumentale.param_Prog_Contabilita
            End If

        End If


        Sqlq = Sqlq & " Order By Div_Documento,Div_prog"



        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemRiduzioneInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Dli_NPreImpegno = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.DBi_Anno = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then con.Div_NumeroReg = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then con.Div_TipoAssunzione = rdr.GetInt32(11)
                If Not rdr.IsDBNull(12) Then con.Div_Num_assunzione = rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then con.Div_Data_Assunzione = FormatDateTime(rdr.GetDateTime(13), DateFormat.LongDate)
                If Not rdr.IsDBNull(14) Then con.Di_Stato = rdr.GetInt32(14)
                If Not rdr.IsDBNull(15) Then con.Dli_MissioneProgramma = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then con.HashTokenCallSic = rdr.GetString(16)
                If Not rdr.IsDBNull(17) Then con.IdDocContabileSic = rdr.GetString(17)
                con.IsPreImp = True
                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function
    Function FO_Get_ListaRiduzioniDaPreImpegno(ByVal Numero As String) As Collections.Generic.List(Of ItemRiduzioneInfo)
        Dim con As New ItemRiduzioneInfo()
        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "  SELECT [Div_Documento] " & _
                " ,[Div_prog]" & _
                " ,[Div_DataRegistrazione]" & _
                " ,[Div_Operatore]" & _
                " ,[Div_Bilancio]" & _
                " ,[Div_UPB]" & _
                " ,[Div_Cap]" & _
                " ,[Div_Costo]" & _
                " ,[Div_NumPreImpegno]" & _
                " ,[Div_Anno]" & _
                " ,[Div_NumeroReg]" & _
                " ,[Div_TipoAssunzione]" & _
                " ,[Div_Num_assunzione]" & _
                " ,[Div_Data_Assunzione]" & _
                " ,[Div_Stato]" & _
                " ,[Div_MissioneProgramma]" & _
                " FROM [Documento_Preimpegno_var]"
        'BUGFIX 25/11/2014: aggiuto nella where Div_NumeroReg = '', per evitare che vengano sottratte 
        ' della disponibilità del preimpegno data dal SIC
        ' anche le riduzioni già registrate sul sic, per il calcolo dell'imp potenziale
        Sqlq = Sqlq & " where Div_NumeroReg = '' and [Div_Stato] = 1 "
        Dim param(0) As SqlClient.SqlParameter
        Dim par As SqlClient.SqlParameter

        Sqlq = Sqlq & " and [Div_NumPreImpegno]=" & Dic_FODocumentale.param_NPreImp
        par = New SqlClient.SqlParameter(Dic_FODocumentale.param_NPreImp, SqlDbType.VarChar)
        par.Value = Numero
        param(0) = par



        Dim rdr As SqlClient.SqlDataReader
        Dim listaRid As New Collections.Generic.List(Of ItemRiduzioneInfo)
        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)

            While rdr.Read()
                con = New ItemRiduzioneInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Dli_NPreImpegno = "" & rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.DBi_Anno = "" & rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then con.Div_NumeroReg = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then con.Div_TipoAssunzione = rdr.GetInt32(11)
                If Not rdr.IsDBNull(12) Then con.Div_Num_assunzione = rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then con.Div_Data_Assunzione = FormatDateTime(rdr.GetDateTime(13), DateFormat.LongDate)
                If Not rdr.IsDBNull(14) Then con.Di_Stato = rdr.GetInt32(14)
                If Not rdr.IsDBNull(15) Then con.Dli_MissioneProgramma = rdr.GetString(15)
                con.IsPreImp = True
                listaRid.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try
        Return listaRid
    End Function






#Region "Deleghe _Vecchia versione"
    Sub FO_Insert_Delega_Old(ByVal operatoreOperazione As DllAmbiente.Operatore, ByVal oporigine As DllAmbiente.Operatore, ByVal opdestinazione As DllAmbiente.Operatore, ByVal tipoDelega As Integer, ByRef trans As SqlTransaction)


        Dim insert_Delega As String = "INSERT INTO [Deleghe] ( " & _
        "[Del_Delegante] ,[Del_Delegato] ,[Del_DataAttivazione] , " & _
        "[Del_OperatoreAttivazione],[Del_DataDisattivazione],[Del_OperatoreDisattivazione],[Del_Tipo]) " & _
        "  VALUES         (@Delegante,@Delegato,@DataAttivazione," & _
        "@OperatoreAttivazione,@DataDisattivazione,@OperatoreDisattivazione,@TipoDelega)"

        Dim param_Delegante As String = "@Delegante"
        Dim param_Delegato As String = "@Delegato"
        Dim param_DataAttivazione As String = "@DataAttivazione"
        Dim param_OperatoreAttivazione As String = "@OperatoreAttivazione"
        Dim param_DataDisattivazione As String = "@DataDisattivazione"
        Dim param_OperatoreDisattivazione As String = "@OperatoreDisattivazione"
        Dim param_TipoDelega As String = "@TipoDelega"




        Dim parms(6) As SqlParameter
        parms(0) = New SqlParameter(param_Delegante, SqlDbType.VarChar)
        parms(0).Value = oporigine.Codice
        parms(1) = New SqlParameter(param_Delegato, SqlDbType.VarChar)
        parms(1).Value = opdestinazione.Codice
        parms(2) = New SqlParameter(param_OperatoreAttivazione, SqlDbType.VarChar)
        parms(2).Value = operatoreOperazione.Codice
        parms(3) = New SqlParameter(param_DataAttivazione, SqlDbType.DateTime)
        parms(3).Value = Now
        parms(4) = New SqlParameter(param_OperatoreDisattivazione, SqlDbType.VarChar)
        parms(4).Value = DBNull.Value
        parms(5) = New SqlParameter(param_DataDisattivazione, SqlDbType.DateTime)
        parms(5).Value = DBNull.Value
        parms(6) = New SqlParameter(param_TipoDelega, SqlDbType.Int)
        parms(6).Value = tipoDelega

        Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, insert_Delega, parms, -1)




    End Sub


    Public Function FO_GetDelega(ByVal opOrigine As DllAmbiente.Operatore, ByVal flagAttiva As Boolean) As ItemDelega
        Dim delega As ItemDelega = Nothing
        Dim param_Delegante As String = "@Delegante"
        Dim parms(0) As SqlParameter

        parms(0) = New SqlParameter(param_Delegante, SqlDbType.VarChar)
        parms(0).Value = opOrigine.Codice



        Dim Sqlq As String = " SELECT [Del_idDelega] " & _
 "     ,[Del_Delegante]" & _
 "     ,[Del_Delegato]" & _
 "     ,[Del_DataAttivazione]" & _
 "     ,[Del_OperatoreAttivazione]" & _
 "     ,[Del_DataDisattivazione]" & _
 "     ,[Del_OperatoreDisattivazione]" & _
 "     ,[Del_Tipo],[Del_Id_Anag_Delegato],[Del_Id_Anag_Delegante],[Del_ChiusuraAtomatica],[Del_DataChiusuraAutomatica] " & _
 "       FROM [Deleghe] " & _
 " where [Del_Delegante]=@Delegante and "
        If flagAttiva Then
            Sqlq = Sqlq & " [Del_DataDisattivazione] is null"
        Else
            Sqlq = Sqlq & " not [Del_DataDisattivazione] is null"
        End If



        Try
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            Using rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, parms)
                While rdr.Read()
                    delega = New ItemDelega
                    delega.Id = rdr.GetInt64(0)
                    delega.CodDelegante = "" & rdr.GetString(1)
                    If Not rdr.IsDBNull(2) Then delega.CodDelegato = rdr.GetString(2)
                    If Not rdr.IsDBNull(3) Then delega.DataAttivazione = rdr.GetDateTime(3)
                    If Not rdr.IsDBNull(4) Then delega.CodOpAttivazione = rdr.GetString(4)
                    If Not rdr.IsDBNull(5) Then delega.DataDisattivazione = rdr.GetDateTime(5)
                    If Not rdr.IsDBNull(6) Then delega.CodOpDisattivazione = rdr.GetString(6)
                    If Not rdr.IsDBNull(7) Then delega.TipoDelega = rdr.GetInt32(7)
                    delega.Del_ChiusuraAtomatica = 0
                    If Not rdr.IsDBNull(8) Then delega.Del_Id_Anag_Delegato = rdr.GetInt64(8)
                    If Not rdr.IsDBNull(9) Then delega.Del_Id_Anag_Delegante = rdr.GetInt64(9)
                    If Not rdr.IsDBNull(10) Then delega.Del_ChiusuraAtomatica = rdr.GetInt32(10)
                    If Not rdr.IsDBNull(11) Then delega.Del_DataChiusuraAutomatica = rdr.GetDateTime(11)
                End While
                rdr.Close()
            End Using
        Catch ex As SqlClient.SqlException
            delega = Nothing
            Log.Error(ex.Message)
        End Try

        Return delega

    End Function



    Public Function FO_GetDelegaDaDelegato(ByVal opDestinazione As DllAmbiente.Operatore, ByVal flagAttiva As Boolean) As ItemDelega
        Dim delega As ItemDelega = Nothing
        Dim param_Delegato As String = "@Delegato"
        Dim parms(0) As SqlParameter

        parms(0) = New SqlParameter(param_Delegato, SqlDbType.VarChar)
        parms(0).Value = opDestinazione.Codice



        Dim Sqlq As String = " SELECT [Del_idDelega] " & _
 "     ,[Del_Delegante]" & _
 "     ,[Del_Delegato]" & _
 "     ,[Del_DataAttivazione]" & _
 "     ,[Del_OperatoreAttivazione]" & _
 "     ,[Del_DataDisattivazione]" & _
 "     ,[Del_OperatoreDisattivazione]" & _
 "     ,[Del_Tipo],[Del_Id_Anag_Delegato],[Del_Id_Anag_Delegante],[Del_ChiusuraAtomatica],[Del_DataChiusuraAutomatica] " & _
 "       FROM [Deleghe] " & _
 " where [Del_Delegato]=@Delegato and "
        If flagAttiva Then
            Sqlq = Sqlq & " [Del_DataDisattivazione] is null"
        Else
            Sqlq = Sqlq & " not [Del_DataDisattivazione] is null"
        End If



        Try
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            Using rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, parms)
                While rdr.Read()
                    delega = New ItemDelega
                    delega.Id = rdr.GetInt64(0)
                    delega.CodDelegante = "" & rdr.GetString(1)
                    If Not rdr.IsDBNull(2) Then delega.CodDelegato = rdr.GetString(2)
                    If Not rdr.IsDBNull(3) Then delega.DataAttivazione = rdr.GetDateTime(3)
                    If Not rdr.IsDBNull(4) Then delega.CodOpAttivazione = rdr.GetString(4)
                    If Not rdr.IsDBNull(5) Then delega.DataDisattivazione = rdr.GetDateTime(5)
                    If Not rdr.IsDBNull(6) Then delega.CodOpDisattivazione = rdr.GetString(6)
                    If Not rdr.IsDBNull(7) Then delega.TipoDelega = rdr.GetInt32(7)
                    delega.Del_ChiusuraAtomatica = 0
                    If Not rdr.IsDBNull(8) Then delega.Del_Id_Anag_Delegato = rdr.GetInt64(8)
                    If Not rdr.IsDBNull(9) Then delega.Del_Id_Anag_Delegante = rdr.GetInt64(9)
                    If Not rdr.IsDBNull(10) Then delega.Del_ChiusuraAtomatica = rdr.GetInt32(10)
                    If Not rdr.IsDBNull(11) Then delega.Del_DataChiusuraAutomatica = rdr.GetDateTime(11)
                End While
                rdr.Close()
            End Using
        Catch ex As SqlClient.SqlException
        Catch ex As Exception
            delega = Nothing
            Log.Error(ex.Message)
        End Try

        Return delega

    End Function



    '   Function FO_GetListaDeleghe(ByVal flagAttiva As Boolean, Optional ByVal oporigine As String = "", Optional ByVal opdestinazione As String = "", Optional ByVal dataInizio As DateTime = Nothing, Optional ByVal dataFine As DateTime = Nothing) As Generic.List(Of ItemDelega)
    '       Dim delega As ItemDelega = Nothing

    '       Dim parms(1) As SqlParameter
    '       parms(0) = New SqlParameter("@Delegante", SqlDbType.VarChar)
    '       parms(0).Value = IIf(String.IsNullOrEmpty(oporigine), DBNull.Value, oporigine)

    '       parms(1) = New SqlParameter("@Delegato", SqlDbType.VarChar)
    '       parms(1).Value = IIf(String.IsNullOrEmpty(opdestinazione), DBNull.Value, opdestinazione)




    '       Dim Sqlq As String = " SELECT [Del_idDelega] " & _
    '"     ,[Del_Delegante]" & _
    '"     ,[Del_Delegato]" & _
    '"     ,[Del_DataAttivazione]" & _
    '"     ,[Del_OperatoreAttivazione]" & _
    '"     ,[Del_DataDisattivazione]" & _
    '"     ,[Del_OperatoreDisattivazione]" & _
    '"     ,[Del_Tipo],[Del_Id_Anag_Delegato],[Del_Id_Anag_Delegante],[Del_ChiusuraAtomatica],[Del_DataChiusuraAutomatica]  " & _
    '"       FROM [Deleghe] " & _
    '" where [Del_Delegante]=isnull(@Delegante,[Del_Delegante]) and [Del_Delegato]=isnull(@Delegato,[Del_Delegato]) and "

    '       If flagAttiva Then
    '           Sqlq = Sqlq & " [Del_DataDisattivazione] is null"
    '       Else
    '           Sqlq = Sqlq & " not [Del_DataDisattivazione] is null"
    '       End If


    '       Dim listaDeleghe As New Generic.List(Of ItemDelega)
    '       Try
    '           Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

    '           Using rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, parms)
    '               While rdr.Read()
    '                   delega = New ItemDelega
    '                   delega.Id = rdr.GetInt64(0)
    '                   delega.CodDelegante = rdr.GetString(1)
    '                   delega.CodDelegato = rdr.GetString(2)
    '                   If Not rdr.IsDBNull(3) Then delega.DataAttivazione = rdr.GetDateTime(3)
    '                   If Not rdr.IsDBNull(4) Then delega.CodOpAttivazione = rdr.GetString(4)
    '                   If Not rdr.IsDBNull(5) Then delega.DataDisattivazione = rdr.GetDateTime(5)
    '                   If Not rdr.IsDBNull(6) Then delega.CodOpDisattivazione = rdr.GetString(6)
    '                   If Not rdr.IsDBNull(7) Then delega.TipoDelega = rdr.GetInt32(7)
    '                   delega.Del_ChiusuraAtomatica = 0
    '                   If Not rdr.IsDBNull(8) Then delega.Del_Id_Anag_Delegato = rdr.GetInt64(8)
    '                   If Not rdr.IsDBNull(9) Then delega.Del_Id_Anag_Delegante = rdr.GetInt64(9)
    '                   If Not rdr.IsDBNull(10) Then delega.Del_ChiusuraAtomatica = rdr.GetInt32(10)
    '                   If Not rdr.IsDBNull(11) Then delega.Del_DataChiusuraAutomatica = rdr.GetDateTime(11)
    '                   listaDeleghe.Add(delega)
    '               End While
    '               rdr.Close()
    '           End Using
    '       Catch ex As SqlClient.SqlException
    '           listaDeleghe = Nothing
    '           Log.Error(ex.Message)
    '       End Try

    '       Return listaDeleghe

    '   End Function

    Function FO_GetListaDeleghe(ByVal flagAttiva As Boolean, Optional ByVal oporigine As String = "", Optional ByVal opdestinazione As String = "", Optional ByVal dataInizio As DateTime = Nothing, Optional ByVal dataFine As DateTime = Nothing, Optional ByVal opNomeOrigine As String = "", Optional ByVal opNomeDestinazione As String = "", Optional ByVal opCognomeOrigine As String = "", Optional ByVal opCognomeDestinazione As String = "", Optional ByVal cod_dipart As String = "", Optional ByVal cod_uff As String = "") As Generic.List(Of ItemDelega)
        Dim delega As ItemDelega = Nothing

        Dim parms(1) As SqlParameter
        parms(0) = New SqlParameter("@Delegante", SqlDbType.VarChar)
        parms(0).Value = IIf(String.IsNullOrEmpty(oporigine), DBNull.Value, oporigine)

        parms(1) = New SqlParameter("@Delegato", SqlDbType.VarChar)
        parms(1).Value = IIf(String.IsNullOrEmpty(opdestinazione), DBNull.Value, opdestinazione)





        Dim Sqlq As String = " SELECT [Del_idDelega] " & _
 "     ,[Del_Delegante]" & _
 "     ,[Del_Delegato]" & _
 "     ,[Del_DataAttivazione]" & _
 "     ,[Del_OperatoreAttivazione]" & _
 "     ,[Del_DataDisattivazione]" & _
 "     ,[Del_OperatoreDisattivazione]" & _
 "     ,[Del_Tipo],[Del_Id_Anag_Delegato],[Del_Id_Anag_Delegante],[Del_ChiusuraAtomatica],[Del_DataChiusuraAutomatica]  " & _
 "       FROM [Deleghe] " & _
 " where [Del_Delegante]=isnull(@Delegante,[Del_Delegante]) and [Del_Delegato]=isnull(@Delegato,[Del_Delegato]) and "

        'Sqlq = "        SELECT     Deleghe.Del_idDelega,  Deleghe.Del_OperatoreAttivazione, Deleghe.Del_DataDisattivazione, Deleghe.Del_OperatoreDisattivazione,  " & _
        '    "                      Deleghe.Del_Tipo, Deleghe.Del_Id_Anag_Delegato, Deleghe.Del_Id_Anag_Delegante, Deleghe.Del_ChiusuraAtomatica, Deleghe.Del_DataChiusuraAutomatica,  " & _
        '    "                      opOrigine.Op_Cognome, opOrigine.Op_Nome, opDestinatario.Op_Cognome AS Expr1, opDestinatario.Op_Nome AS Expr2, Deleghe.Del_Delegato,  " & _


        Sqlq = " SELECT [Del_idDelega] " & _
 "     ,[Del_Delegante]" & _
 "     ,[Del_Delegato]" & _
 "     ,[Del_DataAttivazione]" & _
 "     ,[Del_OperatoreAttivazione]" & _
 "     ,[Del_DataDisattivazione]" & _
 "     ,[Del_OperatoreDisattivazione]" & _
 "     ,[Del_Tipo],[Del_Id_Anag_Delegato],[Del_Id_Anag_Delegante],[Del_ChiusuraAtomatica],[Del_DataChiusuraAutomatica],  " & _
              "                      opOrigine.Op_Cognome as opCognomeOrigine, opOrigine.Op_Nome as opNomeOrigine, opDestinatario.Op_Cognome AS opCognomeDestinatario, opDestinatario.Op_Nome AS opNomeDestinatario, Deleghe.Del_Delegato,  " & _
              "                      Strutture_Operatori.Sop_Struttura, Struttura.Str_padre AS dipartimento, Struttura.Str_id AS ufficio, Struttura.Str_descrizione AS ufficio " & _
              " FROM         Deleghe INNER JOIN  " & _
              "                      Tab_Operatori AS opOrigine ON Deleghe.Del_Delegante = opOrigine.Op_Codice_Operatore INNER JOIN  " & _
              "                      Tab_Operatori AS opDestinatario ON Deleghe.Del_Delegato = opDestinatario.Op_Codice_Operatore INNER JOIN  " & _
              "                      Strutture_Operatori ON Deleghe.Del_Delegato = Strutture_Operatori.Sop_Operatore AND Deleghe.Del_DataDisattivazione IS NULL OR  " & _
              "                      Deleghe.Del_Delegante = Strutture_Operatori.Sop_Operatore AND NOT (Deleghe.Del_DataDisattivazione IS NULL) INNER JOIN  " & _
              "                      Struttura ON Strutture_Operatori.Sop_Struttura = Struttura.Str_id  " & _
              " where [Del_Delegante]=isnull(@Delegante,[Del_Delegante]) and [Del_Delegato]=isnull(@Delegato,[Del_Delegato]) and "

        If Not String.IsNullOrEmpty(opNomeOrigine) Then
            Sqlq = Sqlq & " and opOrigine.Op_Nome ='" & opNomeOrigine & "' "
        End If

        If Not String.IsNullOrEmpty(opNomeDestinazione) Then
            Sqlq = Sqlq & " and opDestinatario.Op_Nome ='" & opNomeDestinazione & "' "
        End If

        If Not String.IsNullOrEmpty(opCognomeOrigine) Then
            Sqlq = Sqlq & " and opOrigine.Op_Cognome ='" & opCognomeOrigine & "' "
        End If

        If Not String.IsNullOrEmpty(opCognomeDestinazione) Then
            Sqlq = Sqlq & " and opDestinatario.Op_Cognome ='" & opCognomeDestinazione & "' "
        End If


        If Not String.IsNullOrEmpty(cod_uff) Then
            Sqlq = Sqlq & " and Struttura.Str_id ='" & cod_uff & "' "
        End If

        If Not String.IsNullOrEmpty(cod_dipart) Then
            Sqlq = Sqlq & " and Struttura.Str_padre ='" & cod_dipart & "' "
        End If

        If flagAttiva Then

            Sqlq = Sqlq & " [Del_DataDisattivazione] is null"
        Else
            Sqlq = Sqlq & " not [Del_DataDisattivazione] is null"
        End If


        Dim listaDeleghe As New Generic.List(Of ItemDelega)
        Try
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            Using rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, parms)
                While rdr.Read()
                    delega = New ItemDelega
                    delega.Id = rdr.GetInt64(0)
                    delega.CodDelegante = rdr.GetString(1)
                    delega.CodDelegato = rdr.GetString(2)

                    If Not rdr.IsDBNull(3) Then delega.DataAttivazione = rdr.GetDateTime(3)
                    If Not rdr.IsDBNull(4) Then delega.CodOpAttivazione = rdr.GetString(4)
                    If Not rdr.IsDBNull(5) Then delega.DataDisattivazione = rdr.GetDateTime(5)
                    If Not rdr.IsDBNull(6) Then delega.CodOpDisattivazione = rdr.GetString(6)
                    If Not rdr.IsDBNull(7) Then delega.TipoDelega = rdr.GetInt32(7)
                    delega.Del_ChiusuraAtomatica = 0
                    If Not rdr.IsDBNull(8) Then delega.Del_Id_Anag_Delegato = rdr.GetInt64(8)
                    If Not rdr.IsDBNull(9) Then delega.Del_Id_Anag_Delegante = rdr.GetInt64(9)
                    If Not rdr.IsDBNull(10) Then delega.Del_ChiusuraAtomatica = rdr.GetInt32(10)
                    If Not rdr.IsDBNull(11) Then delega.Del_DataChiusuraAutomatica = rdr.GetDateTime(11)
                    listaDeleghe.Add(delega)
                End While
                rdr.Close()
            End Using
        Catch ex As SqlClient.SqlException
        Catch ex As Exception
            listaDeleghe = Nothing
            Log.Error(ex.Message)
        End Try

        Return listaDeleghe

    End Function

    Sub FO_DisattivaDelegaOld(ByVal operatoreOperazione As DllAmbiente.Operatore, ByVal opOrigine As DllAmbiente.Operatore, ByVal opDestinazione As DllAmbiente.Operatore, ByRef trans As SqlTransaction)
        Dim update_Delega As String = "update [Deleghe]  set [Del_DataDisattivazione]=@DataDisattivazione,[Del_OperatoreDisattivazione]=@OperatoreDisattivazione  " & _
        " where [Del_Delegante]=@Delegante and [Del_Delegato]=@Delegato and [Del_DataDisattivazione] is null"

        Dim param_Delegante As String = "@Delegante"
        Dim param_Delegato As String = "@Delegato"
        Dim param_DataDisattivazione As String = "@DataDisattivazione"
        Dim param_OperatoreDisattivazione As String = "@OperatoreDisattivazione"




        Dim parms(3) As SqlParameter
        parms(0) = New SqlParameter(param_Delegante, SqlDbType.VarChar)
        parms(0).Value = opOrigine.Codice
        parms(1) = New SqlParameter(param_OperatoreDisattivazione, SqlDbType.VarChar)
        parms(1).Value = operatoreOperazione.Codice
        parms(2) = New SqlParameter(param_DataDisattivazione, SqlDbType.DateTime)
        parms(2).Value = Now
        parms(3) = New SqlParameter(param_Delegato, SqlDbType.VarChar)
        parms(3).Value = opDestinazione.Codice

        Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, update_Delega, parms, -1)




    End Sub

    Function ListaPossibiliDelegati() As Generic.IList(Of DllAmbiente.Operatore)

        Const SFunzione As String = "ListaPossibiliDelegati "

        Log.Debug(SFunzione & oOperatore.Codice & " ")
        Dim lista As New Generic.List(Of DllAmbiente.Operatore)

        Dim sqlq As String = "SELECT distinct [Op_Codice_Operatore]" & _
      " ,[Op_Cognome]" & _
      " ,[Op_Nome]" & _
      " ,[Op_Data]" & _
      " ,[Op_Password]" & _
      " ,[Op_Fl_Password]" & _
      " ,[Op_Data_Ultimo_Utilizzo]" & _
      " ,[Op_Password_H]" & _
      " ,[Op_Stato]" & _
      " ,[OP_Codice_Numerico]" & _
      " ,[Op_Gest_Certificati]" & _
      " ,[Op_Certificato]" & _
      " ,[Op_CodiceFiscale]" & _
      " ,[Op_CodiceMedOsp]" & _
  " FROM [Tab_Operatori] left join Strutture_Operatori on [Op_Codice_Operatore]=Sop_Operatore " & _
  " left join  Struttura_Attributi  on [Op_Codice_Operatore]=sta_id " & _
  " left join  Tab_Operatori_Gruppi  on [Op_Codice_Operatore]=TOG_Operatore " & _
  " where Sop_Struttura Is NULL And sta_procedura Is null And TOG_Gruppo Is null " & _
  " and op_stato=1 and not op_codice_operatore like '%_old%' " & _
           " and   Tab_Operatori.Op_Codice_Operatore not in (  " & _
                "        SELECT  distinct    Tab_Operatori.Op_Codice_Operatore " & _
                " FROM         Tab_Operatori INNER JOIN " & _
                "               Deleghe ON   Tab_Operatori.Op_Codice_Operatore = Deleghe.Del_Delegante " & _
                " WHERE     (Deleghe.Del_DataDisattivazione IS NULL ) " & _
        "               ) "


        Dim ope As DllAmbiente.Operatore = Nothing
        Try
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            Using rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, sqlq, Nothing)
                While rdr.Read()
                    ope = New DllAmbiente.Operatore
                    ope.Codice = rdr.GetString(0)
                    lista.Add(ope)

                End While
                rdr.Close()
            End Using
        Catch ex As SqlClient.SqlException
            ope = Nothing
            lista.Clear()
            Log.Error(SFunzione & oOperatore.Codice & " " & ex.Message)
        End Try



        Return lista
    End Function

    Function ListaPossibiliDeleganti(ByVal codUfficio As String) As Generic.IList(Of DllAmbiente.Operatore)

        Const SFunzione As String = "ListaPossibiliDelegati "

        Log.Debug(SFunzione & oOperatore.Codice & " ")
        Dim lista As New Generic.List(Of DllAmbiente.Operatore)
        Dim query As String = ""
        ', Deleghe.Del_DataDisattivazione, Deleghe.Del_idDelega " & _
        query = query & "" & _
                "        SELECT  distinct    Tab_Operatori.Op_Codice_Operatore, Tab_Operatori.Op_Cognome, Tab_Operatori.Op_Nome, Tab_Operatori.Op_Data, Tab_Operatori.Op_Password, " & _
                "             Tab_Operatori.Op_Fl_Password, Tab_Operatori.Op_Data_Ultimo_Utilizzo, Tab_Operatori.Op_Password_H, Tab_Operatori.Op_Stato,  " & _
                " Tab_Operatori.Op_CodiceFiscale,Strutture_Operatori.Sop_Struttura " & _
                " FROM         Tab_Operatori INNER JOIN " & _
                "               Strutture_Operatori ON Tab_Operatori.Op_Codice_Operatore = Strutture_Operatori.Sop_Operatore LEFT OUTER JOIN " & _
                "               Deleghe ON Strutture_Operatori.Sop_Operatore = Deleghe.Del_Delegante " & _
                " WHERE     (Strutture_Operatori.Sop_Struttura = '" & codUfficio & "') AND ((Deleghe.Del_DataDisattivazione IS NULL AND Deleghe.Del_idDelega IS NULL) or not Deleghe.Del_DataDisattivazione IS NULL ) "
        query = query & " and   Tab_Operatori.Op_Codice_Operatore not in (  " & _
                "        SELECT  distinct    Tab_Operatori.Op_Codice_Operatore " & _
                " FROM         Tab_Operatori INNER JOIN " & _
                "               Strutture_Operatori ON Tab_Operatori.Op_Codice_Operatore = Strutture_Operatori.Sop_Operatore INNER  JOIN " & _
                "               Deleghe ON Strutture_Operatori.Sop_Operatore = Deleghe.Del_Delegato " & _
                " WHERE     (Strutture_Operatori.Sop_Struttura = '" & codUfficio & "') AND (Deleghe.Del_DataDisattivazione IS NULL ) " & _
                ") "


        Dim ope As DllAmbiente.Operatore = Nothing
        Try
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            Using rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, query, Nothing)
                While rdr.Read()
                    ope = New DllAmbiente.Operatore
                    ope.Codice = rdr.GetString(0)
                    'If Not rdr.IsDBNull(12) Then
                    '    If Not rdr.IsDBNull(11) Then
                    '        lista.Add(ope)
                    '    End If
                    'Else
                    lista.Add(ope)
                    ' End If


                End While
                rdr.Close()
            End Using
        Catch ex As SqlClient.SqlException
        Catch ex As Exception
            ope = Nothing
            lista.Clear()
            Log.Error(SFunzione & oOperatore.Codice & " " & ex.Message)
        End Try



        Return lista
    End Function
#End Region

#Region "Deleghe"
    'Function Attiva_Delega________(ByVal opOperazione As DllAmbiente.Operatore, ByVal a_delegaItem As ItemDelega, ByVal tipoDelegaInterim As Integer) As String

    '    Const SFunzione As String = "Attiva_Rimuovi_Delega"
    '    Dim result As String = ""
    '    Dim opOrigine As New DllAmbiente.Operatore
    '    opOrigine.Codice = a_delegaItem.CodDelegante
    '    Dim delega As ItemDelega = FO_GetDelega(opOrigine, 1)
    '    If Not delega Is Nothing Then
    '        Return "l'utente " & opOrigine.Codice & " ha già delegato all'utente " & delega.CodDelegato
    '    End If

    '    Dim op As New DllAmbiente.Operatore


    '    Dim NominativoDelegante As String = ""
    '    Dim NominativoDelegato As String = ""



    '    NominativoDelegante = op.Leggi_NominativoDaAnagrafica(a_delegaItem.Del_Id_Anag_Delegante)
    '    NominativoDelegato = op.Leggi_NominativoDaAnagrafica(a_delegaItem.Del_Id_Anag_Delegato)


    '    'If opdestinatario.Cognome Is Nothing Or opdestinatario.Nome Is Nothing Then
    '    '    Return "Verificare le credenziali del'utente " & opdestinatario.Codice
    '    'End If

    '    'If Not opdestinatario.oUfficio Is Nothing AndAlso Not String.IsNullOrEmpty(opdestinatario.oUfficio.CodUfficio) Then
    '    '    Return "l'utente " & opdestinatario.Codice & "è già associato all'ufficio " & opdestinatario.oUfficio.DescrUfficio
    '    'End If

    '    Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
    '    conn.Open()
    '    Dim trans As SqlTransaction = Nothing
    '    trans = conn.BeginTransaction
    '    Try

    '        Dim tipoDocumento As Integer = 0
    '        Dim istanze As Generic.List(Of StatoIstanzaDocumentoInfo) = Get_StatoIstanzaDocumento(opOrigine.Codice, tipoDocumento, trans)

    '        Dim descAtti As String = "INTERIM"
    '        If tipoDelegaInterim = 0 Then
    '            descAtti = "DELEGA"
    '        Else
    '            descAtti = "INTERIM"
    '        End If



    '        For Each itemistanza As StatoIstanzaDocumentoInfo In istanze
    '            Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
    '            '    If flagAttiva Then
    '            oOperatore = opOrigine
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = descAtti
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id

    '            pDescrizioneAttore = NominativoDelegato
    '            FO_Registra_Attivita_new(vRegAtt, trans)

    '            '   End If


    '            ' oOperatore = opdestinatario
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = "ARRIVOWL"

    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = NominativoDelegato

    '            pDescrizioneAttore = NominativoDelegato
    '            FO_Registra_Attivita_new(vRegAtt, trans)

    '        Next
    '        istanze = Nothing
    '        tipoDocumento = 2
    '        istanze = Get_StatoIstanzaDocumento(opOrigine.Codice, tipoDocumento, trans)


    '        For Each itemistanza As StatoIstanzaDocumentoInfo In istanze
    '            Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
    '            '  If flagAttiva Then
    '            oOperatore = opOrigine
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = descAtti
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = NominativoDelegante
    '            pDescrizioneAttore = NominativoDelegante
    '            FO_Registra_Attivita_new(vRegAtt, trans)

    '            '   End If



    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = "ARRIVOWL"
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = NominativoDelegato
    '            oOperatore = opOrigine

    '            pDescrizioneAttore = NominativoDelegato
    '            FO_Registra_Attivita_new(vRegAtt, trans)




    '        Next



    '        Dim sql As String = "update v_Tab_Operatori_Anagrafica set  Id_Anagrafica ='" & a_delegaItem.Del_Id_Anag_Delegato & "' WHERE     Op_Codice_Operatore ='" & a_delegaItem.CodDelegante & "'"
    '        Dim resultUpdate As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, Nothing, -1)


    '        oOperatore = opOperazione

    '        'REgista in tab:deleghe

    '        FO_Insert_Delega(opOperazione, a_delegaItem, trans)

    '        trans.Commit()
    '        'trans.Commit()
    '        result = ""
    '    Catch ex As Exception
    '        Log.Error(SFunzione & ":" & ex.Message)

    '        If Not trans Is Nothing Then
    '            trans.Rollback()
    '        End If
    '        result = ex.Message
    '    Finally
    '        If Not conn Is Nothing Then
    '            conn.Close()
    '        End If
    '    End Try


    '    Return result

    'End Function






    Function Attiva_Delega(ByVal opOperazione As DllAmbiente.Operatore, ByVal a_delegaItem As ItemDelega) As String

        Const SFunzione As String = "Attiva_Rimuovi_Delega"
        Dim result As String = ""
        Dim oporigine As New DllAmbiente.Operatore()
        oporigine.Codice = a_delegaItem.CodDelegante
        Dim opdestinatario As New DllAmbiente.Operatore()
        opdestinatario.Codice = a_delegaItem.CodDelegato

        Dim delega As ItemDelega = FO_GetDelega(oporigine, 1)
        If Not delega Is Nothing Then
            Return "l'utente " & oporigine.Codice & " ha già delegato all'utente " & delega.CodDelegato
        End If

        If opdestinatario.Cognome Is Nothing Or opdestinatario.Nome Is Nothing Then
            Return "Verificare le credenziali del'utente " & opdestinatario.Codice
        End If

        If Not opdestinatario.oUfficio Is Nothing AndAlso Not String.IsNullOrEmpty(opdestinatario.oUfficio.CodUfficio) Then
            Return "l'utente " & opdestinatario.Codice & "è già associato all'ufficio " & opdestinatario.oUfficio.DescrUfficio
        End If

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing
        trans = conn.BeginTransaction
        Try

            Dim tipoDocumento As Integer = 0
            Dim istanze As Generic.List(Of StatoIstanzaDocumentoInfo) = Get_StatoIstanzaDocumento(oporigine.Codice, tipoDocumento, trans)

            Dim descAtti As String = "INTERIM"

            descAtti = "DELEGA"




            For Each itemistanza As StatoIstanzaDocumentoInfo In istanze
                Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
                '    If flagAttiva Then
                oOperatore = oporigine
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = descAtti
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_ufficio) = oOperatore.oUfficio.CodUfficio

                pDescrizioneAttore = oOperatore.Cognome & " " & oOperatore.Nome
                FO_Registra_Attivita_new(vRegAtt, trans)

                '   End If


                oOperatore = opdestinatario
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = "ARRIVOWL"

                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = opdestinatario.Cognome & " " & opdestinatario.Nome
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_ufficio) = oOperatore.oUfficio.CodUfficio

                pDescrizioneAttore = oOperatore.Cognome & " " & oOperatore.Nome
                FO_Registra_Attivita_new(vRegAtt, trans)

            Next
            istanze = Nothing
            tipoDocumento = 2
            istanze = Get_StatoIstanzaDocumento(oporigine.Codice, tipoDocumento, trans)


            For Each itemistanza As StatoIstanzaDocumentoInfo In istanze
                Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
                '  If flagAttiva Then
                oOperatore = oporigine
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = descAtti
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = oporigine.Cognome & " " & oporigine.Nome
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_ufficio) = oOperatore.oUfficio.CodUfficio

                pDescrizioneAttore = oOperatore.Cognome & " " & oOperatore.Nome
                FO_Registra_Attivita_new(vRegAtt, trans)

                '   End If


                oOperatore = opdestinatario
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = "ARRIVOWL"
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = opdestinatario.Cognome & " " & opdestinatario.Nome

                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_ufficio) = oOperatore.oUfficio.CodUfficio


                pDescrizioneAttore = oOperatore.Cognome & " " & oOperatore.Nome
                FO_Registra_Attivita_new(vRegAtt, trans)




            Next





            Dim sql As String = "update Tab_Operatori_Gruppi set  TOG_Operatore ='" & opdestinatario.Codice & "' WHERE     TOG_Operatore ='" & oporigine.Codice & "'"
            Dim resultUpdate As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, Nothing, -1)

            Dim sql2 As String = "update Strutture_Operatori set  Sop_Operatore ='" & opdestinatario.Codice & "' WHERE     Sop_Operatore ='" & oporigine.Codice & "'"
            resultUpdate = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql2, Nothing, -1)

            Dim sql3 As String = "update Struttura_Attributi set  sta_id='" & opdestinatario.Codice & "' WHERE     sta_id='" & oporigine.Codice & "'"
            resultUpdate = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql3, Nothing, -1)

            Dim sql4 As String = "update Stato_Istanza_Documento set  Operatore='" & opdestinatario.Codice & "' WHERE     Operatore='" & oporigine.Codice & "' and ruolo<>'A'  and livello_ufficio<>'UAR'"
            resultUpdate = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql4, Nothing, -1)

            Dim sql5 As String = "update TAB_Operatori_Attributi set  Toa_Operatore='" & opdestinatario.Codice & "' WHERE     Toa_Operatore='" & oporigine.Codice & "' "
            resultUpdate = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql5, Nothing, -1)

            Dim sql6 As String = "update Struttura_Attributi set  sta_valore='" & opdestinatario.Codice & "' WHERE     sta_valore='" & oporigine.Codice & "'"
            resultUpdate = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql6, Nothing, -1)


            oOperatore = opOperazione

            'REgista in tab:deleghe
            FO_Insert_Delega(opOperazione, a_delegaItem, trans)


            trans.Commit()
            'trans.Commit()
            result = ""
        Catch ex As Exception
            Log.Error(SFunzione & ":" & ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            result = ex.Message
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try


        Return result

    End Function


    Function Attiva_Interim(ByVal opOperazione As DllAmbiente.Operatore, ByVal a_delegaItem As ItemDelega) As String

        Const SFunzione As String = "Attiva_Rimuovi_Delega"
        Dim result As String = ""
        Dim oporigine As New DllAmbiente.Operatore()
        oporigine.Codice = a_delegaItem.CodDelegante
        Dim opdestinatario As New DllAmbiente.Operatore()
        opdestinatario.Codice = a_delegaItem.CodDelegato

        Dim delega As ItemDelega = FO_GetDelega(oporigine, 1)
        If Not delega Is Nothing Then
            Return "l'utente " & oporigine.Codice & " ha già delegato all'utente " & delega.CodDelegato
        End If

        If opdestinatario.Cognome Is Nothing Or opdestinatario.Nome Is Nothing Then
            Return "Verificare le credenziali del'utente " & opdestinatario.Codice
        End If

        If Not opdestinatario.oUfficio Is Nothing AndAlso Not String.IsNullOrEmpty(opdestinatario.oUfficio.CodUfficio) Then
            Return "l'utente " & opdestinatario.Codice & "è già associato all'ufficio " & opdestinatario.oUfficio.DescrUfficio
        End If

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing
        trans = conn.BeginTransaction
        Try

            Dim tipoDocumento As Integer = 0
            Dim istanze As Generic.List(Of StatoIstanzaDocumentoInfo) = Get_StatoIstanzaDocumento(oporigine.Codice, tipoDocumento, trans)

            Dim descAtti As String = "INTERIM"


            opdestinatario.oUfficio.CodUfficio = oporigine.oUfficio.CodUfficio

            For Each itemistanza As StatoIstanzaDocumentoInfo In istanze
                Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
                '    If flagAttiva Then
                oOperatore = oporigine
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = descAtti
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_ufficio) = oOperatore.oUfficio.CodUfficio
                pDescrizioneAttore = oOperatore.Cognome & " " & oOperatore.Nome
                FO_Registra_Attivita_new(vRegAtt, trans)

                '   End If


                oOperatore = opdestinatario
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = "ARRIVOWL"

                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = opdestinatario.Cognome & " " & opdestinatario.Nome
                '   vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_ufficio) = oOperatore.oUfficio.CodUfficio
                pDescrizioneAttore = oOperatore.Cognome & " " & oOperatore.Nome
                FO_Registra_Attivita_new(vRegAtt, trans)

            Next
            istanze = Nothing
            tipoDocumento = 2
            istanze = Get_StatoIstanzaDocumento(oporigine.Codice, tipoDocumento, trans)


            For Each itemistanza As StatoIstanzaDocumentoInfo In istanze
                Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
                '  If flagAttiva Then
                oOperatore = oporigine
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = descAtti
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = oporigine.Cognome & " " & oporigine.Nome
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_ufficio) = oOperatore.oUfficio.CodUfficio
                pDescrizioneAttore = oOperatore.Cognome & " " & oOperatore.Nome
                FO_Registra_Attivita_new(vRegAtt, trans)

                '   End If


                oOperatore = opdestinatario
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = "ARRIVOWL"
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = opdestinatario.Cognome & " " & opdestinatario.Nome

                ''attenzione oOperatore = opdestinatario
                '     vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_ufficio) = oOperatore.oUfficio.CodUfficio
                pDescrizioneAttore = oOperatore.Cognome & " " & oOperatore.Nome
                FO_Registra_Attivita_new(vRegAtt, trans)




            Next





            Dim sql As String = "update Tab_Operatori_Gruppi set  TOG_Operatore ='" & opdestinatario.Codice & "' WHERE     TOG_Operatore ='" & oporigine.Codice & "'"
            Dim resultUpdate As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, Nothing, -1)

            Dim sql2 As String = "update Strutture_Operatori set  Sop_Operatore ='" & opdestinatario.Codice & "' WHERE     Sop_Operatore ='" & oporigine.Codice & "'"
            resultUpdate = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql2, Nothing, -1)

            Dim sql3 As String = "update Struttura_Attributi set  sta_id='" & opdestinatario.Codice & "' WHERE     sta_id='" & oporigine.Codice & "'"
            resultUpdate = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql3, Nothing, -1)

            Dim sql4 As String = "update Stato_Istanza_Documento set  Operatore='" & opdestinatario.Codice & "' WHERE     Operatore='" & oporigine.Codice & "' and ruolo<>'A'  and livello_ufficio<>'UAR'"
            resultUpdate = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql4, Nothing, -1)

            Dim sql5 As String = "update TAB_Operatori_Attributi set  Toa_Operatore='" & opdestinatario.Codice & "' WHERE     Toa_Operatore='" & oporigine.Codice & "' "
            resultUpdate = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql5, Nothing, -1)

            Dim sql6 As String = "update Struttura_Attributi set  sta_valore='" & opdestinatario.Codice & "' WHERE     sta_valore='" & oporigine.Codice & "'"
            resultUpdate = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql6, Nothing, -1)


            oOperatore = opOperazione

            'REgista in tab:deleghe
            '            FO_Insert_Delega(opOperazione, a_delegaItem, trans)


            trans.Commit()
            'trans.Commit()
            result = ""
        Catch ex As Exception
            Log.Error(SFunzione & ":" & ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            result = ex.Message
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try


        Return result

    End Function

    Function Rimuovi_Delega(ByVal opOperazione As DllAmbiente.Operatore, ByVal a_delegaItem As ItemDelega, ByVal tipoDelegaInterim As Integer) As String

        Const SFunzione As String = "Rimuovi_Delega"
        Dim result As String = ""
        Dim oporigine As New DllAmbiente.Operatore()
        oporigine.Codice = a_delegaItem.CodDelegato
        Dim opdestinatario As New DllAmbiente.Operatore()
        opdestinatario.Codice = a_delegaItem.CodDelegante


        Dim delega As ItemDelega = FO_GetDelega(oporigine, 1)
        If Not delega Is Nothing Then
            Return "l'utente " & oporigine.Codice & " ha già delegato all'utente " & delega.CodDelegato
        End If

        If opdestinatario.Cognome Is Nothing Or opdestinatario.Nome Is Nothing Then
            Return "Verificare le credenziali del'utente " & opdestinatario.Codice
        End If

        If Not opdestinatario.oUfficio Is Nothing AndAlso Not String.IsNullOrEmpty(opdestinatario.oUfficio.CodUfficio) Then
            Return "l'utente " & opdestinatario.Codice & "è già associato all'ufficio " & opdestinatario.oUfficio.DescrUfficio
        End If

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing
        trans = conn.BeginTransaction
        Try

            Dim tipoDocumento As Integer = 0
            Dim istanze As Generic.List(Of StatoIstanzaDocumentoInfo) = Get_StatoIstanzaDocumento(oporigine.Codice, tipoDocumento, trans)

            Dim descAtti As String = "INTERIM"
            If tipoDelegaInterim = 0 Then
                descAtti = "DELEGA"
            Else
                descAtti = "INTERIM"
            End If

            descAtti = "FINE" & descAtti



            For Each itemistanza As StatoIstanzaDocumentoInfo In istanze
                Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
                '    If flagAttiva Then
                oOperatore = oporigine
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = descAtti
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id

                pDescrizioneAttore = oOperatore.Cognome & " " & oOperatore.Nome
                FO_Registra_Attivita_new(vRegAtt, trans)

                '   End If


                oOperatore = opdestinatario
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = "ARRIVOWL"

                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = opdestinatario.Cognome & " " & opdestinatario.Nome

                pDescrizioneAttore = oOperatore.Cognome & " " & oOperatore.Nome
                FO_Registra_Attivita_new(vRegAtt, trans)

            Next
            istanze = Nothing
            tipoDocumento = 2
            istanze = Get_StatoIstanzaDocumento(oporigine.Codice, tipoDocumento, trans)


            For Each itemistanza As StatoIstanzaDocumentoInfo In istanze
                Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
                '  If flagAttiva Then
                oOperatore = oporigine
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = descAtti
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = oporigine.Cognome & " " & oporigine.Nome
                pDescrizioneAttore = oOperatore.Cognome & " " & oOperatore.Nome
                FO_Registra_Attivita_new(vRegAtt, trans)

                '   End If



                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = "ARRIVOWL"
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id
                vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = opdestinatario.Cognome & " " & opdestinatario.Nome
                oOperatore = opdestinatario

                pDescrizioneAttore = oOperatore.Cognome & " " & oOperatore.Nome
                FO_Registra_Attivita_new(vRegAtt, trans)




            Next





            Dim sql As String = "update Tab_Operatori_Gruppi set  TOG_Operatore ='" & opdestinatario.Codice & "' WHERE     TOG_Operatore ='" & oporigine.Codice & "'"
            Dim resultUpdate As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, Nothing, -1)

            Dim sql2 As String = "update Strutture_Operatori set  Sop_Operatore ='" & opdestinatario.Codice & "' WHERE     Sop_Operatore ='" & oporigine.Codice & "'"
            resultUpdate = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql2, Nothing, -1)

            Dim sql3 As String = "update Struttura_Attributi set  sta_id='" & opdestinatario.Codice & "' WHERE     sta_id='" & oporigine.Codice & "'"
            resultUpdate = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql3, Nothing, -1)

            Dim sql4 As String = "update Stato_Istanza_Documento set  Operatore='" & opdestinatario.Codice & "' WHERE     Operatore='" & oporigine.Codice & "' and ruolo<>'A'  and livello_ufficio<>'UAR'"
            resultUpdate = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql4, Nothing, -1)

            Dim sql5 As String = "update TAB_Operatori_Attributi set  Toa_Operatore='" & opdestinatario.Codice & "' WHERE     Toa_Operatore='" & oporigine.Codice & "' "
            resultUpdate = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql5, Nothing, -1)

            Dim sql6 As String = "update Struttura_Attributi set  sta_valore='" & opdestinatario.Codice & "' WHERE     sta_valore='" & oporigine.Codice & "'"
            resultUpdate = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql6, Nothing, -1)


            oOperatore = opOperazione

            'REgista in tab:deleghe
            FO_DisattivaDelega(opOperazione, a_delegaItem, trans)


            trans.Commit()
            'trans.Commit()
            result = ""
        Catch ex As Exception
            Log.Error(SFunzione & ":" & ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            result = ex.Message
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try


        Return result

    End Function
    'Function Rimuovi_Delega_______(ByVal opOperazione As DllAmbiente.Operatore, ByVal a_delegaItem As ItemDelega, ByVal tipoDelegaInterim As Integer) As String

    '    Const SFunzione As String = "Attiva_Rimuovi_Delega"
    '    Dim result As String = ""
    '    Dim opOrigine As New DllAmbiente.Operatore
    '    opOrigine.Codice = a_delegaItem.CodDelegante
    '    Dim delega As ItemDelega = FO_GetDelega(opOrigine, 1)
    '    If Not delega Is Nothing Then
    '        Return "l'utente " & opOrigine.Codice & " ha già delegato all'utente " & delega.CodDelegato
    '    End If

    '    Dim op As New DllAmbiente.Operatore


    '    Dim NominativoDelegante As String = ""
    '    Dim NominativoDelegato As String = ""



    '    NominativoDelegante = op.Leggi_NominativoDaAnagrafica(a_delegaItem.Del_Id_Anag_Delegante)
    '    NominativoDelegato = op.Leggi_NominativoDaAnagrafica(a_delegaItem.Del_Id_Anag_Delegato)


    '    'If opdestinatario.Cognome Is Nothing Or opdestinatario.Nome Is Nothing Then
    '    '    Return "Verificare le credenziali del'utente " & opdestinatario.Codice
    '    'End If

    '    'If Not opdestinatario.oUfficio Is Nothing AndAlso Not String.IsNullOrEmpty(opdestinatario.oUfficio.CodUfficio) Then
    '    '    Return "l'utente " & opdestinatario.Codice & "è già associato all'ufficio " & opdestinatario.oUfficio.DescrUfficio
    '    'End If

    '    Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
    '    conn.Open()
    '    Dim trans As SqlTransaction = Nothing
    '    trans = conn.BeginTransaction
    '    Try

    '        Dim tipoDocumento As Integer = 0
    '        Dim istanze As Generic.List(Of StatoIstanzaDocumentoInfo) = Get_StatoIstanzaDocumento(opOrigine.Codice, tipoDocumento, trans)

    '        Dim descAtti As String = "INTERIM"
    '        If tipoDelegaInterim = 0 Then
    '            descAtti = "DELEGA"
    '        Else
    '            descAtti = "INTERIM"
    '        End If

    '        descAtti = "FINE" & descAtti



    '        For Each itemistanza As StatoIstanzaDocumentoInfo In istanze
    '            Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
    '            '    If flagAttiva Then
    '            oOperatore = opOrigine
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = descAtti
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id

    '            pDescrizioneAttore = NominativoDelegato
    '            FO_Registra_Attivita_new(vRegAtt, trans)

    '            '   End If


    '            ' oOperatore = opdestinatario
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = "ARRIVOWL"

    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = NominativoDelegato

    '            pDescrizioneAttore = NominativoDelegante
    '            FO_Registra_Attivita_new(vRegAtt, trans)

    '        Next
    '        istanze = Nothing
    '        tipoDocumento = 2
    '        istanze = Get_StatoIstanzaDocumento(opOrigine.Codice, tipoDocumento, trans)


    '        For Each itemistanza As StatoIstanzaDocumentoInfo In istanze
    '            Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
    '            '  If flagAttiva Then
    '            oOperatore = opOrigine
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = descAtti
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = NominativoDelegato
    '            pDescrizioneAttore = NominativoDelegato
    '            FO_Registra_Attivita_new(vRegAtt, trans)

    '            '   End If



    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = "ARRIVOWL"
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = itemistanza.Doc_id
    '            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_nominativo) = NominativoDelegante
    '            oOperatore = opOrigine

    '            pDescrizioneAttore = NominativoDelegante
    '            FO_Registra_Attivita_new(vRegAtt, trans)




    '        Next



    '        Dim sql As String = "update v_Tab_Operatori_Anagrafica set  Id_Anagrafica ='" & a_delegaItem.Del_Id_Anag_Delegante & "' WHERE     Op_Codice_Operatore ='" & a_delegaItem.CodDelegante & "'"
    '        Dim resultUpdate As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, Nothing, -1)


    '        oOperatore = opOperazione

    '        'REgista in tab:deleghe
    '        FO_DisattivaDelega(opOperazione, a_delegaItem, trans)


    '        trans.Commit()
    '        'trans.Commit()
    '        result = ""
    '    Catch ex As Exception
    '        Log.Error(SFunzione & ":" & ex.Message)

    '        If Not trans Is Nothing Then
    '            trans.Rollback()
    '        End If
    '        result = ex.Message
    '    Finally
    '        If Not conn Is Nothing Then
    '            conn.Close()
    '        End If
    '    End Try


    '    Return result

    'End Function

    Sub FO_Insert_Delega(ByVal opOperazione As DllAmbiente.Operatore, ByVal delega As DllDocumentale.ItemDelega, ByRef trans As SqlTransaction)


        Dim insert_Delega As String = "INSERT INTO [Deleghe] ( " & _
        "[Del_Delegante] ,[Del_Delegato] ,[Del_DataAttivazione] , " & _
        "[Del_OperatoreAttivazione],[Del_DataDisattivazione],[Del_OperatoreDisattivazione],[Del_Tipo],[Del_Id_Anag_Delegato],[Del_Id_Anag_Delegante],[Del_ChiusuraAtomatica],[Del_DataChiusuraAutomatica]) " & _
        "  VALUES         (@Delegante,@Delegato,@DataAttivazione," & _
        "@OperatoreAttivazione,@DataDisattivazione,@OperatoreDisattivazione,@TipoDelega,@Anag_Delegato,@Anag_Delegante,@Del_ChiusuraAtomatica,@Del_DataChiusuraAutomatica)"

        Dim param_Delegante As String = "@Delegante"
        Dim param_Delegato As String = "@Delegato"
        Dim param_DataAttivazione As String = "@DataAttivazione"
        Dim param_OperatoreAttivazione As String = "@OperatoreAttivazione"
        Dim param_DataDisattivazione As String = "@DataDisattivazione"
        Dim param_OperatoreDisattivazione As String = "@OperatoreDisattivazione"
        Dim param_TipoDelega As String = "@TipoDelega"
        Dim param_Anag_Delegante As String = "@Anag_Delegante"
        Dim param_Anag_Delegato As String = "@Anag_Delegato"


        Dim param_Del_ChiusuraAtomatica As String = "@Del_ChiusuraAtomatica"
        Dim param_Del_DataChiusuraAutomatica As String = "@Del_DataChiusuraAutomatica"



        Dim parms(10) As SqlParameter
        parms(0) = New SqlParameter(param_Delegante, SqlDbType.VarChar)
        parms(0).Value = delega.CodDelegante
        parms(1) = New SqlParameter(param_Delegato, SqlDbType.VarChar)
        parms(1).Value = IIf(String.IsNullOrEmpty(delega.CodDelegato), DBNull.Value, delega.CodDelegato)
        parms(2) = New SqlParameter(param_OperatoreAttivazione, SqlDbType.VarChar)
        parms(2).Value = opOperazione.Codice
        parms(3) = New SqlParameter(param_DataAttivazione, SqlDbType.DateTime)
        parms(3).Value = Now
        parms(4) = New SqlParameter(param_OperatoreDisattivazione, SqlDbType.VarChar)
        parms(4).Value = DBNull.Value
        parms(5) = New SqlParameter(param_DataDisattivazione, SqlDbType.DateTime)
        parms(5).Value = DBNull.Value
        parms(6) = New SqlParameter(param_TipoDelega, SqlDbType.Int)
        parms(6).Value = delega.TipoDelega
        parms(7) = New SqlParameter(param_Anag_Delegante, SqlDbType.BigInt)
        parms(7).Value = delega.Del_Id_Anag_Delegante

        parms(8) = New SqlParameter(param_Anag_Delegato, SqlDbType.Int)
        parms(8).Value = delega.Del_Id_Anag_Delegato

        parms(9) = New SqlParameter(param_Del_ChiusuraAtomatica, SqlDbType.Int)
        parms(9).Value = delega.Del_ChiusuraAtomatica

        parms(10) = New SqlParameter(param_Del_DataChiusuraAutomatica, SqlDbType.DateTime)
        parms(10).Value = DBNull.Value
        If delega.Del_DataChiusuraAutomatica.HasValue Then
            parms(10).Value = delega.Del_DataChiusuraAutomatica.Value
        End If



        Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, insert_Delega, parms, -1)




    End Sub


    Sub FO_DisattivaDelega(ByVal operatoreOperazione As DllAmbiente.Operatore, ByVal a_delegtaItem As ItemDelega, ByRef trans As SqlTransaction)
        Dim update_Delega As String = "update [Deleghe]  set [Del_DataDisattivazione]=@DataDisattivazione,[Del_OperatoreDisattivazione]=@OperatoreDisattivazione  " & _
        " where Del_idDelega=@Del_idDelega and  [Del_DataDisattivazione] is null"

        Dim param_Del_idDelega As String = "@Del_idDelega"

        Dim param_DataDisattivazione As String = "@DataDisattivazione"
        Dim param_OperatoreDisattivazione As String = "@OperatoreDisattivazione"




        Dim parms(2) As SqlParameter
        parms(0) = New SqlParameter(param_Del_idDelega, SqlDbType.BigInt)
        parms(0).Value = a_delegtaItem.Id
        parms(1) = New SqlParameter(param_OperatoreDisattivazione, SqlDbType.VarChar)
        parms(1).Value = operatoreOperazione.Codice
        parms(2) = New SqlParameter(param_DataDisattivazione, SqlDbType.DateTime)
        parms(2).Value = Now


        Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, update_Delega, parms, -1)






    End Sub
#End Region



    Public Sub Messagio_WebServiceNotifica(ByVal astr_idDocumento As String, ByVal stato As Integer, Optional ByVal cod_messaggio As Integer = -1, Optional ByVal messaggio As String = "")
        Me.idDocumento = astr_idDocumento
        Messagio_WebServiceNotifica(stato, cod_messaggio, messaggio)
    End Sub

    Private Sub Messagio_WebServiceNotifica(Optional ByVal stato As Integer = 0, Optional ByVal cod_messaggio As Integer = -1, Optional ByVal messaggio As String = "")
        Dim codApp As String = ""
        codApp = Me.objDocumento.Doc_codApp
        If Not String.IsNullOrEmpty(codApp) Then
            Dim objstato As StatoIstanzaDocumentoInfo = Get_StatoIstanzaDocumento(Me.objDocumento.Doc_id)

            If "" & ConfigurationManager.AppSettings("servizio_notifica") = "1" Then

                If stato = 0 Then
                    Select Case azione
                        Case "ANNULLO"
                            stato = Stato_Notifica.Annullato
                            messaggio = "" & oOperatore.Cognome & " " & oOperatore.Nome & " ha annullato il provvedimento"
                        Case "ARCHIVIO"
                            stato = Stato_Notifica.Archiviato
                        Case "RIGETTO"
                            If objstato.LivelloUfficio = "UR" Then
                                stato = Stato_Notifica.Rigetto_Ragioneria
                            Else
                                stato = -1
                            End If
                        Case Else
                            stato = -1

                    End Select
                End If

                If stato > 0 Then

                    Dim nf As New NotificaRequest
                    Try
                        Dim notif As New SimpleNotificationBrokerClient

                        nf.CodiceMessaggio = cod_messaggio
                        nf.Messaggio = messaggio
                        nf.DataMessaggio = Now
                        nf.NumeroDefinitivo = Me.objDocumento.Doc_numero
                        nf.NumeroProvvisorio = Me.objDocumento.Doc_numeroProvvisorio
                        nf.Stato = stato
                        nf.Applicazione = codApp
                        Dim res As NotificaResponse = Nothing

                        res = notif.Notifica(nf)
                        Log.Debug("Num Provvisorio " & nf.NumeroProvvisorio & " Num Definitivo  " & nf.NumeroDefinitivo & " Messaggio per " & nf.Applicazione & " " & messaggio & " Stato " & stato & " consegnato con id: " & res.Acknowledge)
                    Catch ex As Exception
                        Log.Error("Num Provvisorio " & nf.NumeroProvvisorio & " Num Definitivo  " & nf.NumeroDefinitivo & " Messaggio per " & nf.Applicazione & " " & messaggio & " Stato " & stato & " non consegnato eccezione : " & ex.Message)
                    End Try


                End If
            End If
        End If
    End Sub

    Function ListaTipoOperazioniRettifiche(ByVal tipoDocumento As Integer) As Generic.IList(Of ItemTipoBase)

        Const SFunzione As String = "ListaTipoOperazioniRettifiche "

        Log.Debug(SFunzione & oOperatore.Codice & " ")
        Dim lista As New Generic.List(Of ItemTipoBase)


        Dim query As String = "Select [Ttr_idRettifica] ,[Ttr_Descrizione] FROM  [Tab_Tipo_Rettifica] where Ttr_cancellato=0 "
        If tipoDocumento >= 0 Then
            query = query & " AND Trt_TipoDocumento = " & tipoDocumento
        End If
        Dim item As ItemTipoBase


        Try
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            Using rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, query, Nothing)
                While rdr.Read()
                    item = New ItemTipoBase
                    item.Id = rdr.GetInt32(0)
                    item.Descrizione = rdr.GetString(1)
                    lista.Add(item)
                End While
                rdr.Close()
            End Using
        Catch ex As SqlClient.SqlException
        Catch ex As Exception

            lista.Clear()
            Log.Error(SFunzione & oOperatore.Codice & " " & ex.Message)
        End Try



        Return lista
    End Function
    Function DettaglioOperazioneRettifica(ByVal idOperazione As Integer, ByVal tipoDocumento As Integer) As ItemTipoBase

        Const SFunzione As String = "DettaglioOperazioneRettifica"

        Log.Debug(SFunzione & oOperatore.Codice & " ")



        Dim query As String = "Select [Ttr_idRettifica] ,[Ttr_Descrizione] FROM  [Tab_Tipo_Rettifica] where Ttr_cancellato=0  and Trt_TipoDocumento = " & param_TipoDocumento & " and  Ttr_idRettifica = " & param_IdRettifica
        Dim item As ItemTipoBase = Nothing

        Dim parms(1) As SqlParameter
        parms(0) = New SqlParameter(param_IdRettifica, SqlDbType.Int)
        parms(0).Value = idOperazione
        parms(1) = New SqlParameter(param_TipoDocumento, SqlDbType.VarChar)
        parms(1).Value = tipoDocumento

        Try
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            Using rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, query, parms)
                While rdr.Read()
                    item = New ItemTipoBase
                    item.Id = rdr.GetInt32(0)
                    item.Descrizione = rdr.GetString(1)

                End While
                rdr.Close()
            End Using
        Catch ex As SqlClient.SqlException
        Catch ex As Exception
            Log.Error(SFunzione & oOperatore.Codice & " " & ex.Message)
        End Try

        Return item
    End Function
    Function FO_Delete_Liquidazione_var(ByVal item As ItemRiduzioneLiqInfo) As Integer

        Dim delete_LiqRid As String = " delete from  [Documento_Liquidazione_var] " & _
  " WHERE [Div_prog]= " & param_Prog_Contabilita

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(0) As SqlParameter

        parms(0) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(0).Value = item.Dli_prog

        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & oOperatore.Codice)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction
        Dim returnValue As Integer = 0
        Try

            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, delete_LiqRid, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "DELLIQVAR", oOperatore, trans)
            trans.Commit()

        Catch ex As Exception
            Log.Error(oOperatore.Codice & " :" & ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try
        Return returnValue
    End Function
    Function FO_Insert_Liquidazione_Var(ByVal item As ItemRiduzioneLiqInfo) As ItemRiduzioneLiqInfo
        Dim Insert_Liquidazione_Var As String = "INSERT INTO  [Documento_Liquidazione_var] " & _
"       ([Div_Documento] " & _
"          ,[Div_DataRegistrazione] " & _
"          ,[Div_Operatore] " & _
"          ,[Div_Bilancio] " & _
"          ,[Div_UPB] " & _
"          ,[Div_Cap] " & _
"          ,[Div_Costo] " & _
"          ,[Div_NLiquidazione] " & _
"          ,[Div_NumeroReg] " & _
"          ,[Div_Stato] " & _
"          ,[Div_MissioneProgramma] " & _
"          ,[HashTokenCallSic] " & _
"          ,[IdDocContabileSic]) " & _
"    VALUES " & _
"           (" & param_id_Documento & _
"           ," & param_DataRegistrazione & _
"           ," & param_Operatore & _
"           ," & param_Esercizio & _
"           , " & param_UPB & _
"           ," & param_Cap & _
"           ," & param_Costo & _
"           ," & param_NContabile & _
"           ," & param_NumRegistr & _
"           ," & param_Stato & _
"           ," & param_MissioneProgramma & _
"           ," & param_HashTokenCallSic & _
"           ," & param_IdDocContabileSic & _
" )Select @@identity"



        '  Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(12) As SqlParameter
        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(0).Value = Now 'item.Dli_DataRegistrazione
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = item.Dli_Operatore
        parms(2) = New SqlParameter(param_NContabile, SqlDbType.VarChar)
        parms(2).Value = "" & item.Div_NLiquidazione
        parms(3) = New SqlParameter(param_UPB, SqlDbType.VarChar)
        parms(3).Value = IIf(item.Dli_UPB Is Nothing, "", item.Dli_UPB)
        parms(4) = New SqlParameter(param_Cap, SqlDbType.VarChar)
        parms(4).Value = IIf(item.Dli_Cap Is Nothing, "", item.Dli_Cap)
        parms(5) = New SqlParameter(param_Esercizio, SqlDbType.VarChar)
        parms(5).Value = IIf(item.Dli_Esercizio Is Nothing, "", item.Dli_Esercizio)
        parms(6) = New SqlParameter(param_Costo, SqlDbType.Decimal)
        parms(6).Value = item.Dli_Costo
        parms(7) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(7).Value = item.Dli_Documento

        parms(8) = New SqlParameter(param_Stato, SqlDbType.Int)
        parms(8).Value = item.Di_Stato

        parms(9) = New SqlParameter(param_NumRegistr, SqlDbType.VarChar)
        parms(9).Value = "" & item.Div_NumeroReg

        parms(10) = New SqlParameter(param_MissioneProgramma, SqlDbType.VarChar)
        parms(10).Value = IIf(item.Dli_MissioneProgramma Is Nothing, "", item.Dli_MissioneProgramma)
        
        parms(11) = New SqlParameter(param_HashTokenCallSic, SqlDbType.VarChar)
        parms(11).Value = IIf(item.HashTokenCallSic Is Nothing, DBNull.Value, item.HashTokenCallSic)
        parms(12) = New SqlParameter(param_IdDocContabileSIC, SqlDbType.VarChar)
        parms(12).Value = IIf(item.IdDocContabileSic Is Nothing, DBNull.Value, item.IdDocContabileSic)

        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & item.Dli_Operatore & " costo:" & item.Dli_Costo)


        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction

        Try
            Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, Insert_Liquidazione_Var, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "LIQVAR", oOperatore, trans)
            trans.Commit()
            item.Dli_prog = returnValue


            ' 

        Catch ex As Exception
            Log.Error(oOperatore.Codice & " :" & ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try

        Return item

    End Function
    Function FO_Update_Liquidazione_Var(ByVal item As ItemRiduzioneLiqInfo) As ItemRiduzioneLiqInfo


        Dim Update_Liquidazione_Var As String = " UPDATE  [Documento_Liquidazione_var] " & _
     " SET [Div_DataRegistrazione] = " & param_DataRegistrazione & _
     "     ,[Div_Operatore] =  " & param_Operatore & _
     "     ,[Div_Bilancio] = " & param_Esercizio & _
     "     ,[Div_UPB] =" & param_UPB & _
     "     ,[Div_Cap] =  " & param_Cap & _
     "     ,[Div_Costo] = " & param_Costo & _
     "     ,[Div_NLiquidazione] = " & param_NContabile & _
     "     ,[Div_NumeroReg]  = " & param_NumRegistr & _
     "     ,[Div_Stato] = " & param_Stato & _
     "     ,[Div_MissioneProgramma] = " & param_MissioneProgramma & _
     "     ,[HashTokenCallSic] = " & param_HashTokenCallSic & _
     "     ,[IdDocContabileSic] = " & param_IdDocContabileSic & _
     " WHERE [Div_Documento] = " & param_id_Documento & " AND [Div_prog]= " & param_Prog_Contabilita

        ' Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Dim parms(13) As SqlParameter
        parms(0) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(0).Value = Now 'item.Dli_DataRegistrazione
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = item.Dli_Operatore
        parms(2) = New SqlParameter(param_NContabile, SqlDbType.VarChar)
        parms(2).Value = "" & item.Div_NLiquidazione
        parms(3) = New SqlParameter(param_UPB, SqlDbType.VarChar)
        parms(3).Value = IIf(item.Dli_UPB Is Nothing, "", item.Dli_UPB)
        parms(4) = New SqlParameter(param_Cap, SqlDbType.VarChar)
        parms(4).Value = IIf(item.Dli_Cap Is Nothing, "", item.Dli_Cap)
        parms(5) = New SqlParameter(param_Esercizio, SqlDbType.VarChar)
        parms(5).Value = IIf(item.Dli_Esercizio Is Nothing, "", item.Dli_Esercizio)
        parms(6) = New SqlParameter(param_Costo, SqlDbType.Decimal)
        parms(6).Value = item.Dli_Costo
        parms(7) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(7).Value = item.Dli_Documento
        parms(8) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(8).Value = item.Dli_prog
        parms(9) = New SqlParameter(param_NumRegistr, SqlDbType.VarChar)
        parms(9).Value = "" & item.Div_NumeroReg
        parms(10) = New SqlParameter(param_Stato, SqlDbType.Int)
        parms(10).Value = item.Di_Stato
        parms(11) = New SqlParameter(param_MissioneProgramma, SqlDbType.VarChar)
        parms(11).Value = IIf(item.Dli_MissioneProgramma Is Nothing, "", item.Dli_MissioneProgramma)
        
        parms(12) = New SqlParameter(param_HashTokenCallSic, SqlDbType.VarChar)
        parms(12).Value = IIf(item.HashTokenCallSic Is Nothing, DBNull.Value, item.HashTokenCallSic)
        parms(13) = New SqlParameter(param_IdDocContabileSIC, SqlDbType.VarChar)
        parms(13).Value = IIf(item.IdDocContabileSic Is Nothing, DBNull.Value, item.IdDocContabileSic)

        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & item.Dli_Operatore & " costo:" & item.Dli_Costo)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction

        Try

            Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, Update_Liquidazione_Var, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "UPLIQVAR", oOperatore, trans)
            trans.Commit()

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try
        Return item
    End Function

    Function FO_Get_DatiLiquidazioniVariazioni(Optional ByVal idDocumento As String = "", Optional ByVal prog As Long = 0) As Collections.Generic.List(Of ItemRiduzioneLiqInfo)
        Dim lista As New Generic.List(Of ItemRiduzioneLiqInfo)
        Dim con As New ItemRiduzioneLiqInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT [Div_Documento],[Div_prog],[Div_DataRegistrazione], " & _
                " [Div_Operatore],[Div_Bilancio] ,[Div_UPB] ,[Div_Cap],[Div_Costo],[Div_NLiquidazione], " & _
                " CASE WHEN [Div_Stato]=0 THEN '' ELSE  [Div_NumeroReg] END as [Div_NumeroReg], " & _
                " [Div_Stato], [Div_MissioneProgramma], [HashTokenCallSic], [IdDocContabileSic] " & _
                " FROM [Documento_Liquidazione_var] "

        Dim param() As SqlClient.SqlParameter

        If idDocumento <> "" Then
            ReDim Preserve param(0)
            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
            par.Value = idDocumento
            param(0) = par
            If Sqlq.Contains("where ") Then
                Sqlq = Sqlq & " and Div_Documento = " & Dic_FODocumentale.param_id_Documento
            Else
                Sqlq = Sqlq & " where Div_Documento = " & Dic_FODocumentale.param_id_Documento
            End If

        End If

        If prog > 0 Then

            Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_Prog_Contabilita, SqlDbType.BigInt)
            par.Value = prog

            If idDocumento <> "" Then
                ReDim Preserve param(1)
                param(1) = par
            Else
                ReDim Preserve param(0)
                param(0) = par
            End If

            If Sqlq.Contains("where ") Then
                Sqlq = Sqlq & " and Div_prog = " & Dic_FODocumentale.param_Prog_Contabilita
            Else
                Sqlq = Sqlq & " where Div_prog = " & Dic_FODocumentale.param_Prog_Contabilita
            End If

        End If


        Sqlq = Sqlq & " Order By Div_Documento,Div_prog"



        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemRiduzioneLiqInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Div_NLiquidazione = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.Div_NumeroReg = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then con.Di_Stato = rdr.GetInt32(10)
                If Not rdr.IsDBNull(11) Then con.Dli_MissioneProgramma = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then con.HashTokenCallSic = rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then con.IdDocContabileSic = rdr.GetString(13)
                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try

        Return lista
    End Function
    Function FO_Get_ListaRiduzioniLiquidazioniByNLiquidazione(ByVal Numero As String) As Collections.Generic.List(Of ItemRiduzioneLiqInfo)
        Dim con As New ItemRiduzioneLiqInfo()
        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "  SELECT [Div_Documento] " & _
                " ,[Div_prog]" & _
                " ,[Div_DataRegistrazione]" & _
                " ,[Div_Operatore]" & _
                " ,[Div_Bilancio]" & _
                " ,[Div_UPB]" & _
                " ,[Div_Cap]" & _
                " ,[Div_Costo]" & _
                " ,[Div_NLiquidazione]" & _
                " ,[Div_NumeroReg]" & _
                " ,[Div_Stato]" & _
                " ,[Div_MissioneProgramma]" & _
                " FROM [Documento_Liquidazione_var]"
        Sqlq = Sqlq & " where [Div_Stato] = 1 "
        Dim param(0) As SqlClient.SqlParameter
        Dim par As SqlClient.SqlParameter

        Sqlq = Sqlq & " and [Div_NLiquidazione]=" & Dic_FODocumentale.param_NContabile
        par = New SqlClient.SqlParameter(Dic_FODocumentale.param_NContabile, SqlDbType.VarChar)
        par.Value = Numero
        param(0) = par



        Dim rdr As SqlClient.SqlDataReader
        Dim listaRid As New Collections.Generic.List(Of ItemRiduzioneLiqInfo)
        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)

            While rdr.Read()
                con = New ItemRiduzioneLiqInfo
                con.Dli_Documento = rdr.GetString(0)
                con.Dli_prog = rdr.GetInt64(1)

                If Not rdr.IsDBNull(2) Then con.Dli_DataRegistrazione = rdr.GetDateTime(2)
                If Not rdr.IsDBNull(3) Then con.Dli_Operatore = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then con.Dli_Esercizio = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then con.Dli_UPB = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then con.Dli_Cap = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then con.Dli_Costo = rdr.GetDecimal(7)
                If Not rdr.IsDBNull(8) Then con.Div_NLiquidazione = "" & rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then con.Div_NumeroReg = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then con.Di_Stato = rdr.GetInt32(10)
                If Not rdr.IsDBNull(11) Then con.Dli_MissioneProgramma = rdr.GetString(11)

                listaRid.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try
        Return listaRid
    End Function

    Function FO_Delete_Logica_Liquidazione_Var(ByVal item As ItemRiduzioneLiqInfo) As Integer

        Dim delete_liq As String = " update [Documento_Liquidazione_var] set [Div_Stato]=0 " & _
  " WHERE [Div_Documento] = " & param_id_Documento & " AND [Div_prog]= " & param_Prog_Contabilita


        Log.Debug(" op:" & oOperatore.Codice)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(1) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = item.Dli_Documento
        parms(1) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(1).Value = item.Dli_prog




        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, delete_liq, parms, -1)

        Return returnValue
    End Function
    Function FO_Delete_Logica_PreImpegno_Var(ByVal item As ItemRiduzioneInfo) As Integer

        Dim delete_pre As String = " update [Documento_Preimpegno_var] set [Div_Stato]=0 " & _
  " WHERE [Div_Documento] = " & param_id_Documento & " AND [Div_prog]= " & param_Prog_Contabilita

        Log.Debug(" op:" & oOperatore.Codice)


        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim parms(1) As SqlParameter

        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = item.Dli_Documento
        parms(1) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(1).Value = item.Dli_prog

        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, delete_pre, parms, -1)

        Return returnValue
    End Function

    Public Function FO_GetEstensioniValide() As Collections.Generic.List(Of ItemEstensione)

        Dim estensioniValide As New Generic.List(Of ItemEstensione)
        Dim Sqlq As String = " SELECT Tea_codEstensione, Tea_nomeEstensione, Tea_descrizione, Tes_contentType, Tes_scarica" & _
        " FROM Tab_Estensione_Allegati " & _
        " WHERE     (Tea_descrizione <> 'Sconosciuta') and Tes_contentType is not null "

        Try
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
            Dim estensione As ItemEstensione

            Using rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)
                While rdr.Read()
                    estensione = New ItemEstensione
                    If Not rdr.IsDBNull(0) Then estensione.Id = rdr.GetInt32(0)
                    If Not rdr.IsDBNull(1) Then estensione.Nome = rdr.GetString(1)
                    If Not rdr.IsDBNull(2) Then estensione.Descrizione = rdr.GetString(2)
                    If Not rdr.IsDBNull(3) Then estensione.ContentType = rdr.GetString(3)
                    If Not rdr.IsDBNull(4) Then estensione.Scarica = rdr.GetByte(4)

                    estensioniValide.Add(estensione)
                End While
                rdr.Close()
            End Using
        Catch ex As SqlClient.SqlException
        Catch ex As Exception
            estensioniValide = Nothing
            Log.Error(ex.Message)
        End Try

        Return estensioniValide

    End Function

    Sub FO_Update_StatoStampaDocumento(ByVal operatore As String, ByVal idDocumentoLocale As String, ByVal FlagStampato As Int16)
        Dim sFunzione As String = "FO_Update_StatoStampataDocumento"
        Log.Debug(operatore & ":Inizio " & sFunzione)
        Dim Update_StatoStampaDocumento As String = ""

        Update_StatoStampaDocumento = " UPDATE  [Documento] " & _
            " SET [Doc_FlagStampato] = " & param_Doc_FlagStampato & _
             " WHERE [Doc_Id] = " & param_id_Documento & " "

        '"     ,[Dno_Oparatore] =  " & param_Operatore & _
        '"     , [Dno_testo] = " & param_Oggetto & _
        '" WHERE [Dno_id_documento] = " & param_id_Documento & " AND [Dno_tipo]= " & param_TipoAttivita

        Dim parms(1) As SqlParameter



        parms(0) = New SqlParameter(param_Doc_FlagStampato, SqlDbType.SmallInt)
        parms(0).Value = FlagStampato
        parms(1) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(1).Value = idDocumentoLocale


        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, Update_StatoStampaDocumento, parms, -1)
        Log.Debug(operatore & ":Fine " & sFunzione)

    End Sub

    Protected Overrides Sub Finalize()
        oOperatore = Nothing
        MyBase.Finalize()
    End Sub
    Private Function verificaAzioneInoltroMessaggio(ByVal azioneDaVerificare As String) As Boolean
        Dim sFunzione As String = "verificaAzioneInoltroMessaggio"
        Log.Debug("***INIZIO verificaAzioneInoltroMessaggio - Operatore: " & oOperatore.Codice & " " & Now)

        Dim sqlq As String = ""

        If Not String.IsNullOrEmpty(azioneDaVerificare) Then
            sqlq = " SELECT     * " & _
             " FROM Tab_Messaggi  " & _
            " WHERE Tms_usoMessaggi = '" & azioneDaVerificare & "'"

            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
            Dim rdr As SqlClient.SqlDataReader
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, sqlq, Nothing)
            If rdr.HasRows Then
                rdr.Close()
                Return True
            Else
                rdr.Close()
                Return False
            End If
            rdr.Close()
            Log.Debug(oOperatore.Codice & ":Fine " & sFunzione)

        Else
            Return False
        End If

    End Function
    Friend Overridable Function FO_Elenco_Documenti_Da_Stampare(ByVal vParm As Object) As Object
        FO_Elenco_Documenti_Da_Stampare = FO_Elenco_Documenti(vParm)
    End Function
    Public Overridable Function AbilitaInoltroRigetto(ByVal statoIstanzaDocumento As DllDocumentale.StatoIstanzaDocumentoInfo) As Boolean
        Return Me.AbilitaInoltroRigetto(statoIstanzaDocumento)
    End Function

    ''' <summary>
    ''' Verifica che la somma degli importi spettanti ai singoli beneficiari
    ''' coincida con il totale della liquidazione
    ''' </summary>
    ''' <returns>true o false</returns>
    ''' <remarks></remarks>
    Public Overridable Function VerificaImportoLiquidazione(ByVal idDocumento As String) As Boolean
        Return Me.VerificaImportoLiquidazione(idDocumento)
    End Function

    Public Function getUtenteArchivio() As String
        Dim ente As New DllAmbiente.Ufficio
        ente.CodUfficio = ente.CodEnte
        Dim utentearchivio As String = ente.Attributo("da_archiviare")
        If String.IsNullOrEmpty(utentearchivio) Then
            utentearchivio = ConfigurationManager.AppSettings("da_archiviare")
        End If
        Log.Info("***FINE getUtenteArchivio " & " Ufficio: " & utentearchivio & " " & Now)

        Return utentearchivio
    End Function

    Sub FO_Insert_Suggerimento(ByVal opOperazione As DllAmbiente.Operatore, ByVal suggerimento As DllDocumentale.ItemSuggerimento, ByRef trans As SqlTransaction)
        Try
            Dim insert_Suggerimento As String = "INSERT INTO [Documento_Suggerimento] ( " & _
            "[Doc_Id],[Operatore]  ,[Livello_Ufficio] ,[Ruolo] " & _
            " ,[DataRegistrazione],[IdSuggerimento],[Pubblico],[Note])" & _
            "  VALUES (@IdDocumento,@Operatore,@LivelloUfficio," & _
            "@Ruolo,@DataRegistrazione,@IdSuggerimento,@Pubblico,@Note)"

            Dim statoIstanza As StatoIstanzaDocumentoInfo = Get_StatoIstanzaDocumento(suggerimento.Doc_Id)

            Dim parms(7) As SqlParameter
            parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
            parms(0).Value = suggerimento.Doc_Id
            parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
            parms(1).Value = opOperazione.Codice
            parms(2) = New SqlParameter(param_LivelloUfficio, SqlDbType.VarChar)
            parms(2).Value = statoIstanza.LivelloUfficio
            parms(3) = New SqlParameter(param_Ruolo, SqlDbType.VarChar)
            parms(3).Value = statoIstanza.Ruolo
            parms(4) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
            parms(4).Value = Now
            parms(5) = New SqlParameter(param_Pubblico, SqlDbType.Bit)
            parms(5).Value = suggerimento.isPubblico
            parms(6) = New SqlParameter(param_IdSuggerimento, SqlDbType.BigInt)
            parms(6).Value = suggerimento.Id_Suggerimento
            parms(7) = New SqlParameter(param_Note, SqlDbType.VarChar)
            parms(7).Value = suggerimento.Note


            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, insert_Suggerimento, parms, -1)
        Catch ex As Exception
            Log.Error(Now & " - " & opOperazione.Codice & " - " & ex.Message)
            Throw ex
        End Try
    End Sub
    Function FO_Insert_Beneficiario_Cronologia(ByVal beneficiario_cronologia As DllDocumentale.BeneficiarioCronologia) As Integer
        Dim esito As Integer = 0
        Try
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
            Dim sqlInsertBeneficiarioCronologia As String = "INSERT INTO [Beneficiari_Cronologia] ( " & _
            "[codice_operatore],[id_beneficiario]  ,[id_sede] ,[id_tipo_pagamento], [id_contocorrente] " & _
            " ,[flagPersonaFisica],[nominativo],[cf_piva]" & _
            " ,[data_nasc],[luogo_nasc],[legale_rappresentante]" & _
            " ,[descr_sede],[descr_mod_pagamento],[descr_dati_bancari]" & _
            ",[data_ultimo_utilizzo],[contatore_frequenza])" & _
 _
            "  VALUES (@CodOperatore, @IdBeneficiario, @IdSede, @IdTipoPagamento, @IdContoCorrente," & _
            " @FlagPersonaFisica,@Nominativo,@CfPIva," & _
            " @DataNasc,@LuogoNasc,@LegaleRappresentante," & _
            " @DescrSede,@DescrModPagamento,@DescrDatiBancari," & _
            " @DataUltimoUtilizzo,@ContatoreFrequenza)"



            Dim parms(15) As SqlParameter
            parms(0) = New SqlParameter("@CodOperatore", SqlDbType.VarChar)
            parms(0).Value = beneficiario_cronologia.CodOperatore
            parms(1) = New SqlParameter("@IdBeneficiario", SqlDbType.VarChar)
            parms(1).Value = beneficiario_cronologia.IdBeneficiario
            parms(2) = New SqlParameter("@IdSede", SqlDbType.VarChar)
            parms(2).Value = beneficiario_cronologia.IdSede
            parms(3) = New SqlParameter("@IdTipoPagamento", SqlDbType.VarChar)
            parms(3).Value = beneficiario_cronologia.IdTipoPagamento
            parms(4) = New SqlParameter("@IdContoCorrente", SqlDbType.VarChar)
            parms(4).Value = beneficiario_cronologia.IdContoCorrente

            parms(5) = New SqlParameter("@FlagPersonaFisica", SqlDbType.Bit)
            parms(5).Value = beneficiario_cronologia.FlagPersonaFisica
            parms(6) = New SqlParameter("@Nominativo", SqlDbType.VarChar)
            parms(6).Value = beneficiario_cronologia.Nominativo
            parms(7) = New SqlParameter("@CfPIva", SqlDbType.VarChar)
            parms(7).Value = beneficiario_cronologia.CodFiscPIva


            parms(8) = New SqlParameter("@DataNasc", SqlDbType.DateTime)
            parms(8).Value = IIf(beneficiario_cronologia.DataNasc = Nothing, DBNull.Value, beneficiario_cronologia.DataNasc)
            parms(9) = New SqlParameter("@LuogoNasc", SqlDbType.VarChar)
            parms(9).Value = beneficiario_cronologia.LuogoNasc
            parms(10) = New SqlParameter("@LegaleRappresentante", SqlDbType.VarChar)
            parms(10).Value = beneficiario_cronologia.LegaleRappresentante


            parms(11) = New SqlParameter("@DescrSede", SqlDbType.VarChar)
            parms(11).Value = beneficiario_cronologia.DescrSede
            parms(12) = New SqlParameter("@DescrModPagamento", SqlDbType.VarChar)
            parms(12).Value = beneficiario_cronologia.DescrModPagamento
            parms(13) = New SqlParameter("@DescrDatiBancari", SqlDbType.VarChar)
            parms(13).Value = beneficiario_cronologia.DescrDatiBancari



            parms(14) = New SqlParameter("@DataUltimoUtilizzo", SqlDbType.DateTime)
            parms(14).Value = beneficiario_cronologia.DataUltimoUtilizzo
            parms(15) = New SqlParameter("@ContatoreFrequenza", SqlDbType.Int)
            parms(15).Value = beneficiario_cronologia.ContatoreFrequenza


            Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, sqlInsertBeneficiarioCronologia, parms, -1)
        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'inserimento del beneficiario nella cronologia - " & ex.Message)
            esito = 1
            Throw ex
        End Try
        Return esito
    End Function
    Function FO_Update_BeneficiarioCronologia(ByVal beneficiarioCronologia As BeneficiarioCronologia) As Integer

        Dim esito As Integer = 0
        Dim sql_Update_Beneficiario As String = " UPDATE [Beneficiari_Cronologia] " & _
        " SET   [flagPersonaFisica]= @FlagPersonaFisica" & _
"      ,[nominativo] = @Nominativo" & _
"      ,[cf_piva] = @CfPIva" & _
"      ,[data_nasc] =  @DataNasc" & _
"      ,[luogo_nasc] = @LuogoNasc" & _
"      ,[legale_rappresentante] = @LegaleRappresentante" & _
"      ,[descr_sede] = @DescrSede" & _
"      ,[descr_mod_pagamento] = @DescrModPagamento" & _
"      ,[descr_dati_bancari] = @DescrDatiBancari" & _
"      ,[data_ultimo_utilizzo] = @DataUltimoUtilizzo " & _
"      ,[contatore_frequenza] = ((SELECT [contatore_frequenza] " & _
                                    " FROM [Beneficiari_Cronologia] " & _
                                    " WHERE [codice_operatore] = @CodOperatore AND [id_beneficiario]= @IdBeneficiario " & _
                                    " AND [id_sede] = @IdSede AND [id_tipo_pagamento] =  @IdTipoPagamento AND [id_contocorrente]= @IdContoCorrente) " & _
                                " + 1)" & _
       " WHERE [codice_operatore] = @CodOperatore AND [id_beneficiario]= @IdBeneficiario " & _
             " AND [id_sede] = @IdSede AND [id_tipo_pagamento] =  @IdTipoPagamento AND [id_contocorrente]= @IdContoCorrente"

        Try

            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
            Dim parms(14) As SqlParameter

            parms(0) = New SqlParameter("@FlagPersonaFisica", SqlDbType.Bit)
            parms(0).Value = beneficiarioCronologia.FlagPersonaFisica
            parms(1) = New SqlParameter("@Nominativo", SqlDbType.VarChar)
            parms(1).Value = beneficiarioCronologia.Nominativo
            parms(2) = New SqlParameter("@CfPIva", SqlDbType.VarChar)
            parms(2).Value = beneficiarioCronologia.CodFiscPIva


            parms(3) = New SqlParameter("@DataNasc", SqlDbType.DateTime)
            parms(3).Value = IIf(beneficiarioCronologia.DataNasc = Nothing, DBNull.Value, beneficiarioCronologia.DataNasc)
            parms(4) = New SqlParameter("@LuogoNasc", SqlDbType.VarChar)
            parms(4).Value = beneficiarioCronologia.LuogoNasc
            parms(5) = New SqlParameter("@LegaleRappresentante", SqlDbType.VarChar)
            parms(5).Value = beneficiarioCronologia.LegaleRappresentante

            parms(6) = New SqlParameter("@DescrSede", SqlDbType.VarChar)
            parms(6).Value = beneficiarioCronologia.DescrSede
            parms(7) = New SqlParameter("@DescrModPagamento", SqlDbType.VarChar)
            parms(7).Value = beneficiarioCronologia.DescrModPagamento
            parms(8) = New SqlParameter("@DescrDatiBancari", SqlDbType.VarChar)
            parms(8).Value = beneficiarioCronologia.DescrDatiBancari
            parms(9) = New SqlParameter("@DataUltimoUtilizzo", SqlDbType.DateTime)
            parms(9).Value = beneficiarioCronologia.DataUltimoUtilizzo

            parms(10) = New SqlParameter("@CodOperatore", SqlDbType.VarChar)
            parms(10).Value = beneficiarioCronologia.CodOperatore
            parms(11) = New SqlParameter("@IdBeneficiario", SqlDbType.VarChar)
            parms(11).Value = beneficiarioCronologia.IdBeneficiario
            parms(12) = New SqlParameter("@IdSede", SqlDbType.VarChar)
            parms(12).Value = beneficiarioCronologia.IdSede
            parms(13) = New SqlParameter("@IdTipoPagamento", SqlDbType.VarChar)
            parms(13).Value = beneficiarioCronologia.IdTipoPagamento
            parms(14) = New SqlParameter("@IdContoCorrente", SqlDbType.VarChar)
            parms(14).Value = beneficiarioCronologia.IdContoCorrente


            Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, sql_Update_Beneficiario, parms, -1)
        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'update del beneficiario nella cronologia - " & ex.Message)
            esito = 1
            Throw ex
        End Try
        Return esito
    End Function

    Sub FO_Insert_Contratto(ByVal item As ItemContrattoInfoHeader, Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim insert_contratto As String = "INSERT INTO [Contratti] " & _
            "([id_documento] ,[id_contratto], [codiceCIG], [codiceCUP]) " & _
            "VALUES (@id_documento,@id_contratto,@codiceCIG,@codiceCUP)"

        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If
            Dim parms(3) As SqlParameter

            parms(0) = New SqlParameter("@id_documento", SqlDbType.VarChar)
            parms(0).Value = item.IdDocumento & ""
            parms(1) = New SqlParameter("@id_contratto", SqlDbType.VarChar)
            parms(1).Value = item.IdContratto & ""
            parms(2) = New SqlParameter("@codiceCIG", SqlDbType.VarChar)
            parms(2).Value = item.CodieCIG & ""
            parms(3) = New SqlParameter("@codiceCUP", SqlDbType.VarChar)
            parms(3).Value = item.CodieCUP & ""

            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, insert_contratto, parms, -1)
            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'inserimento delle informazione sul contratto con id '" + item.IdContratto + "' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub

    Sub FO_Delete_Relatori_Documento(ByVal codDocumento As String, Optional ByVal trans As SqlTransaction = Nothing)
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim sql_Delete_RelatoriDocumento As String = "DELETE FROM [Documento_Relatori] " & _
        "WHERE [Dr_doc_id] = @id_documento "
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            Dim parms(0) As SqlParameter
            parms(0) = New SqlParameter("@id_documento", SqlDbType.VarChar)
            parms(0).Value = codDocumento
            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Delete_RelatoriDocumento, parms, -1)
            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante la cancellazione delle informazione sui relatori del documento con id '" + codDocumento + "' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub


    Function FO_Insert_Fattura(ByVal item As ItemFatturaInfoHeader, Optional ByVal trans As SqlTransaction = Nothing) As Integer

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim insert_fattura As String = "INSERT INTO [Fatture] " & _
            "([id_fattura_SIC]" & _
            ",[id_documento] " & _
            ",[id_contratto]" & _
            ",[numeroRepertorio]" & _
            ",[numeroFatturaBeneficiario]" & _
            ",[dataFatturaBeneficiario]" & _
            ",[id_anagrafica]" & _
            ",[denominazioneBeneficiario]" & _
            ",[codiceFiscaleBeneficiario]" & _
            ",[partitaIvaBeneficiario]" & _
            ",[flagPersonaFisicaBeneficiario]" & _
            ",[id_sede]" & _
            ",[sede]" & _
            ",[id_metodo_pagamento]" & _
            ",[metodoPagamento]" & _
            ",[iban]" & _
            ",[descrizioneFattura]" & _
            ",[importo_totale_fattura] " & _
            ",[id_conto]) " & _
            " OUTPUT Inserted.Prog " & _
            "VALUES (@id_fattura,@id_documento,@id_contratto,@numeroRepertorio,@numeroFatturaBeneficiario,@dataFatturaBeneficiario,@id_anagrafica,@denominazioneBeneficiario,@codiceFiscaleBeneficiario,@partitaIvaBeneficiario,@flagPersonaFisicaBeneficiario,@id_sede,@sede,@id_metodo_pagamento,@metodo_pagamento,@iban,@descrizioneFattura,@importo_totale_fattura, @id_conto)"

        Dim returnedProgFattura As Integer
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If
            Dim parms(18) As SqlParameter

            parms(0) = New SqlParameter("@id_documento", SqlDbType.VarChar)
            parms(0).Value = item.IdDocumento & ""
            parms(1) = New SqlParameter("@id_fattura", SqlDbType.VarChar)
            parms(1).Value = item.IdUnivoco & ""
            parms(2) = New SqlParameter("@id_contratto", SqlDbType.VarChar)
            parms(2).Value = item.Contratto.IdContratto & ""
            parms(3) = New SqlParameter("@numeroRepertorio", SqlDbType.VarChar)
            parms(3).Value = item.Contratto.NumeroRepertorioContratto & ""
            parms(4) = New SqlParameter("@numeroFatturaBeneficiario", SqlDbType.VarChar)
            parms(4).Value = item.NumeroFatturaBeneficiario & ""
            parms(5) = New SqlParameter("@dataFatturaBeneficiario", SqlDbType.DateTime)
            parms(5).Value = item.DataFatturaBeneficiario & ""
            parms(6) = New SqlParameter("@id_anagrafica", SqlDbType.VarChar)
            parms(6).Value = item.AnagraficaInfo.IdAnagrafica & ""
            parms(7) = New SqlParameter("@denominazioneBeneficiario", SqlDbType.VarChar)
            parms(7).Value = item.AnagraficaInfo.Denominazione & ""
            parms(8) = New SqlParameter("@codiceFiscaleBeneficiario", SqlDbType.VarChar)
            parms(8).Value = IIf(String.IsNullOrEmpty(item.AnagraficaInfo.CodiceFiscale), "", item.AnagraficaInfo.CodiceFiscale)
            parms(9) = New SqlParameter("@partitaIvaBeneficiario", SqlDbType.VarChar)
            parms(9).Value = IIf(String.IsNullOrEmpty(item.AnagraficaInfo.PartitaIva), "", item.AnagraficaInfo.PartitaIva)
            parms(10) = New SqlParameter("@flagPersonaFisicaBeneficiario", SqlDbType.Bit)
            parms(10).Value = item.AnagraficaInfo.FlagPersonaFisica & ""
            parms(11) = New SqlParameter("@id_sede", SqlDbType.VarChar)
            parms(11).Value = IIf(String.IsNullOrEmpty(item.AnagraficaInfo.IdSede), "", item.AnagraficaInfo.IdSede)
            parms(12) = New SqlParameter("@sede", SqlDbType.Text)
            parms(12).Value = IIf(String.IsNullOrEmpty(item.AnagraficaInfo.SedeVia), "", item.AnagraficaInfo.SedeVia)
            parms(13) = New SqlParameter("@id_metodo_pagamento", SqlDbType.Int)
            parms(13).Value = IIf(String.IsNullOrEmpty(item.AnagraficaInfo.IdModalitaPag), "", item.AnagraficaInfo.IdModalitaPag)
            parms(14) = New SqlParameter("@metodo_pagamento", SqlDbType.VarChar)
            parms(14).Value = IIf(String.IsNullOrEmpty(item.AnagraficaInfo.DescrizioneModalitaPag), "", item.AnagraficaInfo.DescrizioneModalitaPag)
            parms(15) = New SqlParameter("@iban", SqlDbType.VarChar)
            parms(15).Value = item.AnagraficaInfo.Iban & ""
            parms(16) = New SqlParameter("@descrizioneFattura", SqlDbType.VarChar)
            parms(16).Value = IIf(String.IsNullOrEmpty(item.DescrizioneFattura), "", item.DescrizioneFattura)
            parms(17) = New SqlParameter("@importo_totale_fattura", SqlDbType.Decimal)
            parms(17).Value = item.ImportoTotaleFattura & ""
            parms(18) = New SqlParameter("@id_conto", SqlDbType.Int)
            parms(18).Value = IIf(String.IsNullOrEmpty(item.AnagraficaInfo.IdConto), DBNull.Value, item.AnagraficaInfo.IdConto)
           


            returnedProgFattura = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, insert_fattura, parms, -1)

            If Not item.ListaAllegati Is Nothing Then

                Dim insert_allegato_fattura As String = "INSERT INTO [Fatture_Allegato] " & _
               "([prog_fattura]" & _
               ",[nome] " & _
               ",[formato]" & _
               ",[url]" & _
               ",[id_documento])" & _
               " VALUES (@prog_fattura,@nome,@formato,@url, @id_documento)"

                Dim returnValueAllegato As Integer
                Try
                    For Each allegatoFattura As ItemFatturaAllegato In item.ListaAllegati

                        Dim paramsAllegati(4) As SqlParameter

                        paramsAllegati(0) = New SqlParameter("@prog_fattura", SqlDbType.Int)
                        paramsAllegati(0).Value = returnedProgFattura
                        paramsAllegati(1) = New SqlParameter("@nome", SqlDbType.VarChar)
                        paramsAllegati(1).Value = allegatoFattura.Nome
                        paramsAllegati(2) = New SqlParameter("@formato", SqlDbType.VarChar)
                        paramsAllegati(2).Value = allegatoFattura.Formato
                        paramsAllegati(3) = New SqlParameter("@url", SqlDbType.VarChar)
                        paramsAllegati(3).Value = allegatoFattura.Url
                        paramsAllegati(4) = New SqlParameter("@id_documento", SqlDbType.VarChar)
                        paramsAllegati(4).Value = item.IdDocumento

                        returnValueAllegato = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, insert_allegato_fattura, paramsAllegati, -1)
                    Next
                Catch ex As Exception
                    Log.Error(Now & " - Errore durante inserimento dell allegato della fattura con id '" + item.IdUnivoco + "' - " & ex.Message)
                    Throw ex
                End Try

            End If

            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'inserimento della fattura con id '" + item.IdUnivoco + "' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
        Return returnedProgFattura
    End Function

    Sub FO_Insert_Fattura_Storico(ByVal operatore As DllAmbiente.Operatore, ByVal itemSchedaContrattiFattureInfo As DllDocumentale.ItemSchedaContrattiFattureInfo, Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim insert_fattura As String = "INSERT INTO [Fatture_Storico] " & _
            "([id_fattura]" & _
            ",[id_documento] " & _
            ",[id_contratto]" & _
            ",[numeroRepertorio]" & _
            ",[numeroFatturaBeneficiario]" & _
            ",[dataFatturaBeneficiario]" & _
            ",[id_anagrafica]" & _
            ",[denominazioneBeneficiario]" & _
            ",[codiceFiscaleBeneficiario]" & _
            ",[partitaIvaBeneficiario]" & _
            ",[flagPersonaFisicaBeneficiario]" & _
            ",[id_sede]" & _
            ",[sede]" & _
            ",[id_metodo_pagamento]" & _
            ",[metodoPagamento]" & _
            ",[iban]" & _
            ",[descrizioneFattura]" & _
            ",[importo_totale_fattura] " & _
            ",[data_operazione] " & _
            ",[operatore] " & _
            ",[id_conto]) " & _
            "VALUES (@id_fattura,@id_documento,@id_contratto,@numeroRepertorio,@numeroFatturaBeneficiario,@dataFatturaBeneficiario,@id_anagrafica,@denominazioneBeneficiario,@codiceFiscaleBeneficiario,@partitaIvaBeneficiario,@flagPersonaFisicaBeneficiario,@id_sede,@sede,@id_metodo_pagamento,@metodo_pagamento,@iban,@descrizioneFattura,@importo_totale_fattura,@data_operazione,@operatore,@id_conto)"

        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            For Each Item As ItemFatturaInfoHeader In itemSchedaContrattiFattureInfo.Fatture

                Dim parms(20) As SqlParameter

                parms(0) = New SqlParameter("@id_documento", SqlDbType.VarChar)
                parms(0).Value = Item.IdDocumento & ""
                parms(1) = New SqlParameter("@id_fattura", SqlDbType.VarChar)
                parms(1).Value = Item.IdUnivoco & ""
                parms(2) = New SqlParameter("@id_contratto", SqlDbType.VarChar)
                parms(2).Value = Item.Contratto.IdContratto & ""
                parms(3) = New SqlParameter("@numeroRepertorio", SqlDbType.VarChar)
                parms(3).Value = Item.Contratto.NumeroRepertorioContratto & ""
                parms(4) = New SqlParameter("@numeroFatturaBeneficiario", SqlDbType.VarChar)
                parms(4).Value = Item.NumeroFatturaBeneficiario & ""
                parms(5) = New SqlParameter("@dataFatturaBeneficiario", SqlDbType.DateTime)
                parms(5).Value = Item.DataFatturaBeneficiario & ""
                parms(6) = New SqlParameter("@id_anagrafica", SqlDbType.VarChar)
                parms(6).Value = Item.AnagraficaInfo.IdAnagrafica & ""
                parms(7) = New SqlParameter("@denominazioneBeneficiario", SqlDbType.VarChar)
                parms(7).Value = Item.AnagraficaInfo.Denominazione & ""
                parms(8) = New SqlParameter("@codiceFiscaleBeneficiario", SqlDbType.VarChar)
                parms(8).Value = IIf(String.IsNullOrEmpty(Item.AnagraficaInfo.CodiceFiscale), "", Item.AnagraficaInfo.CodiceFiscale)
                parms(9) = New SqlParameter("@partitaIvaBeneficiario", SqlDbType.VarChar)
                parms(9).Value = IIf(String.IsNullOrEmpty(Item.AnagraficaInfo.PartitaIva), "", Item.AnagraficaInfo.PartitaIva)
                parms(10) = New SqlParameter("@flagPersonaFisicaBeneficiario", SqlDbType.Bit)
                parms(10).Value = Item.AnagraficaInfo.FlagPersonaFisica & ""
                parms(11) = New SqlParameter("@id_sede", SqlDbType.VarChar)
                parms(11).Value = IIf(String.IsNullOrEmpty(Item.AnagraficaInfo.IdSede), "", Item.AnagraficaInfo.IdSede)
                parms(12) = New SqlParameter("@sede", SqlDbType.Text)
                parms(12).Value = IIf(String.IsNullOrEmpty(Item.AnagraficaInfo.SedeVia), "", Item.AnagraficaInfo.SedeVia)
                parms(13) = New SqlParameter("@id_metodo_pagamento", SqlDbType.Int)
                parms(13).Value = IIf(String.IsNullOrEmpty(Item.AnagraficaInfo.IdModalitaPag), "", Item.AnagraficaInfo.IdModalitaPag)
                parms(14) = New SqlParameter("@metodo_pagamento", SqlDbType.VarChar)
                parms(14).Value = IIf(String.IsNullOrEmpty(Item.AnagraficaInfo.DescrizioneModalitaPag), "", Item.AnagraficaInfo.DescrizioneModalitaPag)
                parms(15) = New SqlParameter("@iban", SqlDbType.VarChar)
                parms(15).Value = Item.AnagraficaInfo.Iban & ""
                parms(16) = New SqlParameter("@descrizioneFattura", SqlDbType.VarChar)
                parms(16).Value = IIf(String.IsNullOrEmpty(Item.DescrizioneFattura), "", Item.DescrizioneFattura)
                parms(17) = New SqlParameter("@importo_totale_fattura", SqlDbType.Decimal)
                parms(17).Value = Item.ImportoTotaleFattura & ""

                parms(18) = New SqlParameter("@data_operazione", SqlDbType.Date)
                parms(18).Value = Now & ""
                parms(19) = New SqlParameter("@operatore", SqlDbType.VarChar)
                parms(19).Value = operatore.Codice & ""

                parms(20) = New SqlParameter("@id_conto", SqlDbType.Int)
                parms(20).Value = IIf(String.IsNullOrEmpty(Item.AnagraficaInfo.IdConto), DBNull.Value, Item.AnagraficaInfo.IdConto)

                returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, insert_fattura, parms, -1)
            Next

            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'inserimento della storico della  fattura " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub


    Sub FO_Delete_Contratto(ByVal codDocumento As String, Optional ByVal codContratto As String = Nothing, Optional ByVal trans As SqlTransaction = Nothing)
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim sql_Insert_InfoLeggeTrasparenza As String = "DELETE FROM [Contratti] " & _
        "WHERE [id_documento] = @id_documento " & IIf(Not codContratto Is Nothing AndAlso codContratto.Trim() <> String.Empty, "and [id_contratto]=@id_contratto", "")

        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            Dim parms(1) As SqlParameter
            parms(0) = New SqlParameter("@id_documento", SqlDbType.VarChar)
            parms(0).Value = codDocumento

            If Not codContratto Is Nothing AndAlso codContratto.Trim() <> String.Empty Then
                parms(1) = New SqlParameter("@id_contratto", SqlDbType.VarChar)
                parms(1).Value = codContratto
            Else
                ReDim Preserve parms(0)
            End If

            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Insert_InfoLeggeTrasparenza, parms, -1)
            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante la cancellazione delle informazione sui contratti del documento con id '" + codDocumento + "' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub

    Sub FO_Delete_Fattura(ByVal codDocumento As String, Optional ByVal codContratto As String = Nothing, Optional ByVal trans As SqlTransaction = Nothing)
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim sql_Insert_Fattura As String = "DELETE FROM [Fatture] " & _
        "WHERE [id_documento] = @id_documento " & IIf(Not codContratto Is Nothing AndAlso codContratto.Trim() <> String.Empty, "and [id_contratto]=@id_contratto", "")

        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            Dim parms(1) As SqlParameter
            parms(0) = New SqlParameter("@id_documento", SqlDbType.VarChar)
            parms(0).Value = codDocumento

            If Not codContratto Is Nothing AndAlso codContratto.Trim() <> String.Empty Then
                parms(1) = New SqlParameter("@id_contratto", SqlDbType.VarChar)
                parms(1).Value = codContratto
            Else
                ReDim Preserve parms(0)
            End If

            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Insert_Fattura, parms, -1)
            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante la cancellazione delle informazione sulle fatture del documento con id '" + codDocumento + "' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub
    Sub FO_Delete_FatturaByIdFatturaSIC(ByVal idFatturaSIC As String, ByVal idDoc As String, Optional ByVal trans As SqlTransaction = Nothing)
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim sql_Delete_Fattura As String = "DELETE FROM [Fatture] " & _
        "WHERE [id_fattura_SIC] = @id_fattura_SIC " & IIf(Not idDoc Is Nothing AndAlso idDoc.Trim() <> String.Empty, "and [id_documento]=@id_documento", "")

        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            Dim parms(1) As SqlParameter
            parms(0) = New SqlParameter("@id_fattura_SIC", SqlDbType.VarChar)
            parms(0).Value = idFatturaSIC

            If Not idDoc Is Nothing AndAlso idDoc.Trim() <> String.Empty Then
                parms(1) = New SqlParameter("@id_documento", SqlDbType.VarChar)
                parms(1).Value = idDoc
            Else
                ReDim Preserve parms(0)
            End If

            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Delete_Fattura, parms, -1)
            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante la cancellazione della fattura con id '" + idFatturaSIC + "' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub
    Sub FO_Update_Contratto(ByVal item As ItemContrattoInfoHeader, Optional ByVal trans As SqlTransaction = Nothing)
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            FO_Delete_Contratto(item.IdDocumento, item.IdContratto, trans)
            FO_Insert_Contratto(item, trans)

            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'aggiornamento delle informazione sul contratto '" + item.IdContratto + "' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub

    Sub FO_Insert_Delibera_Seduta(ByVal codOperatore As String, ByVal idSeduta As Integer, ByVal delibera As ItemDocumentoInfo, Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim insert_contratto As String = "INSERT INTO [Documento_Seduta] " & _
                    "[Dos_DocId]" & _
                  ",[Dos_SedId]" & _
                  ",[Dos_OrdineDiscussione]" & _
                  ",[Dos_DataRegistrazione]" & _
                  ",[Dos_Operatore]" & _
            "VALUES (@IdDocumento " & _
                    " ,@IdSeduta " & _
                    " ,@OrdineDiscussione " & _
                    " ,@DataRegistrazione " & _
                    " ,@Operatore)"

        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If
            Dim parms(4) As SqlParameter

            parms(0) = New SqlParameter("@IdDocumento", SqlDbType.VarChar)
            parms(0).Value = delibera.IdDocumento & ""
            parms(1) = New SqlParameter("@IdSeduta", SqlDbType.Int)
            parms(1).Value = idSeduta
            parms(2) = New SqlParameter("@OrdineDiscussione", SqlDbType.Int)
            parms(2).Value = 1
            parms(3) = New SqlParameter("@DataRegistrazione", SqlDbType.DateTime)
            parms(3).Value = Now
            parms(4) = New SqlParameter("@Operatore", SqlDbType.VarChar)
            parms(4).Value = codOperatore

            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, insert_contratto, parms, -1)
            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'inserimento della delibera '" + delibera.IdDocumento + "' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub

    Sub FO_Insert_ODG(ByVal operatore As DllAmbiente.Operatore, ByVal itemODGInfo As DllDocumentale.ItemODGInfo, Optional ByVal trans As SqlTransaction = Nothing)
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim sql_Insert_InfoODG As String = "INSERT INTO [Seduta] ( " & _
             " [Sed_IdStato] " & _
             " ,[Sed_DataSeduta] " & _
             " ,[Sed_DataRegistrazione] " & _
             " ,[Sed_Operatore]) " & _
            "  VALUES (@IdStato, " & _
            " @DataSeduta," & _
            " @DataRegistrazione," & _
            " @Operatore)"

        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            Dim parms(3) As SqlParameter
            parms(0) = New SqlParameter("@IdStato", SqlDbType.Int)
            parms(0).Value = itemODGInfo.IdStatoSeduta
            parms(1) = New SqlParameter("@DataSeduta", SqlDbType.DateTime)
            'Dim dataOraSeduta As Date = DateTime.ParseExact(itemODGInfo.DataSeduta, "yyyy-MM-dd",System.Globalization.CultureInfo.InvariantCulture)
            Dim dataOraSeduta2 As Date = Convert.ToDateTime(itemODGInfo.DataSeduta & " " & itemODGInfo.OraSeduta)
            Dim datanew As Date
            Dim datanew2 As Date

            DateTime.TryParse(itemODGInfo.DataSeduta & " " & itemODGInfo.OraSeduta, datanew)
            DateTime.TryParse(itemODGInfo.DataSeduta, datanew2)


            Dim dt As Date = DateTime.ParseExact(itemODGInfo.DataSeduta, "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture)

            Dim newString As String = dt.ToString("yyyy-MM-dd")

            parms(1).Value = newString & " " & itemODGInfo.OraSeduta


            parms(2) = New SqlParameter("@DataRegistrazione", SqlDbType.DateTime)
            parms(2).Value = Now
            parms(3) = New SqlParameter("@Operatore", SqlDbType.VarChar)
            parms(3).Value = operatore.Codice

            Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Insert_InfoODG, parms, -1)



            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'inserimento delle informazioni riguardanti l'Ordine del Giorno - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub

    Sub FO_Insert_DatiSedutaRelatoriDocumento(ByVal operatore As DllAmbiente.Operatore, ByVal itemDatiSedutaInfo As DllDocumentale.ItemDatiSedutaInfo, Optional ByVal trans As SqlTransaction = Nothing)
        Dim conn As SqlClient.SqlConnection = Nothing

        Dim dataRegistrazione As Date = Now
        Dim sql_Insert_InfoODG As String = "INSERT INTO [Documento_Dati_Seduta] ( " & _
                                             "[Dds_doc_id]" & _
                                              ",[Dds_DataSeduta]" & _
                                              ",[Dds_DataRegistrazione]" & _
                                              ",[Dds_Operatore])" & _
                                              "  VALUES (@DocId, " & _
                                                " @DataSeduta," & _
                                                " @DataRegistrazione," & _
                                                " @Operatore)"

        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            Dim parms(3) As SqlParameter
            parms(0) = New SqlParameter("@DocId", SqlDbType.Int)
            parms(0).Value = itemDatiSedutaInfo.DocId
            parms(1) = New SqlParameter("@DataSeduta", SqlDbType.DateTime)
            Dim dataOraSeduta2 As Date = Convert.ToDateTime(itemDatiSedutaInfo.DataSeduta & " " & itemDatiSedutaInfo.OraSeduta)
            Dim datanew As Date
            Dim datanew2 As Date

            DateTime.TryParse(itemDatiSedutaInfo.DataSeduta & " " & itemDatiSedutaInfo.OraSeduta, datanew)
            DateTime.TryParse(itemDatiSedutaInfo.DataSeduta, datanew2)
            Dim dt As Date = DateTime.ParseExact(itemDatiSedutaInfo.DataSeduta, "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture)

            Dim newString As String = dt.ToString("yyyy-MM-dd")

            parms(1).Value = newString & " " & itemDatiSedutaInfo.OraSeduta


            parms(2) = New SqlParameter("@DataRegistrazione", SqlDbType.DateTime)
            parms(2).Value = dataRegistrazione
            parms(3) = New SqlParameter("@Operatore", SqlDbType.VarChar)
            parms(3).Value = operatore.Codice

            Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Insert_InfoODG, parms, -1)


            For Each relatore As ItemRelatore In itemDatiSedutaInfo.Relatori

                Dim sql_Insert_Relatori As String = "INSERT INTO [Documento_Relatori] ( " & _
                                                  "[Dr_doc_id] " & _
                                                  ",[Dr_id_relatore] " & _
                                                  ",[Dr_isPresente] " & _
                                                  ",[Dr_DataRegistrazione]" & _
                                                  ",[Dr_Operatore])" & _
                                                  "  VALUES (@DocId, " & _
                                                    " @IdRelatore," & _
                                                    " @IsPresente," & _
                                                    " @DataRegistrazione," & _
                                                    " @Operatore)"


                Dim parmsRelatori(4) As SqlParameter
                parmsRelatori(0) = New SqlParameter("@DocId", SqlDbType.Int)
                parmsRelatori(0).Value = itemDatiSedutaInfo.DocId
                parmsRelatori(1) = New SqlParameter("@IdRelatore", SqlDbType.Int)
                parmsRelatori(1).Value = relatore.Id
                parmsRelatori(2) = New SqlParameter("@IsPresente", SqlDbType.Bit)
                parmsRelatori(2).Value = relatore.IsPresente
                parmsRelatori(3) = New SqlParameter("@DataRegistrazione", SqlDbType.DateTime)
                parmsRelatori(3).Value = dataRegistrazione
                parmsRelatori(4) = New SqlParameter("@Operatore", SqlDbType.VarChar)
                parmsRelatori(4).Value = operatore.Codice

                Dim returnValueRelatori As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Insert_Relatori, parmsRelatori, -1)

            Next


            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'inserimento delle informazioni riguardanti l'Ordine del Giorno - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub

    Sub FO_Insert_Info_Scheda_Legge_Trasparenza(ByVal opOperazione As DllAmbiente.Operatore, ByVal itemSchedaLeggeTrasparenzaInfo As DllDocumentale.ItemSchedaLeggeTrasparenzaInfo, Optional ByVal trans As SqlTransaction = Nothing)
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim sql_Insert_InfoLeggeTrasparenza As String = "INSERT INTO [Trasparenza] ( " & _
        "[id_documento]" & _
        ", [autorizzazione_pubblicazione]" & _
        ", [note_pubblicazione]" & _
        ", [norma_attribuzione_beneficio]" & _
        ", [ufficio_responsabile_procedimento]" & _
        ", [funzionario_responsabile_procedimento]" & _
        ", [modalita_individuazione_beneficiario]" & _
        ", [contenuto_atto])" & _
        "  VALUES (@IdDocumento, " & _
        " @AutorizzazionePubblicazione, " & _
        " @NotePubblicazione," & _
        " @NormaAttribuzioneBeneficio," & _
        " @UfficioResponsabileProcedimento," & _
        " @FunzionarioResponsabileProcedimento," & _
        " @ModalitaIndividuazioneBeneficiario," & _
        " @ContenutoAtto)"

        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            Dim parms(7) As SqlParameter
            parms(0) = New SqlParameter("@IdDocumento", SqlDbType.VarChar)
            parms(0).Value = itemSchedaLeggeTrasparenzaInfo.IdDocumento
            parms(1) = New SqlParameter("@AutorizzazionePubblicazione", SqlDbType.Bit)
            parms(1).Value = itemSchedaLeggeTrasparenzaInfo.AutorizzazionePubblicazione
            parms(2) = New SqlParameter("@NotePubblicazione", SqlDbType.VarChar)
            parms(2).Value = itemSchedaLeggeTrasparenzaInfo.NotePubblicazione
            parms(3) = New SqlParameter("@NormaAttribuzioneBeneficio", SqlDbType.VarChar)
            parms(3).Value = itemSchedaLeggeTrasparenzaInfo.NormaAttribuzioneBeneficio
            parms(4) = New SqlParameter("@UfficioResponsabileProcedimento", SqlDbType.VarChar)
            parms(4).Value = itemSchedaLeggeTrasparenzaInfo.UfficioResponsabileProcedimento
            parms(5) = New SqlParameter("@FunzionarioResponsabileProcedimento", SqlDbType.VarChar)
            parms(5).Value = itemSchedaLeggeTrasparenzaInfo.FunzionarioResponsabileProcedimento
            parms(6) = New SqlParameter("@ModalitaIndividuazioneBeneficiario", SqlDbType.VarChar)
            parms(6).Value = itemSchedaLeggeTrasparenzaInfo.ModalitaIndividuazioneBeneficiario
            parms(7) = New SqlParameter("@ContenutoAtto", SqlDbType.VarChar)
            parms(7).Value = itemSchedaLeggeTrasparenzaInfo.ContenutoAtto

            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Insert_InfoLeggeTrasparenza, parms, -1)

            'For Each contratto As ItemContrattoInfoHeader In itemSchedaLeggeTrasparenzaInfo.Contratti
            '    FO_Insert_Contratto(contratto, trans)
            'Next

            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'inserimento delle informazione della scheda 'Legge Trasparenza' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub

    Sub FO_Insert_Info_Scheda_Legge_Trasparenza_Storico(ByVal opOperazione As DllAmbiente.Operatore, ByVal itemSchedaLeggeTrasparenzaInfo As DllDocumentale.ItemSchedaLeggeTrasparenzaInfo, Optional ByVal trans As SqlTransaction = Nothing)
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim sql_Insert_InfoLeggeTrasparenza As String = "INSERT INTO [Trasparenza_Storico] ( " & _
        "[id_documento]" & _
        ", [autorizzazione_pubblicazione]" & _
        ", [note_pubblicazione]" & _
        ", [norma_attribuzione_beneficio]" & _
        ", [ufficio_responsabile_procedimento]" & _
        ", [funzionario_responsabile_procedimento]" & _
        ", [modalita_individuazione_beneficiario]" & _
        ", [contenuto_atto]" & _
        ", [data_operazione]" & _
        ", [operatore])" & _
        "  VALUES (@IdDocumento, " & _
        " @AutorizzazionePubblicazione, " & _
        " @NotePubblicazione," & _
        " @NormaAttribuzioneBeneficio," & _
        " @UfficioResponsabileProcedimento," & _
        " @FunzionarioResponsabileProcedimento," & _
        " @ModalitaIndividuazioneBeneficiario," & _
        " @ContentutoAtto," & _
        " @DataOperazione," & _
        " @Operatore" & _
        ")"

        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            Dim parms(9) As SqlParameter
            parms(0) = New SqlParameter("@IdDocumento", SqlDbType.VarChar)
            parms(0).Value = itemSchedaLeggeTrasparenzaInfo.IdDocumento
            parms(1) = New SqlParameter("@AutorizzazionePubblicazione", SqlDbType.Bit)
            parms(1).Value = itemSchedaLeggeTrasparenzaInfo.AutorizzazionePubblicazione
            parms(2) = New SqlParameter("@NotePubblicazione", SqlDbType.VarChar)
            parms(2).Value = itemSchedaLeggeTrasparenzaInfo.NotePubblicazione
            parms(3) = New SqlParameter("@NormaAttribuzioneBeneficio", SqlDbType.VarChar)
            parms(3).Value = itemSchedaLeggeTrasparenzaInfo.NormaAttribuzioneBeneficio
            parms(4) = New SqlParameter("@UfficioResponsabileProcedimento", SqlDbType.VarChar)
            parms(4).Value = itemSchedaLeggeTrasparenzaInfo.UfficioResponsabileProcedimento
            parms(5) = New SqlParameter("@FunzionarioResponsabileProcedimento", SqlDbType.VarChar)
            parms(5).Value = itemSchedaLeggeTrasparenzaInfo.FunzionarioResponsabileProcedimento
            parms(6) = New SqlParameter("@ModalitaIndividuazioneBeneficiario", SqlDbType.VarChar)
            parms(6).Value = itemSchedaLeggeTrasparenzaInfo.ModalitaIndividuazioneBeneficiario
            parms(7) = New SqlParameter("@ContentutoAtto", SqlDbType.VarChar)
            parms(7).Value = itemSchedaLeggeTrasparenzaInfo.ContenutoAtto
            parms(8) = New SqlParameter("@DataOperazione", SqlDbType.DateTime)
            parms(8).Value = Now
            parms(9) = New SqlParameter("@Operatore", SqlDbType.VarChar)
            parms(9).Value = opOperazione.Codice

            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Insert_InfoLeggeTrasparenza, parms, -1)

            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'inserimento delle informazione della scheda 'Legge Trasparenza' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub

    'Modifica 01/04/2014
    Sub FO_Insert_Contratto_Storico(ByVal opOperazione As DllAmbiente.Operatore, ByVal itemSchedaContrattiFattureInfo As DllDocumentale.ItemSchedaContrattiFattureInfo, Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim insert_contratto As String = "INSERT INTO [Contratti_Storico] " & _
            "([id_contratto], " & _
            "[id_documento] ,[data_operazione], " & _
            "[operatore]) " & _
            "VALUES (@id_contratto,@id_documento,@data_operazione,@operatore)"

        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            For Each contratto As ItemContrattoInfoHeader In itemSchedaContrattiFattureInfo.Contratti
                Dim parms(3) As SqlParameter

                parms(0) = New SqlParameter("@id_contratto", SqlDbType.VarChar)
                parms(0).Value = contratto.IdContratto & ""
                parms(1) = New SqlParameter("@id_documento", SqlDbType.VarChar)
                parms(1).Value = contratto.IdDocumento & ""
                parms(2) = New SqlParameter("@data_operazione", SqlDbType.DateTime)
                parms(2).Value = Now
                parms(3) = New SqlParameter("@operatore", SqlDbType.VarChar)
                parms(3).Value = opOperazione.Codice

                returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, insert_contratto, parms, -1)

            Next

            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'inserimento delle informazione  ' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try

    End Sub

    Sub FO_Delete_Info_DatiSedutaRelatoriDocumento(ByVal opOperazione As DllAmbiente.Operatore, ByVal codDocumento As String, Optional ByVal trans As SqlTransaction = Nothing)
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim sql_Delete_DatiSedutaRelatoriDocumento As String = "DELETE FROM [Documento_Dati_Seduta] " & _
        "WHERE [Dds_doc_id] = @IdDocumento"

        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            Dim parms(0) As SqlParameter
            parms(0) = New SqlParameter("@IdDocumento", SqlDbType.VarChar)
            parms(0).Value = codDocumento

            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Delete_DatiSedutaRelatoriDocumento, parms, -1)

            FO_Delete_Relatori_Documento(codDocumento, trans)

            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante la cancellazione delle informazione sulla seduta e sui relatori - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub


    Sub FO_Delete_Info_Scheda_Legge_Trasparenza(ByVal opOperazione As DllAmbiente.Operatore, ByVal codDocumento As String, Optional ByVal trans As SqlTransaction = Nothing)
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim sql_Insert_InfoLeggeTrasparenza As String = "DELETE FROM [Trasparenza] " & _
        "WHERE [id_documento] = @IdDocumento"

        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            Dim parms(0) As SqlParameter
            parms(0) = New SqlParameter("@IdDocumento", SqlDbType.VarChar)
            parms(0).Value = codDocumento

            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Insert_InfoLeggeTrasparenza, parms, -1)

            'FO_Delete_Contratto(codDocumento, , trans)

            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante la cancellazione delle informazione della scheda 'Legge Trasparenza' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub

    Sub FO_Update_Info_Scheda_Legge_Trasparenza(ByVal opOperazione As DllAmbiente.Operatore, ByVal itemSchedaLeggeTrasparenzaInfo As DllDocumentale.ItemSchedaLeggeTrasparenzaInfo, Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim sql_Update_InfoLeggeTrasparenza As String = " UPDATE [Trasparenza] " & _
        " SET   [autorizzazione_pubblicazione]= @AutorizzazionePubblicazione" & _
        "      ,[note_pubblicazione] = @NotePubblicazione" & _
        "      ,[norma_attribuzione_beneficio] = @NormaAttribuzioneBeneficio" & _
        "      ,[ufficio_responsabile_procedimento] =  @UfficioResponsabileProcedimento" & _
        "      ,[funzionario_responsabile_procedimento] = @FunzionarioResponsabileProcedimento" & _
        "      ,[modalita_individuazione_beneficiario] = @ModalitaIndividuazioneBeneficiario" & _
        "      ,[contenuto_atto] = @ContenutoAtto" & _
        " WHERE [id_documento] = @IdDocumento "

        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            Dim parms(7) As SqlParameter
            parms(0) = New SqlParameter("@IdDocumento", SqlDbType.VarChar)
            parms(0).Value = itemSchedaLeggeTrasparenzaInfo.IdDocumento
            parms(1) = New SqlParameter("@AutorizzazionePubblicazione", SqlDbType.Bit)
            parms(1).Value = itemSchedaLeggeTrasparenzaInfo.AutorizzazionePubblicazione
            parms(2) = New SqlParameter("@NotePubblicazione", SqlDbType.VarChar)
            parms(2).Value = itemSchedaLeggeTrasparenzaInfo.NotePubblicazione
            parms(3) = New SqlParameter("@NormaAttribuzioneBeneficio", SqlDbType.VarChar)
            parms(3).Value = itemSchedaLeggeTrasparenzaInfo.NormaAttribuzioneBeneficio
            parms(4) = New SqlParameter("@UfficioResponsabileProcedimento", SqlDbType.VarChar)
            parms(4).Value = itemSchedaLeggeTrasparenzaInfo.UfficioResponsabileProcedimento
            parms(5) = New SqlParameter("@FunzionarioResponsabileProcedimento", SqlDbType.VarChar)
            parms(5).Value = itemSchedaLeggeTrasparenzaInfo.FunzionarioResponsabileProcedimento
            parms(6) = New SqlParameter("@ModalitaIndividuazioneBeneficiario", SqlDbType.VarChar)
            parms(6).Value = itemSchedaLeggeTrasparenzaInfo.ModalitaIndividuazioneBeneficiario
            parms(7) = New SqlParameter("@ContenutoAtto", SqlDbType.VarChar)
            parms(7).Value = itemSchedaLeggeTrasparenzaInfo.ContenutoAtto

            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Update_InfoLeggeTrasparenza, parms, -1)

            'FO_Delete_Contratto(itemSchedaLeggeTrasparenzaInfo.IdDocumento, , trans)

            'For Each contratto As ItemContrattoInfoHeader In itemSchedaLeggeTrasparenzaInfo.Contratti
            '    FO_Insert_Contratto(contratto, trans)
            'Next

            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'aggiornamento delle informazione della scheda 'Legge Trasparenza' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub


    Sub FO_Update_Info_Scheda_Contratti_Fatture(ByVal opOperazione As DllAmbiente.Operatore, ByVal itemSchedaContrattiFattureInfo As DllDocumentale.ItemSchedaContrattiFattureInfo, Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            FO_Delete_Contratto(itemSchedaContrattiFattureInfo.IdDocumento, , trans)

            For Each contratto As ItemContrattoInfoHeader In itemSchedaContrattiFattureInfo.Contratti
                FO_Insert_Contratto(contratto, trans)
            Next

            'FO_Delete_Fattura(itemSchedaContrattiFattureInfo.IdDocumento, , trans)
            'non deve cancellare tutte le fatture e reinserirle!!!
            ' deve inserire solo le nuove che non sono presenti già sul documento
            ' legge quelle già sul doc, se non è presente la inserisce.

            Dim listaFattureGiaPresenti As Generic.List(Of ItemFatturaInfoHeader) = FO_Get_ListaFatture(itemSchedaContrattiFattureInfo.IdDocumento)

            For Each fattura As ItemFatturaInfoHeader In itemSchedaContrattiFattureInfo.Fatture
                Dim fatturaDaInserireIsPresente As Boolean = False

                For Each fatturaEsistente As ItemFatturaInfoHeader In listaFattureGiaPresenti
                    If fattura.IdUnivoco = fatturaEsistente.IdUnivoco Then
                        fatturaDaInserireIsPresente = fatturaDaInserireIsPresente + True
                        Exit For
                    Else
                        fatturaDaInserireIsPresente = fatturaDaInserireIsPresente + False
                    End If

                Next
                If fatturaDaInserireIsPresente = False Then
                    FO_Insert_Fattura(fattura, trans)
                End If

            Next


            For Each fatturaEsistente As ItemFatturaInfoHeader In listaFattureGiaPresenti
                Dim fatturaEsistenteIsDaLasciare As Boolean = False
                For Each fattura As ItemFatturaInfoHeader In itemSchedaContrattiFattureInfo.Fatture
                    If fattura.IdUnivoco = fatturaEsistente.IdUnivoco Then
                        fatturaEsistenteIsDaLasciare = fatturaEsistenteIsDaLasciare + True
                        Exit For
                    Else
                        fatturaEsistenteIsDaLasciare = fatturaEsistenteIsDaLasciare + False
                    End If

                Next
                If fatturaEsistenteIsDaLasciare = False Then
                    Dim listaLiqFatture As Generic.List(Of ItemFatturaInfoHeader) = FO_Get_ListaFattureLiquidazione(, fatturaEsistente.IdDocumento, fatturaEsistente.IdUnivoco)

                    Dim dimvc_Funzione As Integer = DllDocumentale.Dic_FODocumentale.dimvc_Leggi_Documento
                    Dim vc_Funzione As DllDocumentale.Dic_FODocumentale.vc_Leggi_Documento
                    Dim vFunzione(dimvc_Funzione) As Object
                    vFunzione(vc_Leggi_Documento.c_idDocumento) = idDocumento
                    vFunzione(vc_Leggi_Documento.c_xmlDatiDocumento) = ""

                    Dim objDocumento As DllDocumentale.Model.DocumentoInfo = FO_Leggi_Documento_Object(vFunzione)

                    FO_Delete_FatturaByIdFatturaSIC(fatturaEsistente.IdUnivoco, fatturaEsistente.IdDocumento, trans)

                    Dim P_ESITO As Double = 0
                    For Each liqFattura As ItemFatturaInfoHeader In listaLiqFatture
                        Dim messaggioSic As String = ClientIntegrazioneSic.MessageMaker.notificaAttoFatturaSIC(opOperazione, objDocumento.Doc_numero, _
                                                                                            objDocumento.Doc_numeroProvvisorio, "LIQ", _
                                                                                            0, 0, 0, fatturaEsistente.IdUnivoco, _
                                                                                            "C", Now, liqFattura.ImportoLiquidato, P_ESITO)
                    Next
                End If
            Next

            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception

            Log.Error(Now & " - Errore durante l'aggiornamento delle informazione della scheda 'Contratti Fatture' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Dim msgEx As String = ""
            If ex.ToString.ToUpper.Contains("DELETE") AndAlso ex.ToString.ToUpper.Contains("REFERENCE") Then
                msgEx = "Impossibile eliminare la fattura, probabilmente è associata alla liquidazione. Rimuoverla prima da Dettaglio Contabile"
            Else
                msgEx = "Errore durante l'aggiornamento delle informazione della scheda 'Contratti Fatture' - " & ex.Message

            End If
            Throw New Exception(msgEx)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub

    Sub FO_Insert_Info_Scheda_Tipologia_Provvedimento(ByVal opOperazione As DllAmbiente.Operatore, ByVal itemSchedaTipologiaProvvedimentoInfo As DllDocumentale.ItemSchedaTipologiaProvvedimentoInfo, Optional ByVal trans As SqlTransaction = Nothing)
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim sql_Insert_InfoTipologiaDocumento As String = "INSERT INTO [Documento_Tipologia] ( " & _
        "[id_documento]" & _
        ", [id_tipologia_provvedimento], [importo_spesa_prevista], [is_somma_automatica])" & _
        "  VALUES (@IdDocumento, " & _
        " @IdTipologiaProvvedimento, @ImportoSpesaPrevista, @isSommaAutomatica)"

        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            Dim parms(3) As SqlParameter
            parms(0) = New SqlParameter("@IdDocumento", SqlDbType.VarChar)
            parms(0).Value = itemSchedaTipologiaProvvedimentoInfo.IdDocumento
            parms(1) = New SqlParameter("@IdTipologiaProvvedimento", SqlDbType.Int)
            parms(1).Value = itemSchedaTipologiaProvvedimentoInfo.IdTipologiaProvvedimento
            parms(2) = New SqlParameter("@ImportoSpesaPrevista", SqlDbType.Float)
            If (Not itemSchedaTipologiaProvvedimentoInfo.ImportoSpesaPrevista Is Nothing) Then
                parms(2).Value = itemSchedaTipologiaProvvedimentoInfo.ImportoSpesaPrevista
            Else
                parms(2).Value = DBNull.Value
            End If

            parms(3) = New SqlParameter("@isSommaAutomatica", SqlDbType.Bit)
            parms(3).Value = itemSchedaTipologiaProvvedimentoInfo.isSommaAutomatica

            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Insert_InfoTipologiaDocumento, parms, -1)

            For Each beneficiario As ItemDestinatarioInfo In itemSchedaTipologiaProvvedimentoInfo.Destinatari
                FO_Insert_DocumentoDestinatari(opOperazione, beneficiario, trans)
            Next

            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'inserimento delle informazione della scheda 'Tipologia Provvedimento' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub

    Sub FO_Delete_Info_Scheda_Tipologia_Provvedimento(ByVal opOperazione As DllAmbiente.Operatore, ByVal codDocumento As String, Optional ByVal trans As SqlTransaction = Nothing)
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim sql_Delete_InfoTipologiaDocumento As String = "DELETE FROM [Documento_Tipologia] " & _
        "WHERE [id_documento] = @IdDocumento"

        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            Dim parms(0) As SqlParameter
            parms(0) = New SqlParameter("@IdDocumento", SqlDbType.VarChar)
            parms(0).Value = codDocumento

            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Delete_InfoTipologiaDocumento, parms, -1)
            FO_Delete_DocumentoDestinatari(opOperazione, codDocumento, , , trans)

            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante la cancellazione delle informazione della scheda 'Tipologia Provvedimento' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub

    Sub FO_Update_Info_Scheda_Tipologia_Provvedimento(ByVal opOperazione As DllAmbiente.Operatore, ByVal itemSchedaTipologiaProvvedimentoInfo As DllDocumentale.ItemSchedaTipologiaProvvedimentoInfo, Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim sql_Update_InfoTipologiaDocumento As String = " UPDATE [Documento_Tipologia] " & _
        " SET [id_tipologia_provvedimento] = @IdTipologiaProvvedimento, [importo_spesa_prevista] = @ImportoSpesaPrevista, [is_somma_automatica] = @isSommaAutomatica" & _
        " WHERE [id_documento] = @IdDocumento "

        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            Dim parms(3) As SqlParameter
            parms(0) = New SqlParameter("@IdDocumento", SqlDbType.VarChar)
            parms(0).Value = itemSchedaTipologiaProvvedimentoInfo.IdDocumento
            parms(1) = New SqlParameter("@IdTipologiaProvvedimento", SqlDbType.Int)
            parms(1).Value = itemSchedaTipologiaProvvedimentoInfo.IdTipologiaProvvedimento
            parms(2) = New SqlParameter("@ImportoSpesaPrevista", SqlDbType.Float)
            If (Not itemSchedaTipologiaProvvedimentoInfo.ImportoSpesaPrevista Is Nothing) Then
                parms(2).Value = itemSchedaTipologiaProvvedimentoInfo.ImportoSpesaPrevista
            Else
                parms(2).Value = DBNull.Value
            End If
            parms(3) = New SqlParameter("@isSommaAutomatica", SqlDbType.Bit)
            parms(3).Value = itemSchedaTipologiaProvvedimentoInfo.isSommaAutomatica


            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql_Update_InfoTipologiaDocumento, parms, -1)

            FO_Delete_DocumentoDestinatari(opOperazione, itemSchedaTipologiaProvvedimentoInfo.IdDocumento, , , trans)

            For Each beneficiario As ItemDestinatarioInfo In itemSchedaTipologiaProvvedimentoInfo.Destinatari
                FO_Insert_DocumentoDestinatari(opOperazione, beneficiario, trans)
            Next

            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'aggiornamento delle informazione della scheda 'Tipologia Provvedimento' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub

    Function FO_Update_Suggerimento(ByVal suggerimento As ItemSuggerimento) As ItemSuggerimento
        Dim Update_Suggerimento As String = " UPDATE [Documento_Suggerimento] " & _
        " SET   [Doc_Id] = " & param_id_Documento & _
"      ,[Operatore] = " & param_Operatore & _
"      ,[Livello_Ufficio] = " & param_LivelloUfficio & _
"      ,[Ruolo] = " & param_Ruolo & _
"      ,[IdSuggerimento] = " & param_IdSuggerimento & _
"      ,[Pubblico]= " & param_Pubblico & _
"      ,[Note] = " & param_Note & _
       " WHERE [Doc_Id] = " & param_id_Documento & " AND [IdSuggerimento]= " & param_IdSuggerimento



        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Dim statoIstanza As StatoIstanzaDocumentoInfo = Get_StatoIstanzaDocumento(suggerimento.Doc_Id)
        Dim parms(7) As SqlParameter
        parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(0).Value = suggerimento.Doc_Id
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = oOperatore.Codice
        parms(2) = New SqlParameter(param_LivelloUfficio, SqlDbType.VarChar)
        parms(2).Value = statoIstanza.LivelloUfficio
        parms(3) = New SqlParameter(param_Ruolo, SqlDbType.DateTime)
        parms(3).Value = statoIstanza.Ruolo
        parms(4) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(4).Value = Now
        parms(5) = New SqlParameter(param_Pubblico, SqlDbType.Bit)
        parms(5).Value = suggerimento.isPubblico
        parms(6) = New SqlParameter(param_IdSuggerimento, SqlDbType.BigInt)
        parms(6).Value = suggerimento.Id_Suggerimento
        parms(7) = New SqlParameter(param_Note, SqlDbType.Int)
        parms(7).Value = suggerimento.Note

        Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, Update_Suggerimento, parms, -1)

        Return suggerimento
    End Function
    Function FO_Get_Suggerimenti_Documento(ByVal criteriRicerca As DllDocumentale.ItemSuggerimento) As Collections.Generic.List(Of ItemSuggerimento)
        If Not criteriRicerca Is Nothing Then

            Dim lista As New Generic.List(Of ItemSuggerimento)
            Dim sugg As New ItemSuggerimento

            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
            Dim Sqlq As String = ""
            Dim SqlqWhere As String = ""


            Sqlq = " SELECT [Id],[Doc_Id],[Operatore],[Livello_Ufficio],[Ruolo],[DataRegistrazione],[IdSuggerimento],[Pubblico],[Note] FROM  [Documento_Suggerimento]"



            Dim param(10) As SqlClient.SqlParameter
            Dim indiceParametriEffettivi As Integer = -1
            If criteriRicerca.Id > 0 Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@Id", SqlDbType.BigInt)
                param(indiceParametriEffettivi).Value = criteriRicerca.Id
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND ID=@Id", " WHERE ID=@Id")
            End If

            If Not criteriRicerca.Doc_Id Is Nothing AndAlso Not String.IsNullOrEmpty(criteriRicerca.Doc_Id) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@Doc_Id", SqlDbType.NVarChar)
                param(indiceParametriEffettivi).Value = criteriRicerca.Doc_Id
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND Doc_Id=@Doc_Id", " WHERE Doc_Id=@Doc_Id")
            End If
            If Not criteriRicerca.CodOperatore Is Nothing AndAlso Not String.IsNullOrEmpty(criteriRicerca.CodOperatore) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter(Dic_FODocumentale.param_Operatore, SqlDbType.NVarChar)
                param(indiceParametriEffettivi).Value = criteriRicerca.CodOperatore
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND Operatore=@Operatore ", " WHERE  Operatore=@Operatore ")
            End If

            If criteriRicerca.Id_Suggerimento > 0 Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter(Dic_FODocumentale.param_IdSuggerimento, SqlDbType.BigInt)
                param(indiceParametriEffettivi).Value = criteriRicerca.Id_Suggerimento
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND IdSuggerimento=@IdSuggerimento ", " WHERE  IdSuggerimento=@IdSuggerimento ")
            End If
            If Not criteriRicerca.DataRegistrazione = Nothing Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter(Dic_FODocumentale.param_DataRegistrazione, SqlDbType.DateTime)
                param(indiceParametriEffettivi).Value = criteriRicerca.DataRegistrazione
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND DataRegistrazione=@DataRegistrazione ", " WHERE  DataRegistrazione=@DataRegistrazione ")
            End If
            If Not criteriRicerca.Livello_Ufficio Is Nothing AndAlso Not String.IsNullOrEmpty(criteriRicerca.Livello_Ufficio) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter(Dic_FODocumentale.param_LivelloUfficio, SqlDbType.NVarChar)
                param(indiceParametriEffettivi).Value = criteriRicerca.Livello_Ufficio
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND LivelloUfficio=@LivelloUfficio ", " WHERE  LivelloUfficio=@LivelloUfficio ")
            End If
            If Not criteriRicerca.Ruolo Is Nothing AndAlso Not String.IsNullOrEmpty(criteriRicerca.Ruolo) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter(Dic_FODocumentale.param_Ruolo, SqlDbType.NVarChar)
                param(indiceParametriEffettivi).Value = criteriRicerca.Ruolo
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND Ruolo=@Ruolo ", " WHERE  Ruolo=@Ruolo ")
            End If
            indiceParametriEffettivi = indiceParametriEffettivi + 1
            param(indiceParametriEffettivi) = New SqlClient.SqlParameter(Dic_FODocumentale.param_Pubblico, SqlDbType.Bit)
            param(indiceParametriEffettivi).Value = criteriRicerca.isPubblico
            SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND Pubblico=@Pubblico ", " WHERE  Pubblico=@Pubblico ")

            If Not criteriRicerca.Note Is Nothing AndAlso Not String.IsNullOrEmpty(criteriRicerca.Note) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter(Dic_FODocumentale.param_Note, SqlDbType.Text)
                param(indiceParametriEffettivi).Value = criteriRicerca.Note
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND Note=@Note ", " WHERE  Note=@Note ")
            End If

            Sqlq = Sqlq & SqlqWhere & " Order By Id asc "


            ReDim Preserve param(indiceParametriEffettivi)
            Dim rdr As SqlClient.SqlDataReader

            Try

                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


                While rdr.Read()
                    sugg = New ItemSuggerimento
                    sugg.Id = rdr.GetInt64(0)
                    If Not rdr.IsDBNull(1) Then sugg.Doc_Id = rdr.GetString(1)
                    If Not rdr.IsDBNull(2) Then sugg.CodOperatore = rdr.GetString(2)
                    If Not rdr.IsDBNull(3) Then sugg.Livello_Ufficio = rdr.GetString(3)
                    If Not rdr.IsDBNull(4) Then sugg.Ruolo = rdr.GetString(4)
                    If Not rdr.IsDBNull(5) Then sugg.DataRegistrazione = rdr.GetDateTime(5)
                    If Not rdr.IsDBNull(6) Then sugg.Id_Suggerimento = rdr.GetInt64(6)
                    If Not rdr.IsDBNull(7) Then sugg.isPubblico = rdr.GetBoolean(7)
                    If Not rdr.IsDBNull(8) Then sugg.Note = rdr.GetString(8)
                    lista.Add(sugg)
                End While
                rdr.Close()

            Catch ex As Exception
                Err.Description = ex.Message
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing

            End Try
            Return lista
        Else
            Log.Error(Now & " - " & oOperatore.Codice & "- I criteri non sono stati impostati correttamente, risultano vuoti.")
            Return Nothing
        End If
    End Function
    Function FO_Get_Suggerimenti(ByVal tipoAtto As String) As Collections.Generic.List(Of ItemSuggerimentoInfo)
        If tipoAtto Is Nothing Then
            tipoAtto = "*"
        End If

        Dim lista As New Generic.List(Of ItemSuggerimentoInfo)
        Dim sugg As New ItemSuggerimentoInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = " SELECT [Id] ,[DescrizioneBreve] ,[Descrizione] ,[TipologiaAtto] FROM  [Tab_Suggerimento] "

        Dim param(0) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@tipoAtto", SqlDbType.VarChar)
        param(0).Value = tipoAtto
        Sqlq = Sqlq & " WHERE TipologiaAtto=@tipoAtto"
        Sqlq = Sqlq & " ORDER BY OrdineApparizione "

        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()
                sugg = New ItemSuggerimentoInfo
                sugg.Id = rdr.GetInt64(0)
                If Not rdr.IsDBNull(1) Then sugg.DescrizioneBreve = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then sugg.Descrizione = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then sugg.TipologiaAtto = rdr.GetString(3)
                lista.Add(sugg)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing

        End Try
        Return lista

    End Function

    Function Get_Suggerimento(ByVal idSuggerimento As Integer) As ItemSuggerimentoInfo
        If idSuggerimento < 0 Then
            Log.Debug(Now & "- : Codice Suggerimento non indicato")
            Return Nothing
        End If


        Dim sugg As ItemSuggerimentoInfo = Nothing

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = " SELECT [Id] ,[DescrizioneBreve] ,[Descrizione] ,[TipologiaAtto] FROM  [Tab_Suggerimento] "

        Dim param(0) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@id", SqlDbType.Int)
        param(0).Value = idSuggerimento
        Sqlq = Sqlq & " WHERE id=@id"

        Dim rdr As SqlClient.SqlDataReader = Nothing

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()
                sugg = New ItemSuggerimentoInfo
                sugg.Id = rdr.GetInt64(0)
                If Not rdr.IsDBNull(1) Then sugg.DescrizioneBreve = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then sugg.Descrizione = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then sugg.TipologiaAtto = rdr.GetString(3)

            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not (rdr Is Nothing) Then
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
            End If
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing

        End Try
        Return sugg

    End Function

    Function FO_Get_BeneficiarioCronologiaByPK(ByVal codOperatore As String, ByVal idBeneficiario As String, ByVal idSede As String, ByVal idTipoPagamento As String, ByVal idContoCorrente As String) As BeneficiarioCronologia

        Dim beneficiarioCronologia As BeneficiarioCronologia = Nothing

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = " SELECT [codice_operatore],[id_beneficiario]  ,[id_sede] ,[id_tipo_pagamento], [id_contocorrente] " & _
            " ,[flagPersonaFisica],[nominativo],[cf_piva]" & _
            " ,[data_nasc],[luogo_nasc],[legale_rappresentante]" & _
            " ,[descr_sede],[descr_mod_pagamento],[descr_dati_bancari]" & _
            ",[data_ultimo_utilizzo],[contatore_frequenza] FROM  [Beneficiari_Cronologia] "

        Dim param(4) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@CodOperatore", SqlDbType.VarChar)
        param(0).Value = codOperatore
        param(1) = New SqlClient.SqlParameter("@IdBeneficiario", SqlDbType.VarChar)
        param(1).Value = idBeneficiario
        param(2) = New SqlClient.SqlParameter("@IdSede", SqlDbType.VarChar)
        param(2).Value = idSede
        param(3) = New SqlClient.SqlParameter("@IdTipoPagamento", SqlDbType.VarChar)
        param(3).Value = idTipoPagamento
        param(4) = New SqlClient.SqlParameter("@IdContoCorrente", SqlDbType.VarChar)
        param(4).Value = idContoCorrente
        Sqlq = Sqlq & " WHERE codice_operatore=@CodOperatore and id_beneficiario=@IdBeneficiario  and id_sede=@IdSede and id_tipo_pagamento=@IdTipoPagamento and id_contocorrente=@IdContoCorrente"

        Dim rdr As SqlClient.SqlDataReader = Nothing

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()
                beneficiarioCronologia = New BeneficiarioCronologia
                If Not rdr.IsDBNull(0) Then beneficiarioCronologia.CodOperatore = rdr.GetString(0)
                If Not rdr.IsDBNull(1) Then beneficiarioCronologia.IdBeneficiario = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then beneficiarioCronologia.IdSede = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then beneficiarioCronologia.IdTipoPagamento = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then beneficiarioCronologia.IdContoCorrente = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then beneficiarioCronologia.FlagPersonaFisica = rdr.GetBoolean(5)
                If Not rdr.IsDBNull(6) Then beneficiarioCronologia.Nominativo = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then beneficiarioCronologia.CodFiscPIva = rdr.GetString(7)
                If Not rdr.IsDBNull(8) Then beneficiarioCronologia.DataNasc = rdr.GetDateTime(8)
                If Not rdr.IsDBNull(9) Then beneficiarioCronologia.LuogoNasc = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then beneficiarioCronologia.LegaleRappresentante = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then beneficiarioCronologia.DescrSede = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then beneficiarioCronologia.DescrModPagamento = rdr.GetString(12)
                If Not rdr.IsDBNull(12) Then beneficiarioCronologia.DescrDatiBancari = rdr.GetString(13)
                If Not rdr.IsDBNull(13) Then beneficiarioCronologia.DataUltimoUtilizzo = rdr.GetDateTime(14)
                If Not rdr.IsDBNull(14) Then beneficiarioCronologia.ContatoreFrequenza = rdr.GetInt32(15)

            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not (rdr Is Nothing) Then
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
            End If
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing

        End Try
        Return beneficiarioCronologia

    End Function
    Function FO_Delete_BeneficiarioCronologiaMenoUsato(ByVal codOperatore As String) As Integer
        Dim esito As Integer = 0
        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = "  DELETE FROM Beneficiari_Cronologia WHERE     (ID =  " & _
                                                                    " (SELECT     TOP (1) ID" & _
                                                                    "   FROM  Beneficiari_Cronologia AS Beneficiari_Cronologia_2 " & _
                                                                    "   WHERE      (codice_operatore = @CodOperatore) AND (contatore_frequenza =" & _
                                                                        " (SELECT     MIN(contatore_frequenza) AS Expr1" & _
                                                                        " FROM Beneficiari_Cronologia AS Beneficiari_Cronologia_1))" & _
                                                                    " ORDER BY data_ultimo_utilizzo))"

        Dim param(0) As SqlClient.SqlParameter
        param(0) = New SqlClient.SqlParameter("@CodOperatore", SqlDbType.VarChar)
        param(0).Value = codOperatore
        Dim rdr As SqlClient.SqlDataReader = Nothing

        Try
            Intema.DBUtility.SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, Sqlq, param, -1)
        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'eliminazione del beneficiario meno usato nella cronologia - " & ex.Message)
            esito = 1
            Throw ex
        End Try
        Return esito
    End Function
    Function FO_Get_ListaBeneficiariCronologiaByCodOpe(ByVal codOperatore As String) As Collections.Generic.List(Of BeneficiarioCronologia)

        Dim listaBenCronologia As New Collections.Generic.List(Of BeneficiarioCronologia)
        Dim beneficiarioCronologia As BeneficiarioCronologia = Nothing

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = " SELECT [codice_operatore],[id_beneficiario]  ,[id_sede] ,[id_tipo_pagamento], [id_contocorrente] " & _
            " ,[flagPersonaFisica],[nominativo],[cf_piva]" & _
            " ,[data_nasc],[luogo_nasc],[legale_rappresentante]" & _
            " ,[descr_sede],[descr_mod_pagamento],[descr_dati_bancari]" & _
            ",[data_ultimo_utilizzo],[contatore_frequenza] FROM  [Beneficiari_Cronologia] "

        Dim param(0) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@CodOperatore", SqlDbType.VarChar)
        param(0).Value = codOperatore
        Sqlq = Sqlq & " WHERE codice_operatore=@CodOperatore"
        Sqlq = Sqlq & " ORDER BY [data_ultimo_utilizzo] DESC "
        Dim rdr As SqlClient.SqlDataReader = Nothing

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()
                beneficiarioCronologia = New BeneficiarioCronologia
                If Not rdr.IsDBNull(0) Then beneficiarioCronologia.CodOperatore = rdr.GetString(0)
                If Not rdr.IsDBNull(1) Then beneficiarioCronologia.IdBeneficiario = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then beneficiarioCronologia.IdSede = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then beneficiarioCronologia.IdTipoPagamento = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then beneficiarioCronologia.IdContoCorrente = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then beneficiarioCronologia.FlagPersonaFisica = rdr.GetBoolean(5)
                If Not rdr.IsDBNull(6) Then beneficiarioCronologia.Nominativo = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then beneficiarioCronologia.CodFiscPIva = rdr.GetString(7)
                If Not rdr.IsDBNull(8) Then beneficiarioCronologia.DataNasc = rdr.GetDateTime(8)
                If Not rdr.IsDBNull(9) Then beneficiarioCronologia.LuogoNasc = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then beneficiarioCronologia.LegaleRappresentante = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then beneficiarioCronologia.DescrSede = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then beneficiarioCronologia.DescrModPagamento = rdr.GetString(12)
                If Not rdr.IsDBNull(12) Then beneficiarioCronologia.DescrDatiBancari = rdr.GetString(13)
                If Not rdr.IsDBNull(13) Then beneficiarioCronologia.DataUltimoUtilizzo = rdr.GetDateTime(14)
                If Not rdr.IsDBNull(14) Then beneficiarioCronologia.ContatoreFrequenza = rdr.GetInt32(15)
                listaBenCronologia.Add(beneficiarioCronologia)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not (rdr Is Nothing) Then
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
            End If
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing

        End Try
        Return listaBenCronologia
    End Function

    Function FO_Get_Contratti_Beneficiari(ByVal opOperazione As DllAmbiente.Operatore, ByVal idDocumento As String, Optional ByVal idContratto As String = Nothing, Optional ByVal includiSoloBeneficiariConContratto As Boolean = False) As Generic.List(Of ItemLiquidazioneImpegnoBeneficiarioInfo)
        Return FO_Get_ListaBeneficiariLiquidazione(opOperazione, idDocumento, , , , idContratto, includiSoloBeneficiariConContratto)
    End Function

    Function FO_Get_ListaContratti(ByVal idDocumento As String, Optional ByVal idContratto As String = Nothing) As Generic.List(Of ItemContrattoInfoHeader)
        Dim contratti As Generic.List(Of ItemContrattoInfoHeader) = New Generic.List(Of ItemContrattoInfoHeader)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = " SELECT [id_documento]" & _
            ",[id_contratto]" & _
            ",[codiceCIG]" & _
            ",[codiceCUP]" & _
            " FROM  [Contratti] "

        Dim param(1) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@id_documento", SqlDbType.VarChar)
        param(0).Value = idDocumento

        If Not idContratto Is Nothing AndAlso idContratto.Trim() <> String.Empty Then
            param(1) = New SqlClient.SqlParameter("@id_contratto", SqlDbType.VarChar)
            param(1).Value = idContratto
        Else
            ReDim Preserve param(0)
        End If

        Sqlq = Sqlq & " WHERE id_documento=@id_documento " & IIf(Not idContratto Is Nothing AndAlso idContratto.Trim() <> String.Empty, "and id_contratto=@id_contratto", String.Empty)

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()
                Dim contratto As ItemContrattoInfoHeader = New ItemContrattoInfoHeader()

                If Not rdr.IsDBNull(0) Then contratto.IdDocumento = rdr.GetString(0)
                If Not rdr.IsDBNull(1) Then contratto.IdContratto = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then contratto.CodieCIG = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then contratto.CodieCUP = rdr.GetString(3)

                contratti.Add(contratto)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not (rdr Is Nothing) Then
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
            End If
            contratti = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            contratti = Nothing
        End Try
        Return contratti

    End Function

    Function FO_Get_Lista_Relatori_Documento(ByVal idDocumento As String) As Generic.List(Of ItemRelatore)
        Dim relatori As Generic.List(Of ItemRelatore) = New Generic.List(Of ItemRelatore)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""

        Sqlq = " SELECT  " & _
        " Documento_Relatori.Dr_id_relatore, " & _
        " Documento_Relatori.Dr_isPresente, " & _
        " Tab_Relatori.Tr_Cognome, " & _
        " Tab_Relatori.Tr_Nome, " & _
        " Tab_Relatori.Tr_Ordine_Apparizione, " & _
        " Tab_Relatori.Tr_Carica, " & _
        " Tab_Relatori.Tr_dataattivazione, " & _
        " Tab_Relatori.Tr_datadisattivazione " & _
        " FROM         Documento_Relatori INNER JOIN " & _
        "              Tab_Relatori ON Documento_Relatori.Dr_id_relatore = Tab_Relatori.Tr_id"

        Dim param(0) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@id_documento", SqlDbType.VarChar)
        param(0).Value = idDocumento

        Sqlq = Sqlq & " WHERE Documento_Relatori.Dr_doc_id=@id_documento "

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()
                Dim relatore As ItemRelatore = New ItemRelatore()

                If Not rdr.IsDBNull(0) Then relatore.Id = rdr.GetInt32(0)
                If Not rdr.IsDBNull(1) Then relatore.IsPresente = rdr.GetBoolean(1)
                If Not rdr.IsDBNull(2) Then relatore.Cognome = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then relatore.Nome = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then relatore.OrdineApparizione = rdr.GetInt32(4)
                If Not rdr.IsDBNull(5) Then relatore.Carica = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then relatore.DataAttivazione = rdr.GetDateTime(6)
                If Not rdr.IsDBNull(7) Then relatore.DataDisttivazione = rdr.GetDateTime(7)
                relatori.Add(relatore)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not (rdr Is Nothing) Then
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
            End If
            relatori = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            relatori = Nothing
        End Try
        Return relatori

    End Function

    Function FO_Get_DatiSedutaRelatoreInfo(ByVal idDocumento As String) As ItemDatiSedutaInfo

        Dim itemDatiSedutaInfo As ItemDatiSedutaInfo = Nothing

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        Dim Sqlq As String = " SELECT   Dds_doc_id, " & _
                                " Dds_DataSeduta " & _
                                " FROM Documento_Dati_Seduta "

        Dim param(0) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@IdDocumento", SqlDbType.VarChar)
        param(0).Value = idDocumento

        Sqlq = Sqlq & " WHERE Dds_doc_id = @IdDocumento"

        Dim rdr As SqlClient.SqlDataReader = Nothing

        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()
                itemDatiSedutaInfo = New ItemDatiSedutaInfo
                If Not rdr.IsDBNull(0) Then itemDatiSedutaInfo.DocId = rdr.GetString(0)
                If Not rdr.IsDBNull(1) Then itemDatiSedutaInfo.DataSeduta = rdr.GetDateTime(1).Date.Date
                If Not rdr.IsDBNull(1) Then itemDatiSedutaInfo.OraSeduta = IIf(rdr.GetDateTime(1).Hour.ToString.Length = 1, "0" & rdr.GetDateTime(1).Hour, rdr.GetDateTime(1).Hour) & ":" & IIf(rdr.GetDateTime(1).Minute.ToString.Length = 1, "0" & rdr.GetDateTime(1).Minute, rdr.GetDateTime(1).Minute)

                Dim relatori As Generic.List(Of ItemRelatore) = FO_Get_Lista_Relatori_Documento(itemDatiSedutaInfo.DocId)
                itemDatiSedutaInfo.Relatori = relatori
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not (rdr Is Nothing) Then
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
            End If
            itemDatiSedutaInfo = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            itemDatiSedutaInfo = Nothing
        End Try
        Return itemDatiSedutaInfo

    End Function

    Function FO_Get_SchedaLeggeTrasparenzaInfo(ByVal oOperatore As DllAmbiente.Operatore, ByVal idDocumento As String) As ItemSchedaLeggeTrasparenzaInfo

        Dim itemSchedaLeggeTrasparenzaInfo As ItemSchedaLeggeTrasparenzaInfo = Nothing

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = " SELECT [id_documento]" & _
            ",[autorizzazione_pubblicazione]" & _
            ",[note_pubblicazione]" & _
            ",[norma_attribuzione_beneficio]" & _
            ",[ufficio_responsabile_procedimento]" & _
            ",[funzionario_responsabile_procedimento]" & _
            ",[modalita_individuazione_beneficiario]" & _
            ",[contenuto_atto]" & _
            " FROM  [Trasparenza] "

        Dim param(0) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@IdDocumento", SqlDbType.VarChar)
        param(0).Value = idDocumento

        Sqlq = Sqlq & " WHERE id_documento=@IdDocumento"

        Dim rdr As SqlClient.SqlDataReader = Nothing

        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()
                itemSchedaLeggeTrasparenzaInfo = New ItemSchedaLeggeTrasparenzaInfo
                If Not rdr.IsDBNull(0) Then itemSchedaLeggeTrasparenzaInfo.IdDocumento = rdr.GetString(0)
                If Not rdr.IsDBNull(1) Then itemSchedaLeggeTrasparenzaInfo.AutorizzazionePubblicazione = rdr.GetBoolean(1)
                If Not rdr.IsDBNull(2) Then itemSchedaLeggeTrasparenzaInfo.NotePubblicazione = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then itemSchedaLeggeTrasparenzaInfo.NormaAttribuzioneBeneficio = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then itemSchedaLeggeTrasparenzaInfo.UfficioResponsabileProcedimento = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then itemSchedaLeggeTrasparenzaInfo.FunzionarioResponsabileProcedimento = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then itemSchedaLeggeTrasparenzaInfo.ModalitaIndividuazioneBeneficiario = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then itemSchedaLeggeTrasparenzaInfo.ContenutoAtto = rdr.GetString(7)

                'Dim contratti As Generic.List(Of ItemContrattoInfoHeader) = FO_Get_ListaContratti(itemSchedaLeggeTrasparenzaInfo.IdDocumento)
                'itemSchedaLeggeTrasparenzaInfo.Contratti = contratti
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not (rdr Is Nothing) Then
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
            End If
            itemSchedaLeggeTrasparenzaInfo = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            itemSchedaLeggeTrasparenzaInfo = Nothing
        End Try
        Return itemSchedaLeggeTrasparenzaInfo

    End Function


    Function FO_Get_SchedaTipologiaProvvedimentoInfo(ByVal oOperatore As DllAmbiente.Operatore, ByVal idDocumento As String) As ItemSchedaTipologiaProvvedimentoInfo

        Dim itemSchedaTipologiaProvvedimentoInfo As ItemSchedaTipologiaProvvedimentoInfo = Nothing

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = " SELECT [id_documento]" & _
            ",[id_tipologia_provvedimento], [importo_spesa_prevista], [is_somma_automatica]" & _
            " FROM  [Documento_Tipologia] "

        Dim param(0) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@IdDocumento", SqlDbType.VarChar)
        param(0).Value = idDocumento

        Sqlq = Sqlq & " WHERE id_documento=@IdDocumento"

        Dim rdr As SqlClient.SqlDataReader = Nothing

        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()
                itemSchedaTipologiaProvvedimentoInfo = New ItemSchedaTipologiaProvvedimentoInfo
                If Not rdr.IsDBNull(0) Then itemSchedaTipologiaProvvedimentoInfo.IdDocumento = rdr.GetString(0)
                If Not rdr.IsDBNull(1) Then itemSchedaTipologiaProvvedimentoInfo.IdTipologiaProvvedimento = rdr.GetInt32(1)
                If Not rdr.IsDBNull(2) Then
                    itemSchedaTipologiaProvvedimentoInfo.ImportoSpesaPrevista = rdr.GetDouble(2)
                End If
                If Not rdr.IsDBNull(3) Then itemSchedaTipologiaProvvedimentoInfo.isSommaAutomatica = rdr.GetBoolean(3)

                Dim beneficiari As Generic.List(Of ItemDestinatarioInfo) = FO_Get_ListaDestinatari(oOperatore, itemSchedaTipologiaProvvedimentoInfo.IdDocumento)
                itemSchedaTipologiaProvvedimentoInfo.Destinatari = beneficiari
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not (rdr Is Nothing) Then
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
            End If
            itemSchedaTipologiaProvvedimentoInfo = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            itemSchedaTipologiaProvvedimentoInfo = Nothing
        End Try
        Return itemSchedaTipologiaProvvedimentoInfo

    End Function

    Friend Sub Registra_Suggerimento_Documento(ByVal suggerimento As Integer, ByVal idDocumento As String, ByVal note As String, Optional ByRef trans As SqlTransaction = Nothing, Optional ByVal pubblico As Boolean = True)
        Const SFunzione As String = "Registra_Suggerimento_Documento"
        Try

            Log.Debug("Inizio" & SFunzione)

            If Trim(idDocumento) = "" Or suggerimento < 0 Then
                Log.Debug(Now & " -Parametri insufficienti, " + SFunzione)
                Throw New Exception("Parametri insufficienti, " + SFunzione)
            End If

            Dim sugg As ItemSuggerimentoInfo = Get_Suggerimento(suggerimento)

            Dim suggDoc As ItemSuggerimento
            If Not sugg Is Nothing Then
                suggDoc = New ItemSuggerimento
                suggDoc.Doc_Id = idDocumento
                suggDoc.CodOperatore = oOperatore.Codice
                suggDoc.DataRegistrazione = Now
                suggDoc.Note = note
                suggDoc.Id_Suggerimento = sugg.Id
                suggDoc.isPubblico = pubblico
                FO_Insert_Suggerimento(oOperatore, suggDoc, trans)
            End If
            Dim vRegAtt(Dic_FODocumentale.dimvc_Registra_Attivita) As Object
            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_tipoAttivita) = sugg.DescrizioneBreve
            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_id_documento) = idDocumento
            Dim objStato As DllDocumentale.StatoIstanzaDocumentoInfo = (New DllDocumentale.svrDocumenti(oOperatore)).Get_StatoIstanzaDocumento(idDocumento)
            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_livelloufficio) = objStato.LivelloUfficio
            vRegAtt(Dic_FODocumentale.vc_Registra_Attivita.c_livelloRuoloufficio) = objStato.Ruolo
            FO_Registra_Attivita_new(vRegAtt, trans)



        Catch ex As Exception
            Log.Error(ex.Message)
            Throw New Exception(ex.Message)
        End Try
        Log.Debug(oOperatore.Codice & ":Fine " & SFunzione)
    End Sub
    Private Function ProgressivoPresaInCarico(ByVal idDocumento As String, ByVal utente As String) As Integer
        Const SFunzione As String = "ProgressivoPresaInCarico"
        Dim Sqlq As String
        Log.Info(Now & " - " & utente & " - " & SFunzione)
        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Sqlq = " SELECT     MAX(Azioni_Utente_Documento.Sto_Prog) AS Sto_Prog  " & _
               " FROM          Azioni_Utente_Documento " & _
               " WHERE      (Azioni_Utente_Documento.Sto_id_Doc = '" & idDocumento & "') AND (Azioni_Utente_Documento.Sto_Utente = '" & utente & "')" & _
               " AND ( (Azioni_Utente_Documento.Sto_TipoAttivita = 'ARRIVOWL') OR (Azioni_Utente_Documento.Sto_TipoAttivita = 'PRELAZIONE') or (Azioni_Utente_Documento.Sto_TipoAttivita = 'PRELIEVO') )"

        Log.Info(Now & " - " & utente & " - " & Sqlq)
        Dim rdr As SqlClient.SqlDataReader

        rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)
        Try

            ProgressivoPresaInCarico = 0
            While (rdr.Read())
                If Not rdr.GetValue(0) Is DBNull.Value Then
                    ProgressivoPresaInCarico = rdr.GetInt32(0)
                End If
            End While
            rdr.Close()
            Log.Info(Now & " - " & utente & " - " & ProgressivoPresaInCarico)
        Catch ex As Exception
            Log.Error(Now & " - " & utente & " - " & ex.Message)
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            ProgressivoPresaInCarico = 0
        End Try
    End Function
    Private Function ProgressivoFirmaUtente(ByVal idDocumento As String, ByVal utente As String) As Integer
        Const SFunzione As String = "ProgressivoFirmaUtente"
        Dim Sqlq As String
        Log.Info(Now & " - " & utente & " - " & SFunzione)
        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Sqlq = " SELECT     MAX(Azioni_Utente_Documento.Sto_Prog) AS Sto_Prog  " & _
               " FROM          Azioni_Utente_Documento " & _
               " WHERE      (Azioni_Utente_Documento.Sto_id_Doc = '" & idDocumento & "') AND (Azioni_Utente_Documento.Sto_Utente = '" & utente & "')" & _
               " AND (Azioni_Utente_Documento.Sto_TipoAttivita = 'FIRMA')"

        Log.Info(Now & " - " & utente & " - " & Sqlq)
        Dim rdr As SqlClient.SqlDataReader

        rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)
        Try

            ProgressivoFirmaUtente = 0
            While (rdr.Read())
                If Not rdr.GetValue(0) Is DBNull.Value Then
                    ProgressivoFirmaUtente = rdr.GetInt32(0)
                End If
            End While
            rdr.Close()
            Log.Info(Now & " - " & utente & " - " & ProgressivoFirmaUtente)
        Catch ex As Exception
            Log.Error(Now & " - " & utente & " - " & ex.Message)
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            ProgressivoFirmaUtente = 0
        End Try
    End Function
    'Restituisce il progressivo massimo dell'ultima attività di modifica fatta sul documento (a prescindere dall'utente che l'ha svolta
    Private Function VerificaModificaVersione(ByVal idDocumento As String, ByVal utente As String, Optional ByVal progPresaInCarico As Integer = -1) As Integer
        Const SFunzione As String = "VerificaModificaVersione"
        Dim Sqlq As String
        Log.Info("***INIZIO " & SFunzione & " Operatore: " & utente & " " & Now)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Sqlq = " SELECT     MAX(Azioni_Utente_Documento.Sto_Prog) AS Sto_Prog  " & _
               " FROM          Azioni_Utente_Documento " & _
               " WHERE      (Azioni_Utente_Documento.Sto_id_Doc = '" & idDocumento & "') " & _
               " AND ( (Azioni_Utente_Documento.Sto_TipoAttivita = 'IMMISDATI') OR (Azioni_Utente_Documento.Sto_TipoAttivita like 'CONTABILE%') )"

        If progPresaInCarico > 0 Then
            Sqlq = Sqlq & " AND sto_prog > " & progPresaInCarico
        End If

        Log.Info(SFunzione & " - Operatore: " & utente & " - QUERY:  " & Sqlq & " - " & Now)

        Dim rdr As SqlClient.SqlDataReader

        rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)
        Try

            VerificaModificaVersione = 0
            While (rdr.Read())
                If Not rdr.GetValue(0) Is DBNull.Value Then
                    VerificaModificaVersione = rdr.GetInt32(0)
                End If
            End While

            Log.Info("***FINE " & SFunzione & " Operatore: " & utente & " - Numero Versione: " & VerificaModificaVersione & " - " & Now)

            rdr.Close()
        Catch ex As Exception
            Log.Error(Now & " - " & utente & " - " & ex.Message)
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            VerificaModificaVersione = 0
        End Try

    End Function

    'Restituisce il progressivo massimo dell'attività di inserimento osservazioni da parte dell'ufficio dell'utente richiedente (i dirigenti si avvalgono dei colloratori per l'inserimento delle oss)
    Private Function VerificaInserimentoOsservazioni(ByVal idDocumento As String, ByVal operatore As DllAmbiente.Operatore, Optional ByVal progPresaInCarico As Integer = -1) As Integer
        Const SFunzione As String = "VerificaInserimentoOsservazioni"
        Dim Sqlq As String
        Log.Info("***INIZIO " & SFunzione & " Operatore: " & operatore.Codice & " " & Now)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Sqlq = " SELECT     MAX(Azioni_Utente_Documento.Sto_Prog) AS Sto_Prog  " & _
               " FROM          Azioni_Utente_Documento " & _
               " WHERE      (Azioni_Utente_Documento.Sto_id_Doc = '" & idDocumento & "') AND (Azioni_Utente_Documento.Sto_Ufficio = '" & operatore.oUfficio.CodUfficio & "')" & _
               " AND ( (Azioni_Utente_Documento.Sto_TipoAttivita = 'OSSERVAZIONI') )"

        If progPresaInCarico > 0 Then
            Sqlq = Sqlq & " AND sto_prog > " & progPresaInCarico
        End If

        Log.Info(Now & " - " & operatore.Codice & " - " & Sqlq)
        Dim rdr As SqlClient.SqlDataReader

        rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)
        Try

            VerificaInserimentoOsservazioni = 0
            While (rdr.Read())
                If Not rdr.GetValue(0) Is DBNull.Value Then
                    VerificaInserimentoOsservazioni = rdr.GetInt32(0)
                End If
            End While
            rdr.Close()
            Log.Info("***FINE " & SFunzione & " Operatore: " & operatore.Codice & " - Id Osservazione: " & VerificaInserimentoOsservazioni & " - " & Now)

        Catch ex As Exception
            Log.Error(Now & " - " & operatore.Codice & " - " & ex.Message)
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            VerificaInserimentoOsservazioni = 0
        End Try
    End Function
    ' stesso funzionamento di verifica firma utente solo che tiene conto anche delle modifiche esterne al word, quindi modifiche ai dati contabili e/o oggetto
    Public Function VERIFICA_FIRMA_UTENTE(ByVal iddocumento As String, ByVal utente As String, Optional ByVal codAzione As String = "") As Integer
        Const SFunzione As String = "VERIFICA_FIRMA_UTENTE_ATTO"
        Dim vRitPar(3) As Object
        Dim operatore As DllAmbiente.Operatore = New DllAmbiente.Operatore
        operatore.Codice = utente
        Log.Info("***INIZIO " & SFunzione & " Operatore: " & utente & "  idDocumento: " & iddocumento & " " & Now)

        Dim Sqlq As String
        Dim vP(2) As Object
        Dim rdr As SqlClient.SqlDataReader

        Try
            Dim idVersione As String

            idVersione = IdUltimaVersioneDocumento(iddocumento)
            Log.Info(Now & " - " & operatore.Codice & " - IdUltimaVersioneDocumento: " & idVersione)
            vRitPar(0) = 0
            vRitPar(1) = ""
            Dim progressivoUltimaModifica As Integer = VerificaModificaVersione(iddocumento, operatore.Codice)
            Log.Info(Now & " - " & operatore.Codice & " - VerificaModificaVersione:" & progressivoUltimaModifica)
            Dim progressivoInserimentoOsservazioni As Integer = VerificaInserimentoOsservazioni(iddocumento, operatore)
            Log.Info(Now & " - " & operatore.Codice & " - VerificaInserimentoOsservazioni:" & progressivoInserimentoOsservazioni)

            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            ' stabilisco il progressivo del record corrispondente all'ultima firma effettuata con lo stesso account
            ' dell'operatore loggato
            Sqlq = "SELECT  max(Sto_Prog) " & _
            " FROM Azioni_Utente_Documento " & _
            " WHERE     (Sto_id_Doc = '" & iddocumento & "') AND (Sto_Utente = '" & operatore.Codice & "') " & _
            " AND (Sto_TipoAttivita = 'FIRMA') AND (Sto_Info_Attivita like '" & idVersione & "') " & _
            " AND (Sto_Prog > " & progressivoUltimaModifica & " ) and  (Sto_Prog > " & progressivoInserimentoOsservazioni & " ) "

            Log.Info(Now & " - " & operatore.Codice & " - " & Sqlq)

            Try

                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)

                VERIFICA_FIRMA_UTENTE = 0
                While rdr.Read()
                    If Not rdr.IsDBNull(0) Then
                        VERIFICA_FIRMA_UTENTE = rdr.GetInt32(0)


                        ' prelevo il ruolo e il livello del record con il progressivo estratto prima
                        Sqlq = "SELECT  Sto_Livello, Sto_Ruolo, Sto_Utente " & _
                        " FROM Azioni_Utente_Documento " & _
                        " WHERE     (Sto_id_Doc = '" & iddocumento & "') AND (Sto_Utente = '" & operatore.Codice & "') " & _
                        " AND (Sto_TipoAttivita = 'FIRMA') AND (Sto_Info_Attivita like '" & idVersione & "') " & _
                        " AND (Sto_Prog = " & VERIFICA_FIRMA_UTENTE & " ) "

                        rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)

                        Dim livelloUltimaFirma As String = ""
                        Dim ruoloUltimaFirma As String = ""
                        Dim utenteUltimaFirma As String = ""
                        While rdr.Read()
                            If Not rdr.GetValue(0) Is DBNull.Value Then
                                livelloUltimaFirma = rdr.GetString(0)
                                ruoloUltimaFirma = rdr.GetString(1)
                                utenteUltimaFirma = rdr.GetString(2)

                            End If
                        End While

                        ' prelevo il ruolo e il livello dell'ultimo record, che dovrebbe essere di colui che ha in carico il documento
                        Sqlq = "SELECT  Sto_Livello, Sto_Ruolo, Sto_Utente " & _
                        " FROM Azioni_Utente_Documento " & _
                        " WHERE Sto_id_Doc = '" & iddocumento & "' " & _
                        " AND Sto_Prog = (select MAX(Sto_Prog) FROM Azioni_Utente_Documento WHERE Sto_id_Doc = '" & iddocumento & "' ) "

                        rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)

                        Dim livelloUltimoProgressivo As String = ""
                        Dim ruoloUltimoProgressivo As String = ""
                        Dim utenteUltimaProgressivo As String = ""
                        While rdr.Read()
                            If Not rdr.GetValue(0) Is DBNull.Value And Not rdr.GetValue(0).Equals("") Then
                                livelloUltimoProgressivo = rdr.GetString(0)
                                ruoloUltimoProgressivo = rdr.GetString(1)
                                utenteUltimaProgressivo = rdr.GetString(2)
                            End If
                        End While

                        ' confronto il livello e ruolo del momento in cui è stato frimato il documento
                        ' con il livello e ruolo dell'ultimo record, ovvero, dell'utente che dovrebbe avere in carico il documento
                        ' se questi sono diversi, allora devo permettere nuovamente la firma! perchè l'account loggato, 
                        ' seppure sia lo stesso che ha firmato precedetemente il file, è loggato con un altro ruolo (es. prima come Resp UP, ora come Resp UR)
                        If utenteUltimaFirma = utenteUltimaProgressivo And livelloUltimaFirma <> livelloUltimoProgressivo And ruoloUltimaFirma <> ruoloUltimoProgressivo Then
                            VERIFICA_FIRMA_UTENTE = 0
                        End If

                    End If
                    If Not String.IsNullOrEmpty(codAzione) Then
                        Dim rit As Object = VERIFICA_AZIONE_UFFICIO(oOperatore.oUfficio.CodUfficio, , iddocumento)
                        If IsArray(rit) Then
                            Dim ultimaAzioneUtente As String = rit(1)
                            If Not ultimaAzioneUtente.Contains(codAzione) And Not ultimaAzioneUtente.Equals("") Then 'Modifica GIO - Flag VERIFICA_FIRMA_UTENTE = 0 per il RespUfRg all'inoltro con doc gia firmato
                                VERIFICA_FIRMA_UTENTE = 0
                            End If
                        End If
                    End If
                End While
                rdr.Close()
                Log.Info(Now & " - " & operatore.Codice & " - " & " valore VERIFICA_FIRMA_UTENTE: " & VERIFICA_FIRMA_UTENTE)
            Catch ex As SqlClient.SqlException
                Err.Number = ex.Number
                Err.Description = ex.Message
                Log.Error(Now & " - " & operatore.Codice & " - " & ex.Message)
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
                VERIFICA_FIRMA_UTENTE = 0
            End Try

        Catch ex As Exception
            Log.Error(Now & " - " & operatore.Codice & " - " & ex.Message)
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            VERIFICA_FIRMA_UTENTE = 0
        End Try
        Log.Info("***FINE " & SFunzione & " Operatore: " & utente & "  idDocumento: " & iddocumento & " " & Now)

    End Function


     Public Function VERIFICA_MARCA_UTENTE(ByVal iddocumento As String, ByVal utente As String) As Boolean
        Const SFunzione As String = "VERIFICA_MARCA_UTENTE_ATTO"
        Dim vRitPar(3) As Object
        Dim operatore As DllAmbiente.Operatore = New DllAmbiente.Operatore
        operatore.Codice = utente
        Log.Info("***INIZIO " & SFunzione & " Operatore: " & utente & "  idDocumento: " & iddocumento & " " & Now)

        Dim Sqlq As String
        Dim vP(2) As Object
        Dim rdr As SqlClient.SqlDataReader
       ' Dim verificaMarca As Boolean = False
        Try
            Dim idVersione As String

            idVersione = IdUltimaVersioneDocumento(iddocumento)
            Log.Info(Now & " - " & operatore.Codice & " - IdUltimaVersioneDocumento: " & idVersione)
            vRitPar(0) = 0
            vRitPar(1) = ""
            Dim progressivoUltimaModifica As Integer = VerificaModificaVersione(iddocumento, operatore.Codice)
            Log.Info(Now & " - " & operatore.Codice & " - VerificaModificaVersione:" & progressivoUltimaModifica)
            Dim progressivoInserimentoOsservazioni As Integer = VerificaInserimentoOsservazioni(iddocumento, operatore)
            Log.Info(Now & " - " & operatore.Codice & " - VerificaInserimentoOsservazioni:" & progressivoInserimentoOsservazioni)

            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            ' stabilisco il progressivo del record corrispondente all'ultima firma effettuata con lo stesso account
            ' dell'operatore loggato
            Sqlq = "SELECT  max(Sto_Prog) " & _
            " FROM Azioni_Utente_Documento " & _
            " WHERE     (Sto_id_Doc = '" & iddocumento & "') AND (Sto_Utente = '" & operatore.Codice & "') " & _
            " AND (Sto_TipoAttivita = 'FIRMA') AND (Sto_Info_Attivita like '" & idVersione & "') " & _
            " AND (Sto_Prog > " & progressivoUltimaModifica & " ) and  (Sto_Prog > " & progressivoInserimentoOsservazioni & " ) "

            Log.Info(Now & " - " & operatore.Codice & " - " & Sqlq)

            Try
                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)
                
                While rdr.Read()
                    If Not rdr.IsDBNull(0) Then
                        Dim progressivo As Integer = rdr.GetInt32(0)
                        
                        ' prelevo l'id allegato della marca del successivo progressivo rispetto alla firma
                        Sqlq = "SELECT  Sto_idAllegato " & _
                        " FROM Azioni_Utente_Documento " & _
                        " WHERE  (Sto_Prog = " & progressivo + 1 & " ) AND   (Sto_id_Doc = '" & iddocumento & "') AND (Sto_Utente = '" & operatore.Codice & "') " & _
                        " AND (Sto_TipoAttivita = 'MARCA')  "

                        rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)
                        
                        While rdr.Read()
                            If Not rdr.GetValue(0) Is DBNull.Value Then
                                Return True

                            End If
                        End While
                        
                    End If
                
                End While
                rdr.Close()
                Log.Info(Now & " - " & operatore.Codice & " - " & " VERIFICA_MARCA_UTENTE")
            Catch ex As SqlClient.SqlException
                Err.Number = ex.Number
                Err.Description = ex.Message
                Log.Error(Now & " - " & operatore.Codice & " - " & ex.Message)
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
                Return False
            End Try

        Catch ex As Exception
            Log.Error(Now & " - " & operatore.Codice & " - " & ex.Message)
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
           Return False
        End Try
        Log.Info("***FINE " & SFunzione & " Operatore: " & utente & "  idDocumento: " & iddocumento & " " & Now)

    End Function
    Public Function VERIFICA_AZIONE_UFFICIO(Optional ByVal ufficio As String = "U010017", Optional ByVal progressivoInput As Integer = -1, Optional ByVal iddocumentolocale As String = "") As Object
        Const SFunzione As String = "VERIFICA_AZIONE_UFFICIO"
        Dim vRitPar(2) As Object
        Dim Sqlq As String


        Log.Info(Now & " - " & oOperatore.Codice & " - " & SFunzione)
        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim rdr As SqlClient.SqlDataReader
        vRitPar(0) = 0
        vRitPar(1) = ""
        Try
            If iddocumentolocale <> "" Then
                idDocumento = iddocumentolocale
            End If
            Dim sqlRicercaResp As String = "SELECT     Tab_Operatori_Gruppi.TOG_Operatore " & _
                        " FROM  Tab_Operatori_Gruppi INNER JOIN " & _
                        " Strutture_Operatori ON Tab_Operatori_Gruppi.TOG_Operatore = Strutture_Operatori.Sop_Operatore INNER JOIN " & _
                        " TAB_Operatori_Attributi ON Tab_Operatori_Gruppi.TOG_Gruppo = TAB_Operatori_Attributi.TOA_Operatore " & _
                        " WHERE      (Strutture_Operatori.Sop_Struttura = '" & ufficio & "') AND (TAB_Operatori_Attributi.TOA_Procedura = 'DETERMINE' OR " & _
                        " TAB_Operatori_Attributi.TOA_Procedura = '*') AND (TAB_Operatori_Attributi.TOA_Attributo = 'LIVELLO_UFFICIO') AND " & _
                        " (TAB_Operatori_Attributi.Toa_Valore = 'RESPONSABILE')"
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, sqlRicercaResp, Nothing)

            Dim responsabile As String = ""
            While rdr.Read()
                responsabile = rdr.GetString(0)
            End While
            rdr.Close()
            Dim progPresaInCarico As Integer = -1
            progPresaInCarico = ProgressivoPresaInCarico(idDocumento, responsabile)
            If progressivoInput < 0 Then

                'se l'utente ha in carico il documento, devo verificare l'azione precedente altrimenti quella dopo l'ultima presa in carico
                If UCase(Get_StatoIstanzaDocumento(idDocumento).Operatore) = UCase(responsabile) Then
                    Sqlq = "SELECT   top 1   Sto_TipoAttivita, Sto_Prog " & _
                " FROM         Azioni_Utente_Documento " & _
                " WHERE     (Sto_id_Doc = '" & idDocumento & "') AND  (Sto_TipoAttivita = 'INOLTRO' OR Sto_TipoAttivita = 'RIGETTO') AND (Sto_Prog < " & progPresaInCarico & " )" & _
                " AND (Sto_Utente = '" & responsabile & "')" & _
                " order by Sto_Prog desc "

                Else
                    'la query tiene conto dell'ultima attività dell'utente per l'intero storico
                    Sqlq = "SELECT   top 1   Sto_TipoAttivita, Sto_Prog " & _
                " FROM         Azioni_Utente_Documento " & _
                " WHERE     (Sto_id_Doc = '" & idDocumento & "') AND  (Sto_TipoAttivita = 'INOLTRO' OR Sto_TipoAttivita = 'RIGETTO') AND (Sto_Prog > " & progPresaInCarico & " )" & _
                " AND (Sto_Utente = '" & responsabile & "')" & _
                " order by Sto_Prog desc "

                End If



            Else
                'la query tiene conto dell'ultima attività dell'utente dopo la firma del DG

                Sqlq = "SELECT    top 1  Sto_TipoAttivita, Sto_Prog " & _
            " FROM         Azioni_Utente_Documento " & _
            " WHERE     (Sto_id_Doc = '" & idDocumento & "') AND  (Sto_TipoAttivita = 'INOLTRO' OR Sto_TipoAttivita = 'RIGETTO') AND (Sto_Prog > " & progPresaInCarico & " )" & _
            " AND (Sto_Prog > " & progressivoInput & " ) AND (Sto_Utente = '" & responsabile & "')" & _
            " order by Sto_Prog desc "

            End If
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)

            Log.Info(Now & " - " & oOperatore.Codice & " - " & Sqlq)

            While rdr.Read()
                vRitPar(0) = 0
                vRitPar(1) = rdr.GetString(0)
                vRitPar(2) = rdr.GetInt32(1)
            End While
            rdr.Close()
            If UCase(vRitPar(1)) = "RIGETTO" Then
                Dim Progressivo As Integer = CInt(vRitPar(2))

                Sqlq = " SELECT Sto_TipoAttivita " & _
                       " FROM Azioni_Utente_Documento " & _
                       " WHERE (Sto_id_Doc = '" & idDocumento & "') AND (Sto_Prog >=" & _
                            " (SELECT     TOP 1 Sto_Prog " & _
                            "  FROM Azioni_Utente_Documento " & _
                            "  WHERE      (Sto_id_Doc = '" & idDocumento & "') AND (Sto_TipoAttivita = 'INOLTRO' OR" & _
                            "                       Sto_TipoAttivita = 'RIGETTO' OR Sto_TipoAttivita = 'PRELIEVO'  OR Sto_TipoAttivita = 'PRELAZIONE' ) AND (Sto_Prog < " & Progressivo & " )" & _
                            "   ORDER BY Sto_Prog DESC)) AND (Sto_Prog < " & Progressivo & ") AND (Sto_TipoAttivita = 'FIRMA')"
                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)
                While rdr.Read()
                    If rdr.GetString(0) = "FIRMA" Then
                        vRitPar(1) = vRitPar(1) & " FORMALE"
                    End If
                End While
                rdr.Close()
            End If
            Log.Info(Now & " - " & oOperatore.Codice & " - ")

        Catch ex As Exception
            Log.Error(Now & " - " & oOperatore.Codice & " - " & ex.Message)
            rdr.Close()
            Return vRitPar
        End Try

        Return vRitPar
    End Function
    Public Function VerificaAbilitazioneInoltroRigetto(ByVal iddocumento As String, ByVal ooperatore As DllAmbiente.Operatore, ByVal azione As String) As Boolean
        Const SFunzione As String = "VerificaAbilitazioneInoltroRigetto"
        Log.Info("***INIZIO VerificaAbilitazioneInoltroRigetto - idDocumento: " & iddocumento & " - Operatore: " & ooperatore.Codice & " " & Now)
        Try
            Dim statoDocumento As DllDocumentale.StatoIstanzaDocumentoInfo = Get_StatoIstanzaDocumento(iddocumento)
            Dim codiceUfficioProponente As String = statoDocumento.CodiceUfficio
            Dim ufficioProponente As DllAmbiente.Ufficio = New DllAmbiente.Ufficio
            ufficioProponente.CodUfficio = codiceUfficioProponente
            iddocumento = statoDocumento.Doc_id
            'Controllo in Ufficio Proponente
            If codiceUfficioProponente = ooperatore.oUfficio.CodUfficio And (statoDocumento.LivelloUfficio = "UP" Or statoDocumento.LivelloUfficio = "UDD") Then
                'controllo se annullato
                If azione = "ANNULLO" Then
                    Return True
                End If
                'non posso rigettare perchè sono ufficio proponente o direzione generale proponente
                If azione = "RIGETTO" Then
                    ErrDescrizione = "<span style='color:red'>Impossibile rigettare, l'atto è proposto da questo ufficio</span><br/>"
                    Return False
                End If
                If azione = "INOLTRO" Then
                    Return AbilitaInoltroRigetto(statoDocumento)
                End If
            End If

            'Controllo in Direzione Generale
            If codiceUfficioProponente <> ooperatore.oUfficio.CodUfficio And statoDocumento.LivelloUfficio = "UDD" Then
                'verificare che nn ci sia stato un altro rigetto formale dell'ufficio
                If azione = "RIGETTO" Then
                    Return AbilitaInoltroRigetto(statoDocumento)
                End If
                If azione = "INOLTRO" Then
                    Return True
                End If
                If azione = "ANNULLO" Then
                    ErrDescrizione = "<span style='color:red'>Impossibile annullare, l'atto non è proposto da questo ufficio</span><br/>"
                    Return False
                End If
            End If

            'Controllo in Segreteria Assessorato
            If codiceUfficioProponente <> ooperatore.oUfficio.CodUfficio And statoDocumento.LivelloUfficio = "US" Then
                'verificare che nn ci sia stato un altro rigetto formale dell'ufficio
                If azione = "RIGETTO" Then
                    Return AbilitaInoltroRigetto(statoDocumento)
                End If
                If azione = "INOLTRO" Then
                    Return True
                End If
                If azione = "ANNULLO" Then
                    ErrDescrizione = "<span style='color:red'>Impossibile annullare, l'atto non è proposto da questo ufficio</span><br/>"
                    Return False
                End If
            End If

            'Controllo in Segreteria di Presidenza - Visto Leggittimità
            If codiceUfficioProponente <> ooperatore.oUfficio.CodUfficio And statoDocumento.LivelloUfficio = "USL" Then
                'verificare che nn ci sia stato un altro rigetto formale dell'ufficio
                If azione = "RIGETTO" Then
                    Return AbilitaInoltroRigetto(statoDocumento)
                End If
                If azione = "INOLTRO" Then
                    Return True
                End If
                If azione = "ANNULLO" Then
                    ErrDescrizione = "<span style='color:red'>Impossibile annullare, l'atto non è proposto da questo ufficio</span><br/>"
                    Return False
                End If
            End If

            'Controllo in Segreteria di Presidenza - Segretario
            If codiceUfficioProponente <> ooperatore.oUfficio.CodUfficio And statoDocumento.LivelloUfficio = "USS" Then
                'verificare che nn ci sia stato un altro rigetto formale dell'ufficio
                If azione = "RIGETTO" Then
                    Return AbilitaInoltroRigetto(statoDocumento)
                End If
                If azione = "INOLTRO" Then
                    Return True
                End If
                If azione = "ANNULLO" Then
                    ErrDescrizione = "<span style='color:red'>Impossibile annullare, l'atto non è proposto da questo ufficio</span><br/>"
                    Return False
                End If
            End If

            'Controllo in Segreteria di Presidenza - Approvazione
            If codiceUfficioProponente <> ooperatore.oUfficio.CodUfficio And statoDocumento.LivelloUfficio = "USA" Then
                'verificare che nn ci sia stato un altro rigetto formale dell'ufficio
                If azione = "RIGETTO" Then
                    Dim dimvc_Funzione As Integer = DllDocumentale.Dic_FODocumentale.dimvc_Leggi_Documento
                    Dim vFunzione(dimvc_Funzione) As Object
                    vFunzione(vc_Leggi_Documento.c_idDocumento) = iddocumento
                    vFunzione(vc_Leggi_Documento.c_xmlDatiDocumento) = ""
                    Dim objDocumento As DllDocumentale.Model.DocumentoInfo = FO_Leggi_Documento_Object(vFunzione)
                    If objDocumento.Doc_numero <> "" Then
                        Return False
                    Else
                        Return True
                    End If
                End If
                If azione = "INOLTRO" Then
                    Return True
                End If
                If azione = "ANNULLO" Then
                    ErrDescrizione = "<span style='color:red'>Impossibile annullare, l'atto non è proposto da questo ufficio</span><br/>"
                    Return False
                End If
            End If

            'Controllo nell'uff di Presidenza
            If codiceUfficioProponente <> ooperatore.oUfficio.CodUfficio And statoDocumento.LivelloUfficio = "UPRES" Then
                If azione = "RIGETTO" Then
                    'ErrDescrizione = "<span style='color:red'>Impossibile rigettare</span><br/>"
                    'Return False
                    Return True
                End If
                If azione = "INOLTRO" Then
                    Return True
                End If
                If azione = "ANNULLO" Then
                    ErrDescrizione = "<span style='color:red'>Impossibile annullare, l'atto non è proposto da questo ufficio</span><br/>"
                    Return False
                End If
            End If

            'Controllo Controllo Amministrativo
            If statoDocumento.LivelloUfficio = "UCA" And ooperatore.oUfficio.CodUfficio = ooperatore.oUfficio.CodUfficioControlloAmministrativo Then
                'verificare che nn ci sia stato un altro rigetto formale dell'ufficio
                If azione = "RIGETTO" Then
                    Return AbilitaInoltroRigetto(statoDocumento)
                End If
                If azione = "INOLTRO" Then
                    Return AbilitaInoltroRigetto(statoDocumento)
                End If
                If azione = "ANNULLO" Then
                    ErrDescrizione = "<span style='color:red'>Impossibile annullare, l'atto non è proposto da questo ufficio</span><br/>"
                    Return False
                End If
            End If
            If statoDocumento.LivelloUfficio = "UR" And ooperatore.oUfficio.CodUfficio = ooperatore.oUfficio.CodUfficioRagioneria Then
                'posso sia rigettare che inoltrare
                If azione = "INOLTRO" Then
                    Dim oUffRagioneria As New DllAmbiente.Ufficio
                    oUffRagioneria.CodUfficio = ooperatore.oUfficio.CodUfficioRagioneria
                    Dim respUfficioRagioneria As String = oUffRagioneria.ResponsabileUfficio("DETERMINE")

                    If statoDocumento.Ruolo = "R" And LCase(respUfficioRagioneria) = LCase(ooperatore.Codice) Then

                        'Modifica GIO - Nel caso di DELIBERA non controllo la registrazione delle operazioni contabili che verranno fatte dopo la numerazione
                        Dim dimvc_Funzione As Integer = DllDocumentale.Dic_FODocumentale.dimvc_Leggi_Documento
                        Dim vFunzione(dimvc_Funzione) As Object
                        vFunzione(vc_Leggi_Documento.c_idDocumento) = iddocumento
                        vFunzione(vc_Leggi_Documento.c_xmlDatiDocumento) = ""
                        Dim objDocumento As DllDocumentale.Model.DocumentoInfo = FO_Leggi_Documento_Object(vFunzione)

                        If objDocumento.Doc_Tipo = "1" Then
                            Return True
                        Else
                            ' controllo di tutte le op contabili
                            If isAllOpContabiliRegistate(statoDocumento.Doc_id) Then
                                Return True
                            Else
                                Return False
                            End If
                        End If



                    Else
                        Return True
                    End If
                End If
                If azione = "RIGETTO" Then
                    Dim oss As DllDocumentale.Model.OsservazioneInfo = GetOsservazione(ooperatore.Codice, statoDocumento.Doc_id, "UR")
                    If (Not oss Is Nothing) AndAlso (Not String.IsNullOrEmpty(oss.Testo.Trim)) Then
                        Return True
                    Else
                        ErrDescrizione = "<span style='color:red'>E' necessario editare le osservazioni prima di rigettare</span><br/>"
                        Return False
                    End If
                End If
                If azione = "ANNULLO" Then
                    ErrDescrizione = "<span style='color:red'>Impossibile annullare, l'atto non è proposto da questo ufficio</span><br/>"
                    Return False
                End If
            End If

            If statoDocumento.LivelloUfficio = "USL" And ooperatore.oUfficio.CodUfficio = ooperatore.oUfficio.CodUfficioSegreteriaPresidenzaLegittimita Then
                'posso sia rigettare che inoltrare
                If azione = "INOLTRO" Then
                    Return True
                End If
                If azione = "RIGETTO" Then
                    Return True
                End If
                If azione = "ANNULLO" Then
                    ErrDescrizione = "<span style='color:red'>Impossibile annullare, l'atto non è proposto da questo ufficio</span><br/>"
                    Return False
                End If
            End If

            Log.Info("***FINE VerificaAbilitazioneInoltroRigetto - idDocumento: " & iddocumento & " - Operatore: " & ooperatore.Codice & " " & Now)

        Catch ex As Exception
            Log.Error(Now & " - " & ooperatore.Codice & " - " & ex.Message)
            Return False
        End Try
        Return False
    End Function


    Function isAllOpContabiliRegistate(ByVal idDocumento As String) As Boolean
        Dim vparm(1) As Object
        vparm(0) = idDocumento
        Dim objDocumento As DllDocumentale.Model.DocumentoInfo = FO_Leggi_Documento_Object(vparm)


        Dim isPreimpRegistrati As Boolean = True
        Dim isImpRegistrati As Boolean = True
        Dim isLiqRegistrate As Boolean = True
        Dim isImpSuPerentiRegistrate As Boolean = True
        Dim isVarImpRegistrate As Boolean = True
        Dim isVarLiqRegistrate As Boolean = True
        Dim isVarPreImpRegistrate As Boolean = True
        Dim isAccertamentoRegistrato As Boolean = True
        Dim isAltroRegistrate As Boolean = True

        If objDocumento.haveOpContabile Then
            Dim countPreimp As Integer = 0

            Dim chkPreimpegno As String = objDocumento.getOpContabile(DllDocumentale.EnumDocumenti.TipoOperazioniContabili.Preimpegno)
            If chkPreimpegno = "1" Then
                Dim listaPreimpegni As IList = FO_Get_DatiPreImpegni(objDocumento.Doc_id)
                For Each preimpegno As DllDocumentale.ItemImpegnoInfo In listaPreimpegni
                    If (preimpegno.Di_TipoAssunzioneDescr <> "PREIMP-PROVV") Then
                        countPreimp = countPreimp + 1
                    End If
                Next



                If listaPreimpegni.Count <> countPreimp Then
                    'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Preimpegni:</i><span class='lblRed'>Dichiarati " & listaPreimpegni.Count & " Registrati " & countPreimp & "</span>"
                    isPreimpRegistrati = False
                Else
                    'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Preimpegni:</i>Dichiarati " & listaPreimpegni.Count & " Registrati " & countPreimp
                    isPreimpRegistrati = True
                End If
                countPreimp = 0
            End If

            Dim count As Integer = 0
            Dim chkImpegno As String = objDocumento.getOpContabile(DllDocumentale.EnumDocumenti.TipoOperazioniContabili.Impegno)
            Dim listaImpegni As IList = FO_Get_DatiImpegni(objDocumento.Doc_id)
            If chkImpegno = "1" Then
                For Each impegno As DllDocumentale.ItemImpegnoInfo In listaImpegni
                    If Not String.IsNullOrEmpty(impegno.Dli_NumImpegno) AndAlso Int(impegno.Dli_NumImpegno) > 0 Then
                        count = count + 1
                    End If
                Next
                'evidenzio se c'è un errore
                If listaImpegni.Count <> count Then
                    'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Impegni:</i><span class='lblRed'>Dichiarati " & listaImpegni.Count & " Registrati " & count & "</span>"
                    isImpRegistrati = False
                Else
                    'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Impegni:</i>Dichiarati   " & listaImpegni.Count & " Registrati " & count
                    isImpRegistrati = True
                End If
                count = 0
            End If
            Dim chkLiquidazione As String = objDocumento.getOpContabile(DllDocumentale.EnumDocumenti.TipoOperazioniContabili.Liquidazione)
            Dim listaLiquidazione As IList = FO_Get_DatiLiquidazione(objDocumento.Doc_id)
            For Each liquidazione As DllDocumentale.ItemLiquidazioneInfo In listaLiquidazione
                If Not String.IsNullOrEmpty(liquidazione.Dli_NLiquidazione) AndAlso Int(liquidazione.Dli_NLiquidazione) > 0 Then
                    count = count + 1
                End If
            Next


            If chkLiquidazione = "1" Then
                If listaLiquidazione.Count <> count Then
                    'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Liquidazioni:</i><span class='lblRed'>Dichiarate " & listaLiquidazione.Count & " Registrate " & count & "</span>"
                    isLiqRegistrate = False
                Else
                    'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Liquidazioni:</i>Dichiarate " & listaLiquidazione.Count & " Registrate " & count
                    isLiqRegistrate = True
                End If
                count = 0
            Else
                If listaLiquidazione.Count > 0 And listaLiquidazione.Count <> count Then
                    'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Liquidazioni Contestuali:</i><span class='lblRed'>Dichiarate " & listaLiquidazione.Count & " Registrate " & count & "</span>"
                    isLiqRegistrate = False
                ElseIf listaLiquidazione.Count <> count Then
                    'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Liquidazioni:</i>Dichiarate " & listaLiquidazione.Count & " Registrate " & count
                    isLiqRegistrate = True
                End If
                count = 0
            End If


            Dim chkImpegnoSuPerenti As String = objDocumento.getOpContabile(DllDocumentale.EnumDocumenti.TipoOperazioniContabili.ImpegniSuPerenti)
            Dim listaImpegniPerenti As IList = FO_Get_DatiImpegniPerenti(objDocumento.Doc_id)
            If chkImpegnoSuPerenti = "1" Then
                For Each impegno As DllDocumentale.ItemImpegnoInfo In listaImpegniPerenti
                    If Not String.IsNullOrEmpty(impegno.Dli_NumImpegno) AndAlso Int(impegno.Dli_NumImpegno) > 0 Then
                        count = count + 1
                    End If
                Next
                If listaImpegniPerenti.Count <> count Then
                    'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Impegni su Perenti:</i><span class='lblRed'>Dichiarati " & listaImpegniPerenti.Count & " Registrati " & count & "</span>"
                    isImpSuPerentiRegistrate = False
                Else
                    'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Impegni su Perenti:</i>Dichiarati " & listaImpegniPerenti.Count & " Registrati " & count
                    isImpSuPerentiRegistrate = True
                End If
                count = 0
            End If


            Dim chkRiduzione As String = objDocumento.getOpContabile(DllDocumentale.EnumDocumenti.TipoOperazioniContabili.Riduzione)
            Dim listaImpegniVariazioni As IList = FO_Get_DatiImpegniVariazioni(objDocumento.Doc_id)
            If chkRiduzione = "1" Then
                For Each impegnoVar As DllDocumentale.ItemRiduzioneInfo In listaImpegniVariazioni
                    If Not String.IsNullOrEmpty(impegnoVar.Div_NumeroReg) AndAlso Int(impegnoVar.Div_NumeroReg) > 0 Then
                        count = count + 1
                    End If
                Next
                If listaImpegniVariazioni.Count <> count Then
                    'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Riduzioni/Economie:</i><span class='lblRed'>Dichiarate " & listaImpegniVariazioni.Count & " Registrate " & count & "</span>"
                    isVarImpRegistrate = False
                Else
                    'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Riduzioni/Economie:</i>Dichiarate " & listaImpegniVariazioni.Count & " Registrate " & count
                    isVarImpRegistrate = True
                End If
                count = 0
            End If



            Dim chkRiduzioneLiq As String = objDocumento.getOpContabile(DllDocumentale.EnumDocumenti.TipoOperazioniContabili.RiduzioneLiq)
            Dim listaLiquidazioniVariazioni As IList = FO_Get_DatiLiquidazioniVariazioni(objDocumento.Doc_id)
            If chkRiduzioneLiq = "1" Then
                For Each liqVar As DllDocumentale.ItemRiduzioneLiqInfo In listaLiquidazioniVariazioni
                    If Not String.IsNullOrEmpty(liqVar.Div_NumeroReg) AndAlso Int(liqVar.Div_NumeroReg) > 0 Then
                        count = count + 1
                    End If
                Next
                If listaLiquidazioniVariazioni.Count <> count Then
                    isVarLiqRegistrate = False
                    'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Riduzioni Liquidazioni:</i><span class='lblRed'>Dichiarate " & listaLiquidazioniVariazioni.Count & " Registrate " & count & "</span>"
                Else
                    isVarLiqRegistrate = True
                    'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Riduzioni Liquidazioni:</i>Dichiarate " & listaLiquidazioniVariazioni.Count & " Registrate " & count
                End If
                count = 0
            End If


            Dim chkRiduzionePreImp As String = objDocumento.getOpContabile(DllDocumentale.EnumDocumenti.TipoOperazioniContabili.RiduzionePreImp)
            Dim listaPreImpegniVariazioni As IList = FO_Get_DatiPreImpegniVariazioni(objDocumento.Doc_id)
            If chkRiduzionePreImp = "1" Then
                For Each impegnoVar As DllDocumentale.ItemRiduzioneInfo In listaPreImpegniVariazioni
                    If Not String.IsNullOrEmpty(impegnoVar.Div_NumeroReg) AndAlso Int(impegnoVar.Div_NumeroReg) > 0 Then
                        count = count + 1
                    End If
                Next
                If listaPreImpegniVariazioni.Count <> count Then
                    isVarPreImpRegistrate = False
                    'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Riduzioni Preimpegni:</i><span class='lblRed'>Dichiarate " & listaPreImpegniVariazioni.Count & " Registrate " & count & "</span>"
                Else
                    'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Riduzioni Preimpegni:</i>Dichiarate " & listaPreImpegniVariazioni.Count & " Registrate " & count
                    isVarPreImpRegistrate = True
                End If
                count = 0
            End If
        End If

        Dim chkAccertamento As String = objDocumento.getOpContabile(DllDocumentale.EnumDocumenti.TipoOperazioniContabili.Accertamento)
        Dim accertamento As IList = FO_Get_Dati_Assunzione(objDocumento.Doc_id)
        If chkAccertamento = "1" Then
            'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Accertamento:</i>La registrazione deve avvenire solo sul SIC."
            'La registrazione dell'acceramento avviene solo sul SIC, quindi la return è sempre true
            isAccertamentoRegistrato = True
        End If


        Dim valoreAltro As String = objDocumento.getOpContabile(DllDocumentale.EnumDocumenti.TipoOperazioniContabili.Altro)
        If Not String.IsNullOrEmpty(valoreAltro) AndAlso CInt(valoreAltro) > 0 Then
            'messaggio_Di_Ritorno = messaggio_Di_Ritorno & "<br/><i>Rettifiche Contabili:</i>" & dllDoc.DettaglioOperazioneRettifica(CInt(valoreAltro), objDocumento.Doc_Tipo).Descrizione
            'Rettifiche Contabili gestite direttamente sul sic
            isAltroRegistrate = True
        End If

        Return isPreimpRegistrati * isImpRegistrati * isLiqRegistrate * isImpSuPerentiRegistrate * isVarImpRegistrate * isVarLiqRegistrate * isVarPreImpRegistrate * isAccertamentoRegistrato * isAltroRegistrate
    End Function




    Function FO_Update_COG_And_PdCF_Impegno(ByVal idProg As Long, ByVal CodObGest As String, ByVal CodPdCF As String, ByVal codiceDocumento As String, ByVal codOperatore As String) As Integer


        Dim Update_Codice_obiettivo_gestionale_Impegno As String = " UPDATE  [Documento_impegno] " & _
     " SET [Di_CodObGestionale] = " & param_CodObGest & _
     "     ,[Di_Operatore] =  " & param_Operatore & _
     "     ,[Di_DataRegistrazione] = " & param_DataRegistrazione & _
     "     ,[Di_PCF] = " & param_PCF & _
      " WHERE [Di_Documento] = " & param_id_Documento & " AND [Di_prog]= " & param_Prog_Contabilita



        '   Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Dim parms(5) As SqlParameter
        parms(0) = New SqlParameter(param_CodObGest, SqlDbType.VarChar)
        parms(0).Value = CodObGest
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = codOperatore
        parms(2) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(2).Value = idProg
        parms(3) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(3).Value = Now 'item.Dli_DataRegistrazione
        parms(4) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(4).Value = codiceDocumento
        parms(5) = New SqlParameter(param_PCF, SqlDbType.VarChar)
        parms(5).Value = CodPdCF


        Log.Debug("iddoc:" & codiceDocumento & " op:" & codOperatore)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlClient.SqlTransaction = conn.BeginTransaction
        Dim returnValue As Integer = 0
        Try

            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, Update_Codice_obiettivo_gestionale_Impegno, parms, -1)

            registra_AttivitaContabile(codiceDocumento, "UPCOG", oOperatore, trans)
            registra_AttivitaContabile(codiceDocumento, "UPPdCF", oOperatore, trans)
            trans.Commit()

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try

        Return returnValue
    End Function
    Function FO_Update_COG_And_PdCF_Preimpegno(ByVal idProg As Long, ByVal CodObGest As String, ByVal CodPdCF As String, ByVal codiceDocumento As String, ByVal codOperatore As String) As Integer


        Dim Update_Codice_obiettivo_gestionale_preimpegno As String = " UPDATE  [Documento_preimpegno] " & _
     " SET [Di_CodObGestionale] = " & param_CodObGest & _
     "     ,[Di_Operatore] =  " & param_Operatore & _
     "     ,[Di_DataRegistrazione] = " & param_DataRegistrazione & _
     "     ,[Di_PCF] = " & param_PCF & _
      " WHERE [Di_Documento] = " & param_id_Documento & " AND [Di_prog]= " & param_Prog_Contabilita



        '   Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Dim parms(5) As SqlParameter
        parms(0) = New SqlParameter(param_CodObGest, SqlDbType.VarChar)
        parms(0).Value = CodObGest
        parms(1) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(1).Value = codOperatore
        parms(2) = New SqlParameter(param_Prog_Contabilita, SqlDbType.BigInt)
        parms(2).Value = idProg
        parms(3) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
        parms(3).Value = Now 'item.Dli_DataRegistrazione
        parms(4) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(4).Value = codiceDocumento
        parms(5) = New SqlParameter(param_PCF, SqlDbType.VarChar)
        parms(5).Value = CodPdCF


        Log.Debug("iddoc:" & codiceDocumento & " op:" & codOperatore)

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlClient.SqlTransaction = conn.BeginTransaction
        Dim returnValue As Integer = 0
        Try

            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, Update_Codice_obiettivo_gestionale_preimpegno, parms, -1)

            registra_AttivitaContabile(codiceDocumento, "UPCOG", oOperatore, trans)
            registra_AttivitaContabile(codiceDocumento, "UPPdCF", oOperatore, trans)
            trans.Commit()

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try

        Return returnValue
    End Function
    Private Sub registra_AttivitaContabile(ByVal idDocumento As String, ByVal tipoAttivita As String, ByVal operatore As DllAmbiente.Operatore, ByRef trans As SqlTransaction, Optional ByVal note As String = "", Optional ByVal tipoAttivitaAlternativa As String = "")
        Try


            Dim attivitaContabile As New DllDocumentale.ItemAttivita
            If Not String.IsNullOrEmpty(tipoAttivitaAlternativa) Then
                attivitaContabile.Sto_TipoAttivita = tipoAttivitaAlternativa
            Else
                attivitaContabile.Sto_TipoAttivita = "CONTABILE_" & tipoAttivita
            End If
            attivitaContabile.Sto_Info_Attivita = ""
            attivitaContabile.Sto_id_Doc = idDocumento
            attivitaContabile.Sto_Nominativo = operatore.Cognome & " " & operatore.Nome
            attivitaContabile.Sto_Data = Now
            attivitaContabile.Sto_note = note
            attivitaContabile.Sto_Ufficio = operatore.oUfficio.CodUfficio
            attivitaContabile.Sto_Utente = operatore.Codice
            FO_Registra_Attivita_object(attivitaContabile, trans)

            Dim statoIstanza As DllDocumentale.StatoIstanzaDocumentoInfo = Get_StatoIstanzaDocumento(idDocumento)

            If (statoIstanza.LivelloUfficio = "UP") Or ((statoIstanza.LivelloUfficio = "UDD") And statoIstanza.CodiceUfficio = operatore.oUfficio.CodUfficio) Then
                'quando viene salvato il documento, deve invalidare tutte le firme precedenti, cancellando l'elenco certificati di firme
                Dim vFunzione(Dic_FODocumentale.dimvc_Cancella_Allegato_Fisicamente) As Object
                vFunzione(DllDocumentale.Dic_FODocumentale.vc_Cancella_Allegato_Fisicamente.c_idAllegato) = ""
                vFunzione(DllDocumentale.Dic_FODocumentale.vc_Cancella_Allegato_Fisicamente.c_idDocumento) = idDocumento
                vFunzione(DllDocumentale.Dic_FODocumentale.vc_Cancella_Allegato_Fisicamente.c_tipologiaAllegato) = "16"
                FO_Cancella_Allegato_Fisicamente(vFunzione)
                Dim vFunzione2(DllDocumentale.Dic_FODocumentale.dimvc_Registra_Compito) As Object
                vFunzione2(DllDocumentale.Dic_FODocumentale.vc_Registra_Compito.c_idDocumento) = idDocumento

                'modifico tutti i ruoli specifici
                FO_Update_Compiti_Specifici_to_Generici(vFunzione2)
            End If
        Catch ex As Exception
            Log.Error("Problemi con la registrazione dell'attività di storico -" & ex.Message)
            Throw ex
        End Try


    End Sub
    Function DefinisciFlusso(ByVal tipoApplic As String) As String
        Dim flusso As String = ""
        Select Case tipoApplic
            Case "0"
                flusso = "DETERMINE"
            Case "1"
                flusso = "DELIBERE"
            Case "2"
                flusso = "DISPOSIZIONI"
            Case "3"
                flusso = "DECRETI"
            Case "4"
                flusso = "ORDINANZE"
        End Select
        Return flusso
    End Function

    Public Sub Numera(ByVal idDocumentoLocale As String, ByVal operatore As DllAmbiente.Operatore, ByVal tipoApplicazione As Integer, Optional ByVal destinatarioInoltro As Integer = -1)
        Const SFunzione As String = "Numera"
        Log.Info(Now & " - " & oOperatore.Codice & " - " & SFunzione)
        Dim SQLQ As String
        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim rdr As SqlClient.SqlDataReader

        Try

            Dim vr As Object = Leggi_StatoIstanza_WFE(idDocumentoLocale, oOperatore.Codice)

            If vr(0) <> 0 Then
                Log.Error("Errore nella lettura di Leggi_StatoIstanza_WFE")

            End If
            If LCase(vr(1)(2)) & "" <> LCase(operatore.Codice) Then
                Log.Error("L'utente non ha più in carico il documento")

            End If

            nodoFlussoDetermina = vr(1)(0) & ""
            nodoFlussoUfficio = vr(1)(1) & ""
            attore = vr(1)(2) & ""

            Dim flusso As String = DefinisciFlusso(tipoApplicazione)

            ' MEV 2.2012: Alcuni uffici (attualmente solo autorità di gestione) possono 
            ' scegliere di saltare la dirigenza del dipartimento. In questo caso la numerazione 
            ' del documento deve avvenire alla firma del dirigente proponente. 
            If oOperatore.oUfficio.Test_Attributo("SCEGLI_DEST_INOLTRO", True) _
                And UCase(nodoFlussoDetermina) = "UFFICIO_PROPONENTE" _
                And UCase(nodoFlussoUfficio) = "RESPONSABILE" _
                And destinatarioInoltro > 0 Then

                nodoFlussoDetermina = "UFFICIO_DIRIGENZA_DIPARTIMENTO"
            End If


            'conto le azioni da fare per questo passo
            SQLQ = "SELECT     count(Awf_attivita) " & _
                 " FROM Azioni_Passo_WorkFlow " & _
                 " WHERE    (Awf_flusso = '" & flusso & " ')  " & _
                 "          AND (Awf_processo = '" & nodoFlussoDetermina & "') " & _
                 "           AND (Awf_sottoProcesso = '" & nodoFlussoUfficio & "') " & _
                 "           AND (Awf_azione = 'FIRMA') "
            Dim i As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(strConn, CommandType.Text, SQLQ, Nothing)

            'se non ci sono azioni per la firma, esco dalla funzione
            If i > 0 Then

                Log.Info(Now & " - " & oOperatore.Codice & " - " & SQLQ)
                'leggo le azioni da fare in questo passo
                SQLQ = "SELECT     Awf_attivita, Awf_nomeAttivita, Awf_nomeOggetto, Awf_dataBase , Awf_parametri " & _
                       " FROM Azioni_Passo_WorkFlow " & _
                       " WHERE    (Awf_flusso = '" & flusso & " ')  " & _
                       "          AND (Awf_processo = '" & nodoFlussoDetermina & "') " & _
                       "           AND (Awf_sottoProcesso = '" & nodoFlussoUfficio & "') " & _
                       "           AND (Awf_azione = 'FIRMA') " & _
                       " ORDER BY Awf_ordine "

                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, SQLQ, Nothing)
                Log.Info(Now & " - " & oOperatore.Codice & " - " & SQLQ)
                Dim arrayAttivita As Array = Array.CreateInstance(GetType(String), 5, i)

                i = 0
                While rdr.Read()
                    arrayAttivita.SetValue(rdr.GetValue(0), 0, i)
                    arrayAttivita.SetValue(rdr.GetValue(1), 1, i)
                    arrayAttivita.SetValue(rdr.GetValue(2), 2, i)
                    arrayAttivita.SetValue(rdr.GetValue(3), 3, i)
                    arrayAttivita.SetValue(rdr.GetValue(4), 4, i)
                    i = i + 1
                End While

                Attivita = arrayAttivita
                rdr.Close()
                'eseguo i passi
                i = 0
                idDocumento = idDocumentoLocale
                While Errore = 0 And i <= nAttivita
                    Esegui_Attivita(i)
                    i = i + 1
                End While
            End If

        Catch ex As Exception
            Log.Error(Now & " - " & oOperatore.Codice & " - " & ex.Message)
            rdr.Close()
        End Try

    End Sub
    Public Function Numerare(ByVal idDocumentoLocale As String, ByVal operatore As DllAmbiente.Operatore, ByVal tipoApplicazione As Integer) As Boolean
        Const SFunzione As String = "Numerare"
        Log.Info(Now & " - " & oOperatore.Codice & " - " & SFunzione)
        Dim SQLQ As String
        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Try

            Dim vr As Object = Leggi_StatoIstanza_WFE(idDocumentoLocale, oOperatore.Codice)

            If vr(0) <> 0 Then
                Log.Error("Errore nella lettura di Leggi_StatoIstanza_WFE")

            End If
            If LCase(vr(1)(2)) & "" <> LCase(operatore.Codice) Then
                Log.Error("L'utente non ha più in carico il documento")

            End If

            nodoFlussoDetermina = vr(1)(0) & ""
            nodoFlussoUfficio = vr(1)(1) & ""
            attore = vr(1)(2) & ""

            Dim flusso As String = DefinisciFlusso(tipoApplicazione)

            'conto le azioni da fare per questo passo
            SQLQ = "SELECT     count(Awf_attivita) " & _
                 " FROM Azioni_Passo_WorkFlow " & _
                 " WHERE    (Awf_flusso = '" & flusso & " ')  " & _
                 "          AND (Awf_processo = '" & nodoFlussoDetermina & "') " & _
                 "           AND (Awf_sottoProcesso = '" & nodoFlussoUfficio & "') " & _
                 "           AND (Awf_azione = 'FIRMA') "
            Dim i As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(strConn, CommandType.Text, SQLQ, Nothing)


            ' MEV 2.2012: Alcuni uffici (attualmente solo autorità di gestione) possono 
            ' scegliere di saltare la dirigenza del dipartimento. In questo caso la numerazione 
            ' del documento deve avvenire alla firma del dirigente proponente. 
            If oOperatore.oUfficio.Test_Attributo("SCEGLI_DEST_INOLTRO", True) _
                And UCase(nodoFlussoDetermina) = "UFFICIO_PROPONENTE" _
                And UCase(nodoFlussoUfficio) = "RESPONSABILE" Then

                i = 1
            End If

            If i > 0 Then
                Return True
            Else
                Return False
            End If

        Catch ex As Exception
            Log.Error(Now & " - " & oOperatore.Codice & " - " & ex.Message)
            Return False
        End Try
        Return False
    End Function
    Friend Function FO_Update_Certificato_Utente(ByVal idDocumentoLocale As String, ByVal operatore_Registrato As String, ByVal certificato As StringBuilder, Optional ByVal trans As SqlTransaction = Nothing) As Object
        Const SFunzione As String = "FO_Update_Certificato_Utente"

        Dim SqlqUpdate As String
        Dim conn As SqlClient.SqlConnection = Nothing

        Dim returnValue As Integer
        Dim parms(3) As SqlParameter
        Dim chiudereConn As Boolean = False

        Try

            Log.Debug(oOperatore.Codice & ": Inizio" & SFunzione)

            If Trim(idDocumentoLocale) = "" Or certificato.ToString = "" Or operatore_Registrato = "" Then
                Throw New Exception(oOperatore.Codice & ": Parametri insufficienti, " + SFunzione)
            End If

            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If


            SqlqUpdate = " UPDATE [Documento_compito_utente]" & _
                        " SET [Dco_certificatoUtente] = " & param_certificatoUtente & _
                        " ,[Dco_DataRegistrazione] = " & param_DataRegistrazione & _
                        " where [Dco_id_Documento]=" & param_id_Documento & "   and [Dco_utente] = " & param_Operatore

            parms(0) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
            parms(0).Value = operatore_Registrato
            parms(1) = New SqlParameter(param_DataRegistrazione, SqlDbType.DateTime)
            parms(1).Value = Now
            parms(2) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
            parms(2).Value = idDocumento
            parms(3) = New SqlParameter(param_certificatoUtente, SqlDbType.VarChar)
            parms(3).Value = certificato.ToString



            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, SqlqUpdate, parms, -1)

            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(operatore_Registrato & ":" & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(operatore_Registrato & ":" & ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
        Return returnValue
    End Function
    Public Function LeggiDettaglioAttivita(ByVal parametriRicercaAttivita As DllDocumentale.ItemAttivita) As Generic.List(Of ItemAttivita)
        Const SFunzione As String = "LeggiDettaglioAttivita"
        Log.Info(Now & " - " & oOperatore.Codice & " - " & SFunzione)
        Dim SQLQ As String
        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim lista As New Generic.List(Of ItemAttivita)
        Dim att As ItemAttivita
        Try

            'conto le azioni da fare per questo passo
            SQLQ = "SELECT [Sto_id_Doc],[Sto_Prog],[Sto_Utente],[Sto_Ufficio],[Sto_Data],[Sto_TipoAttivita],[Sto_Info_Attivita]" & _
                 "   ,[Sto_attivita_corrente],[Sto_idAllegato],[Sto_Nominativo],[Sto_Livello],[Sto_Ruolo],[Sto_note] " & _
                 " FROM Azioni_Utente_Documento "
            Dim sqlWhere As String = ""
            If Not String.IsNullOrEmpty(parametriRicercaAttivita.Sto_id_Doc) Then
                sqlWhere = sqlWhere & IIf(sqlWhere.Contains("where"), " and ", " where ")
                sqlWhere = sqlWhere & " [Sto_id_Doc] = '" & parametriRicercaAttivita.Sto_id_Doc & "' "
            End If
            If Not String.IsNullOrEmpty(parametriRicercaAttivita.Sto_idAllegato) Then
                sqlWhere = sqlWhere & IIf(sqlWhere.Contains("where"), " and ", " where ")
                sqlWhere = sqlWhere & " [Sto_idAllegato] = '" & parametriRicercaAttivita.Sto_idAllegato & "' "
            End If
            If Not String.IsNullOrEmpty(parametriRicercaAttivita.Sto_Info_Attivita) Then
                sqlWhere = sqlWhere & IIf(sqlWhere.Contains("where"), " and ", " where ")
                sqlWhere = sqlWhere & " [Sto_Info_Attivita] like '" & parametriRicercaAttivita.Sto_Info_Attivita & "' "
            End If
            If Not String.IsNullOrEmpty(parametriRicercaAttivita.Sto_Livello) Then
                sqlWhere = sqlWhere & IIf(sqlWhere.Contains("where"), " and ", " where ")
                sqlWhere = sqlWhere & " [Sto_Livello] = '" & parametriRicercaAttivita.Sto_Livello & "' "
            End If
            If Not String.IsNullOrEmpty(parametriRicercaAttivita.Sto_Nominativo) Then
                sqlWhere = sqlWhere & IIf(sqlWhere.Contains("where"), " and ", " where ")
                sqlWhere = sqlWhere & " [Sto_Nominativo] = '" & parametriRicercaAttivita.Sto_Nominativo & "' "
            End If
            If Not String.IsNullOrEmpty(parametriRicercaAttivita.Sto_note) Then
                sqlWhere = sqlWhere & IIf(sqlWhere.Contains("where"), " and ", " where ")
                sqlWhere = sqlWhere & " [Sto_note] = '" & parametriRicercaAttivita.Sto_note & "' "
            End If
            If parametriRicercaAttivita.Sto_Prog > 0 Then
                sqlWhere = sqlWhere & IIf(sqlWhere.Contains("where"), " and ", " where ")
                sqlWhere = sqlWhere & " [Sto_Prog] = " & parametriRicercaAttivita.Sto_Prog & " "
            End If
            If Not String.IsNullOrEmpty(parametriRicercaAttivita.Sto_Ruolo) Then
                sqlWhere = sqlWhere & IIf(sqlWhere.Contains("where"), " and ", " where ")
                sqlWhere = sqlWhere & " [Sto_Ruolo] = '" & parametriRicercaAttivita.Sto_Ruolo & "' "
            End If
            If Not String.IsNullOrEmpty(parametriRicercaAttivita.Sto_TipoAttivita) Then
                sqlWhere = sqlWhere & IIf(sqlWhere.Contains("where"), " and ", " where ")
                sqlWhere = sqlWhere & " [Sto_TipoAttivita] = '" & parametriRicercaAttivita.Sto_TipoAttivita & "' "
            End If
            If Not String.IsNullOrEmpty(parametriRicercaAttivita.Sto_Ufficio) Then
                sqlWhere = sqlWhere & IIf(sqlWhere.Contains("where"), " and ", " where ")
                sqlWhere = sqlWhere & " [Sto_Ufficio] = '" & parametriRicercaAttivita.Sto_Ufficio & "' "
            End If
            If Not String.IsNullOrEmpty(parametriRicercaAttivita.Sto_Utente) Then
                sqlWhere = sqlWhere & IIf(sqlWhere.Contains("where"), " and ", " where ")
                sqlWhere = sqlWhere & " [Sto_Utente] = '" & parametriRicercaAttivita.Sto_Utente & "' "
            End If
            If Not String.IsNullOrEmpty(sqlWhere) Then
                SQLQ = SQLQ & sqlWhere
            End If
            SQLQ = SQLQ & " order by Sto_Prog desc"
            Dim rdr As SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, SQLQ, Nothing)
            While rdr.Read()
                att = New ItemAttivita
                att.Sto_id_Doc = rdr.GetString(0)
                att.Sto_Prog = rdr.GetInt32(1)
                If Not rdr.IsDBNull(2) Then att.Sto_Utente = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then att.Sto_Ufficio = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then att.Sto_Data = rdr.GetDateTime(4)
                If Not rdr.IsDBNull(5) Then att.Sto_TipoAttivita = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then att.Sto_Info_Attivita = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then att.Sto_attivita_corrente = rdr.GetByte(7)
                If Not rdr.IsDBNull(8) Then att.Sto_idAllegato = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then att.Sto_Nominativo = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then att.Sto_Livello = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then att.Sto_Ruolo = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then att.Sto_note = rdr.GetString(12)
                lista.Add(att)
            End While
            rdr.Close()

        Catch ex As Exception
            Log.Error(Now & " - " & oOperatore.Codice & " - " & ex.Message)
        End Try
        Return lista
    End Function

    ''' <summary>
    ''' Metodo che effettua la insert in Documento_Attributo 
    ''' </summary>
    ''' <param name="opOperazione">Operatore che effettua l'inserimento</param>
    ''' <param name="Doc_attributo">Oggetto Documento_Attributo (contenente codice attributo, valore e oggetto di riferimento)</param>
    ''' <param name="trans">transazione da utilizzare</param>
    ''' <remarks></remarks>
    Sub FO_Insert_DocumentoAttributo(ByVal opOperazione As DllAmbiente.Operatore, ByVal Doc_attributo As DllDocumentale.Documento_attributo, Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim insert_attributo As String = "INSERT INTO [Documento_Attributo]  " & _
        " ([Doc_Id],[Ente],[Cod_Attributo],[Valore]) " & _
        "  VALUES (@IdDocumento,@ente,@cod_Attributo,@valore)"

        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If
            Dim parms(4) As SqlParameter
            parms(0) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
            parms(0).Value = Doc_attributo.Doc_id
            parms(1) = New SqlParameter(param_Ente, SqlDbType.VarChar)
            parms(1).Value = Doc_attributo.Ente
            parms(2) = New SqlParameter(param_Ruolo, SqlDbType.VarChar)
            parms(2).Value = Doc_attributo.Cod_attributo
            parms(3) = New SqlParameter(param_codAttributo, SqlDbType.VarChar)
            parms(3).Value = Doc_attributo.Cod_attributo
            parms(4) = New SqlParameter(param_Valore, SqlDbType.VarChar)
            parms(4).Value = Doc_attributo.Valore
            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, insert_attributo, parms, -1)
            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(opOperazione.Codice & ":" & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(opOperazione.Codice & ":" & ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub

    ''' <summary>
    ''' Metodo che ricerca tutti gli attributi per un documento restituendone il valore
    ''' </summary>
    ''' <param name="criteriRicerca"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function FO_Get_Documento_Attributi(ByVal criteriRicerca As DllDocumentale.Documento_attributo) As Collections.Generic.List(Of Documento_attributo)
        If Not criteriRicerca Is Nothing Then

            Dim lista As New Generic.List(Of Documento_attributo)
            Dim doc_attr As New Documento_attributo

            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
            Dim Sqlq As String = ""
            Dim SqlqWhere As String = ""


            Sqlq = " SELECT [Doc_Id] ,[Ente],[Cod_Attributo],[Valore] FROM  [Documento_Attributo]"



            Dim param(4) As SqlClient.SqlParameter
            Dim indiceParametriEffettivi As Integer = -1
            If Not String.IsNullOrEmpty(criteriRicerca.Doc_id) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = criteriRicerca.Doc_id
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND [Doc_Id]=" & param_id_Documento, " WHERE  [Doc_Id]=" & param_id_Documento)
            End If
            If Not String.IsNullOrEmpty(criteriRicerca.Ente) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter(Dic_FODocumentale.param_Ente, SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = criteriRicerca.Ente
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND [Ente]=" & param_Ente, " WHERE  [Ente]=" & param_Ente)
            End If
            If Not String.IsNullOrEmpty(criteriRicerca.Cod_attributo) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter(Dic_FODocumentale.param_codAttributo, SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = criteriRicerca.Cod_attributo
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND Cod_Attributo=" & param_codAttributo, " WHERE  Cod_Attributo=" & param_codAttributo)
            End If

            If Not String.IsNullOrEmpty(criteriRicerca.Valore) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter(Dic_FODocumentale.param_Valore, SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = criteriRicerca.Valore
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND Valore=" & param_Valore, " WHERE  Valore=" & param_Valore)
            End If

            ReDim Preserve param(indiceParametriEffettivi)
            Dim rdr As SqlClient.SqlDataReader
            Sqlq = Sqlq & SqlqWhere
            Try

                rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


                While rdr.Read()
                    doc_attr = New Documento_attributo
                    If Not rdr.IsDBNull(0) Then doc_attr.Doc_id = rdr.GetString(0)
                    If Not rdr.IsDBNull(1) Then doc_attr.Ente = rdr.GetString(1)
                    If Not rdr.IsDBNull(2) Then doc_attr.Cod_attributo = rdr.GetString(2)
                    If Not rdr.IsDBNull(3) Then doc_attr.Valore = rdr.GetString(3)
                    lista.Add(doc_attr)
                End While
                rdr.Close()

            Catch ex As Exception
                Err.Description = ex.Message
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing

            End Try
            Return lista
        Else
            Log.Error(Now & " - " & oOperatore.Codice & "- I criteri non sono stati impostati correttamente, risultano vuoti.")
            Return Nothing
        End If
    End Function


    ''' <summary>
    ''' Metodo che restituisce tutti gli attributi, anche i non compilati, per quelli compilati restiruisce il valore
    ''' </summary>
    ''' <param name="itemAttributo"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function FO_Get_Attributi(ByVal itemAttributo As ItemAttributoInfo) As Collections.Generic.List(Of ItemAttributoInfo)
        If itemAttributo Is Nothing Then
            itemAttributo = New ItemAttributoInfo
            itemAttributo.Ente = "*"
        End If

        Dim lista As New Generic.List(Of ItemAttributoInfo)
        Dim att As ItemAttributoInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Dim SqlqWhere As String = ""
        Sqlq = " SELECT [Oggetto_Riferimento],[Ente],[Codice],[Descrizione],[Tipo_Scelta],[SoggettoARicerca],[VisibileInDocumento],[OrdineApparizione],[Obbligatorio] FROM  [Tab_Attributi] "
        Dim param(4) As SqlClient.SqlParameter
        Dim indiceParametriEffettivi As Integer = -1
        If Not String.IsNullOrEmpty(itemAttributo.Codice) Then
            indiceParametriEffettivi = indiceParametriEffettivi + 1
            param(indiceParametriEffettivi) = New SqlClient.SqlParameter(param_codAttributo, SqlDbType.VarChar)
            param(indiceParametriEffettivi).Value = itemAttributo.Codice
            SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND Codice=" & param_codAttributo, " WHERE  Codice=" & param_codAttributo)
        End If
        If Not String.IsNullOrEmpty(itemAttributo.Descrizione) Then
            indiceParametriEffettivi = indiceParametriEffettivi + 1
            param(indiceParametriEffettivi) = New SqlClient.SqlParameter(Dic_FODocumentale.param_Note, SqlDbType.VarChar)
            param(indiceParametriEffettivi).Value = itemAttributo.Descrizione
            SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND [Descrizione]=" & param_Note, " WHERE  [Descrizione]=" & param_Note)
        End If
        If Not String.IsNullOrEmpty(itemAttributo.Ente) Then
            indiceParametriEffettivi = indiceParametriEffettivi + 1
            param(indiceParametriEffettivi) = New SqlClient.SqlParameter(Dic_FODocumentale.param_Ente, SqlDbType.VarChar)
            param(indiceParametriEffettivi).Value = itemAttributo.Ente
            SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND [Ente]=" & param_Ente, " WHERE  [Ente]=" & param_Ente)
        End If
        If Not String.IsNullOrEmpty(itemAttributo.Oggetto_Riferimento) Then
            indiceParametriEffettivi = indiceParametriEffettivi + 1
            param(indiceParametriEffettivi) = New SqlClient.SqlParameter(Dic_FODocumentale.param_Compito, SqlDbType.VarChar)
            param(indiceParametriEffettivi).Value = itemAttributo.Oggetto_Riferimento
            SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND Oggetto_Riferimento=" & param_Compito, " WHERE  Oggetto_Riferimento=" & param_Compito)
        End If
        Sqlq = Sqlq & SqlqWhere

        ReDim Preserve param(indiceParametriEffettivi)


        Sqlq = Sqlq & " ORDER BY OrdineApparizione "

        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()
                att = New ItemAttributoInfo
                If Not rdr.IsDBNull(0) Then att.Oggetto_Riferimento = rdr.GetString(0)
                If Not rdr.IsDBNull(1) Then att.Ente = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then att.Codice = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then att.Descrizione = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then
                    Dim tipoScelta As New ItemTipoSceltaAttributo
                    tipoScelta.Id = rdr.GetInt64(4)
                    att.Tipo_Scelta = tipoScelta
                End If
                If Not rdr.IsDBNull(5) Then att.SoggettoARicerca = rdr.GetBoolean(5)
                If Not rdr.IsDBNull(6) Then att.VisibileInDocumento = rdr.GetBoolean(6)
                If Not rdr.IsDBNull(7) Then att.OrdineApparizione = rdr.GetInt64(7)
                If Not rdr.IsDBNull(8) Then att.Obbligatorio = rdr.GetBoolean(8)
                lista.Add(att)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing

        End Try
        Return lista

    End Function
    ''' <summary>
    ''' Valorizza per l'attributo passato in input la tipologia di input che accetta:
    ''' Scelte (boolean o lista) -> precarica la lista dei valori possibili
    ''' Scelte di testolibero non effettua alcun precaricamento
    ''' </summary>
    ''' <param name="ItemAttributo"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Function Get_SceltePossibili(ByVal ItemAttributo As ItemAttributoInfo) As ItemAttributoInfo
        If ItemAttributo Is Nothing Then
            Log.Debug(Now & "- : Codice Attributo non indicato")
            Return Nothing
        End If

        Dim listascelte As New Generic.List(Of ItemSceltaPossibile)
        Dim att As ItemAttributoInfo = Nothing

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = " SELECT Tab_TipoScelta_Attributo.id, Tab_TipoScelta_Attributo.TipoDato" & _
        " from Tab_Attributi INNER JOIN Tab_TipoScelta_Attributo ON Tab_Attributi.Tipo_Scelta = Tab_TipoScelta_Attributo.Id "

        Dim param(0) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter(param_codAttributo, SqlDbType.VarChar)
        param(0).Value = ItemAttributo.Codice
        Sqlq = Sqlq & " WHERE Tab_Attributi.Codice=" & param_codAttributo

        Dim rdr As SqlClient.SqlDataReader
        Dim tipodato As String = ""


        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()
                tipodato = rdr.GetInt64(0)
                Select Case tipodato
                    Case 0
                        'testo libero - tipodato string
                        ItemAttributo.ListaSceltePossibili = Nothing
                        ItemAttributo.Tipo_Scelta = New ItemTipoSceltaAttributo
                        ItemAttributo.Tipo_Scelta.TipoDato = rdr.GetString(1)
                    Case 1
                        'scelta alternativa - lista
                        ItemAttributo.ListaSceltePossibili = Get_ScelteAttributo(ItemAttributo)
                        ItemAttributo.Tipo_Scelta = New ItemTipoSceltaAttributo
                        ItemAttributo.Tipo_Scelta.TipoDato = rdr.GetString(1)
                    Case 2
                        'si/no - boolean
                        ItemAttributo.ListaSceltePossibili = get_scelteBooleane(ItemAttributo.Codice)
                        ItemAttributo.Tipo_Scelta = New ItemTipoSceltaAttributo
                        ItemAttributo.Tipo_Scelta.TipoDato = rdr.GetString(1)
                    Case 3
                        'Data - datetime
                        ItemAttributo.ListaSceltePossibili = Nothing
                        ItemAttributo.Tipo_Scelta = New ItemTipoSceltaAttributo
                        ItemAttributo.Tipo_Scelta.TipoDato = rdr.GetString(1)
                    Case 4
                        'tutte le altre
                        ItemAttributo.ListaSceltePossibili = Nothing
                        ItemAttributo.Tipo_Scelta = New ItemTipoSceltaAttributo
                        ItemAttributo.Tipo_Scelta.TipoDato = rdr.GetString(1)
                    Case Else
                        'tutte le altre
                        ItemAttributo.ListaSceltePossibili = Nothing
                        ItemAttributo.Tipo_Scelta = New ItemTipoSceltaAttributo
                        ItemAttributo.Tipo_Scelta.TipoDato = rdr.GetString(1)
                End Select
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing

        End Try
        Return ItemAttributo

    End Function
    ''' <summary>
    ''' Funzione che precarica le tipologie booleane
    ''' </summary>
    ''' <param name="codAttributo"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function get_scelteBooleane(ByVal codAttributo As String) As Generic.List(Of ItemSceltaPossibile)
        Dim lista As New Generic.List(Of ItemSceltaPossibile)
        Dim itemsceltaSI As New ItemSceltaPossibile
        itemsceltaSI.ID = 1
        itemsceltaSI.Cod_attributo = codAttributo
        itemsceltaSI.Valore = "SI"
        lista.Add(itemsceltaSI)
        Dim itemsceltaNO As New ItemSceltaPossibile
        itemsceltaNO.ID = 0
        itemsceltaNO.Cod_attributo = codAttributo
        itemsceltaNO.Valore = "NO"
        lista.Add(itemsceltaNO)
        Return lista
    End Function
    ''' <summary>
    ''' Funziona che precarica le possibile scelte in caso di tipologia Attributo come lista.
    ''' Effettua una query su Attributi_Dominio_Scelte
    ''' </summary>
    ''' <param name="ItemAttributo">Indica l'Attributo per cui si vuole valorizzare il dominio di scelte</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Function Get_ScelteAttributo(ByVal ItemAttributo As ItemAttributoInfo) As Generic.List(Of ItemSceltaPossibile)
        If ItemAttributo Is Nothing Then
            Log.Debug(Now & "- : Codice Attributo non indicato")
            Return Nothing
        End If

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT     Attributi_Dominio_Scelte.Id, Attributi_Dominio_Scelte.Codice_Attributo, Attributi_Dominio_Scelte.PossibileValore" & _
        " from Tab_Attributi INNER JOIN   Attributi_Dominio_Scelte ON Tab_Attributi.Codice = Attributi_Dominio_Scelte.Codice_Attributo"

        Dim param(0) As SqlClient.SqlParameter
        param(0) = New SqlClient.SqlParameter(param_codAttributo, SqlDbType.VarChar)
        param(0).Value = ItemAttributo.Codice
        Sqlq = Sqlq & " WHERE Attributi_Dominio_Scelte.Codice_Attributo=" & param_codAttributo
        Sqlq = Sqlq & " AND Attributi_Dominio_Scelte.Attivo = 1"
        Dim rdr As SqlClient.SqlDataReader
        Dim itemscelta As ItemSceltaPossibile

        Dim lista As New Generic.List(Of ItemSceltaPossibile)
        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()
                itemscelta = New ItemSceltaPossibile
                If Not rdr.IsDBNull(0) Then itemscelta.ID = rdr.GetInt64(0)
                If Not rdr.IsDBNull(1) Then itemscelta.Cod_attributo = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then itemscelta.Valore = rdr.GetString(2)
                lista.Add(itemscelta)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing

        End Try
        Return lista

    End Function
    ''' <summary>
    ''' Metodo che effettua l'aggiornamento di un valore di un attributo già precednetemente caricato.
    ''' </summary>
    ''' <param name="opOperazione"></param>
    ''' <param name="Doc_attributo"></param>
    ''' <param name="trans"></param>
    ''' <remarks></remarks>
    Sub FO_Update_DocumentoAttributo(ByVal opOperazione As DllAmbiente.Operatore, ByVal Doc_attributo As DllDocumentale.Documento_attributo, Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim update_attributo As String = "UPDATE [Documento_Attributo]  " & _
        " SET [Valore] = @valore " & _
        " where Doc_Id=@IdDocumento and Ente=@ente and Cod_Attributo=@cod_Attributo"

        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If
            Dim parms(4) As SqlParameter
            parms(0) = New SqlParameter(param_Valore, SqlDbType.VarChar)
            parms(0).Value = Doc_attributo.Valore
            parms(1) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
            parms(1).Value = Doc_attributo.Doc_id
            parms(2) = New SqlParameter(param_Ente, SqlDbType.VarChar)
            parms(2).Value = Doc_attributo.Ente
            parms(3) = New SqlParameter(param_Ruolo, SqlDbType.VarChar)
            parms(3).Value = Doc_attributo.Cod_attributo
            parms(4) = New SqlParameter(param_codAttributo, SqlDbType.VarChar)
            parms(4).Value = Doc_attributo.Cod_attributo

            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, update_attributo, parms, -1)
            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(opOperazione.Codice & ":" & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(opOperazione.Codice & ":" & ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub
    ''' <summary>
    ''' Metodo che registra l'attività in Azione_Utente_Documento
    ''' </summary>
    ''' <param name="itemAttivita">Oggetto Attività da registrare</param>
    ''' <param name="trans">Transazione da utilizzare</param>
    ''' <remarks></remarks>
    Public Sub FO_Registra_Attivita_object(ByVal itemAttivita As DllDocumentale.ItemAttivita, ByRef trans As SqlTransaction)
        Const SFunzione As String = "FO_Registra_Attivita_object"
        Dim attivitaCorrente As Integer
        Dim chiudereTRans As Boolean = False
        Dim conn As SqlConnection
        If trans Is Nothing Then
            chiudereTRans = True
            conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
            conn.Open()
            trans = conn.BeginTransaction
        End If
        Dim Sqlq As String
        Try
            Dim oAttore As DllAmbiente.Operatore
            If itemAttivita Is Nothing Then
                Throw New Exception("Parametri insufficienti - Attivita nulla, " + SFunzione)
            End If
            If Trim(itemAttivita.Sto_id_Doc) = "" Then
                Throw New Exception("Parametri insufficienti - Iddocumento nullo, " + SFunzione)
            End If
            If Trim(oOperatore.Codice) = "" Then
                Throw New Exception("Parametri insufficienti - Operatore nullo, " + SFunzione)
            End If

            If Not IsDate(itemAttivita.Sto_Data) Then
                itemAttivita.Sto_Data = Now.Date
            End If
            If String.IsNullOrEmpty(itemAttivita.Sto_Livello) Or String.IsNullOrEmpty(itemAttivita.Sto_Livello) Then
                Dim objStato As DllDocumentale.StatoIstanzaDocumentoInfo = Get_StatoIstanzaDocumento(itemAttivita.Sto_id_Doc)
                itemAttivita.Sto_Livello = objStato.LivelloUfficio
                itemAttivita.Sto_Ruolo = objStato.Ruolo
            End If

            Dim progAttivita As Integer
            Sqlq = " update Azioni_Utente_Documento set  Sto_attivita_corrente=0  WHERE Sto_id_Doc = '" & itemAttivita.Sto_id_Doc & "'  "

            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, Sqlq, Nothing)
            Sqlq = "  SELECT     max (Sto_Prog) + 1 " & _
               "        " & _
               " FROM         Azioni_Utente_Documento " & _
               " WHERE Sto_id_Doc = '" & itemAttivita.Sto_id_Doc & "' "

            Using rdr As SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(trans, CommandType.Text, Sqlq, Nothing)
                While rdr.Read()
                    progAttivita = rdr(0)
                End While

            End Using
            Dim utente2 As Object = oOperatore.Codice
            Dim ufficio2 As Object = oOperatore.oUfficio.CodUfficio
            If Not String.IsNullOrEmpty(itemAttivita.Sto_Utente) OrElse itemAttivita.Sto_Utente <> oOperatore.Codice Then
                utente2 = itemAttivita.Sto_Utente
                ufficio2 = itemAttivita.Sto_Ufficio
            End If


            If (itemAttivita.Sto_TipoAttivita = "INOLTRO") Or (itemAttivita.Sto_TipoAttivita = "ASSEGNA") Or (itemAttivita.Sto_TipoAttivita = "RIGETTO") Then
                itemAttivita.Sto_attivita_corrente = 0
            Else
                itemAttivita.Sto_attivita_corrente = 1
            End If

            If String.IsNullOrEmpty(pDescrizioneAttore) Then
                pDescrizioneAttore = itemAttivita.Sto_Nominativo & ""
            End If

            If itemAttivita.Sto_attivita_corrente Then
                attivitaCorrente = 1
            Else
                attivitaCorrente = 0
            End If
            Dim sqlInsert As String = " INSERT INTO [Azioni_Utente_Documento] " & _
                    "([Sto_id_Doc],[Sto_Prog],[Sto_Utente],[Sto_Ufficio],[Sto_Data],[Sto_TipoAttivita],[Sto_Info_Attivita]  ,[Sto_attivita_corrente],[Sto_idAllegato],[Sto_Nominativo], [Sto_Livello], [Sto_Ruolo], [Sto_Note]) " & _
            "  VALUES ('" & itemAttivita.Sto_id_Doc & "','" & progAttivita & "','" & utente2 & "','" & ufficio2 & "',@data,'" & itemAttivita.Sto_TipoAttivita & "','" & itemAttivita.Sto_Info_Attivita & "','" & attivitaCorrente & "','" & itemAttivita.Sto_idAllegato & "','" & pDescrizioneAttore.ToString().Replace("'", "''") & "','" & itemAttivita.Sto_Livello & "','" & itemAttivita.Sto_Ruolo & "','" & itemAttivita.Sto_note & "')"

            Dim parms(0) As SqlParameter

            parms(0) = New SqlParameter("@data", SqlDbType.DateTime)
            parms(0).Value = itemAttivita.Sto_Data


            Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sqlInsert, parms)

            If (itemAttivita.Sto_TipoAttivita = "INOLTRO") Or (itemAttivita.Sto_TipoAttivita = "ASSEGNA") Or (itemAttivita.Sto_TipoAttivita = "RIGETTO") Then

                progAttivita = progAttivita + 1
                If pDirU <> "D" Then
                    oAttore = New DllAmbiente.Operatore
                    oAttore.Codice = pProssimoAttore
                    utente2 = oAttore.Codice
                    ufficio2 = oAttore.oUfficio.CodUfficio
                    itemAttivita.Sto_TipoAttivita = "ARRIVOWL"
                Else
                    utente2 = pProssimoAttore
                    ufficio2 = pProssimoAttore
                    itemAttivita.Sto_TipoAttivita = "ARRIVOUF"
                End If


                attivitaCorrente = 1

                Dim sqlInsert2 As String = " INSERT INTO [Azioni_Utente_Documento] " & _
                   "([Sto_id_Doc],[Sto_Prog],[Sto_Utente],[Sto_Ufficio],[Sto_Data],[Sto_TipoAttivita],[Sto_Info_Attivita]  ,[Sto_attivita_corrente],[Sto_idAllegato],[Sto_Nominativo],  [Sto_Note]) " & _
           "  VALUES ('" & itemAttivita.Sto_id_Doc & "','" & progAttivita & "','" & utente2 & "','" & ufficio2 & "',@data,'" & itemAttivita.Sto_TipoAttivita & "','" & itemAttivita.Sto_Info_Attivita & "','" & attivitaCorrente & "','" & itemAttivita.Sto_idAllegato & "','" & pDescrizioneProssimoAttore.ToString().Replace("'", "''") & "','" & itemAttivita.Sto_note & "')"

                Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sqlInsert2, parms)

            End If

        Catch ex As Exception
            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Log.Error(ex.Message)
            Throw New Exception(ex.Message)
        Finally
            If chiudereTRans Then
                trans.Commit()
                If Not conn.State = ConnectionState.Closed Then
                    conn.Close()
                End If
            End If

        End Try
    End Sub
    ''' <summary>
    ''' Il metodo salva il valore dell'attributo in Documento_Attributo e registra l'attività nello storico, così da modificiare la versione
    ''' </summary>
    ''' <param name="itemAttributo">Oggetto Attributo (chiave/valore) da registrare</param>
    ''' <param name="operatore">Operatore che effettua l'operazione</param>
    ''' <remarks></remarks>
    Public Sub FO_Registra_Attributo(ByVal itemAttributo As DllDocumentale.Documento_attributo, ByVal operatore As DllAmbiente.Operatore, Optional ByVal trans As SqlTransaction = Nothing)
        Const SFunzione As String = "FO_Registra_Attributo"

        Dim vRitPar(3) As Object


        Dim conn As SqlClient.SqlConnection = Nothing

        If itemAttributo Is Nothing Then
            Throw New Exception("Parametri insufficienti - Attributo nullo, " + SFunzione)
        End If
        If operatore Is Nothing Then
            Throw New Exception("Parametri insufficienti - Operatore nullo, " + SFunzione)
        End If
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If
            Log.Debug(operatore.Codice & " - Inizio" & SFunzione)

            If Trim(itemAttributo.Doc_id) = "" Then
                Throw New Exception("Parametri insufficienti - IdDocumento nullo, " + SFunzione)
            End If
            If Trim(itemAttributo.Cod_attributo) = "" Then
                Throw New Exception("Parametri insufficienti - Codice Attributo nullo, " + SFunzione)
            End If

            'conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
            'conn.Open()
            'trans = conn.BeginTransaction

            Dim itemRicercato As New DllDocumentale.Documento_attributo
            itemRicercato.Doc_id = itemAttributo.Doc_id
            itemRicercato.Cod_attributo = itemAttributo.Cod_attributo
            itemRicercato.Ente = itemAttributo.Ente
            Dim lista As Generic.List(Of DllDocumentale.Documento_attributo) = FO_Get_Documento_Attributi(itemRicercato)
            If lista.Count > 0 Then
                itemRicercato = lista.Item(0)
                itemRicercato.Valore = itemAttributo.Valore
                FO_Update_DocumentoAttributo(oOperatore, itemRicercato, trans)
            Else
                itemRicercato = New Documento_attributo
                itemRicercato.Doc_id = itemAttributo.Doc_id
                itemRicercato.Cod_attributo = itemAttributo.Cod_attributo
                itemRicercato.Ente = itemAttributo.Ente
                itemRicercato.Valore = itemAttributo.Valore
                FO_Insert_DocumentoAttributo(operatore, itemRicercato, trans)
            End If
            Dim itemAttivita As New DllDocumentale.ItemAttivita
            itemAttivita.Sto_TipoAttivita = "IMMISDATI"
            itemAttivita.Sto_Info_Attivita = ""
            itemAttivita.Sto_id_Doc = itemAttributo.Doc_id
            itemAttivita.Sto_Data = Now
            itemAttivita.Sto_Nominativo = oOperatore.Cognome & " " & oOperatore.Nome
            itemAttivita.Sto_note = "attr:" & itemAttributo.Cod_attributo & "- valore:" & itemAttributo.Valore
            FO_Registra_Attivita_object(itemAttivita, trans)

            If chiudereConn Then
                trans.Commit()
            End If



        Catch ex As Exception
            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Log.Error(ex.Message)
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
            Log.Debug(operatore.Codice & ":Fine " & SFunzione)
        End Try
    End Sub
    ''' <summary>
    ''' Il metodo restituisce un arraylist contenente le tutte le tipologie di pagamento, o quella specificata nel paramentro ID  
    ''' Legge questa info nella tabella Tab_TipoPagamentoSIC
    ''' </summary>
    ''' <returns>arraylist tipologie di pagamenti</returns>
    ''' <remarks></remarks>
    Public Function GetTipologiePagamentoSIC(Optional ByVal idTipologia As Integer = -1) As Generic.List(Of DllDocumentale.TipoPagamentoInfo)

        Dim listaTipologiePagamenti As New Generic.List(Of DllDocumentale.TipoPagamentoInfo)
        Dim objTipologiaPagamento As DllDocumentale.TipoPagamentoInfo

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT    Id, Descrizione, ObbligoCC, ObbligoIBAN, Preferiti, OrdineApparizione, IstitutoRiferimento, Attivo, DataDisattivazione " &
        " FROM   Tab_TipoPagamentoSIC "

        Sqlq = Sqlq & " where Attivo = 'True' "

        If idTipologia > 0 Then
            Sqlq = Sqlq & " AND Id = " & idTipologia
        End If
        Sqlq = Sqlq & " order by  OrdineApparizione "

        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)

            While rdr.Read()
                objTipologiaPagamento = New DllDocumentale.TipoPagamentoInfo
                If Not rdr.IsDBNull(0) Then objTipologiaPagamento.Id = rdr.GetInt32(0)
                If Not rdr.IsDBNull(1) Then objTipologiaPagamento.Descrizione = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then objTipologiaPagamento.ObbligoCC = rdr.GetBoolean(2)
                If Not rdr.IsDBNull(3) Then objTipologiaPagamento.ObbligoIBAN = rdr.GetBoolean(3)
                If Not rdr.IsDBNull(4) Then objTipologiaPagamento.Preferiti = rdr.GetBoolean(4)
                If Not rdr.IsDBNull(5) Then objTipologiaPagamento.OrdineApparizione = rdr.GetInt32(5)
                If Not rdr.IsDBNull(6) Then objTipologiaPagamento.IstitutoRiferimento = rdr.GetString(6)

                If Not rdr.IsDBNull(7) Then objTipologiaPagamento.Attivo = rdr.GetBoolean(7)
                If Not rdr.IsDBNull(8) Then objTipologiaPagamento.DataDisattivazione = rdr.GetDateTime(8)

                listaTipologiePagamenti.Add(objTipologiaPagamento)
            End While
            rdr.Close()
        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing

        End Try
        Return listaTipologiePagamenti

    End Function
    ''' <summary>
    ''' Metodo che effettua la insert in Documento_Liquidazione_Beneficiario
    ''' </summary>
    ''' <param name="opOperazione">Operatore che effettua l'inserimento</param>
    ''' <param name="trans">transazione da utilizzare</param>
    ''' <remarks></remarks>
    Sub FO_Insert_DocumentoLiquidazioneBeneficiario(ByVal opOperazione As DllAmbiente.Operatore, ByVal item As ItemLiquidazioneImpegnoBeneficiarioInfo, Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim insert_documentoLiquidazioneBeneficiario As String = "INSERT INTO [Documento_Liquidazione_Beneficiario]  " & _
            "([Id_Documento] ,[ID_Liquidazione],[N_liquidazione],[Importo_Spettante],[Importo_Pagato]" & _
            ",[FlagPersonaFisica],[CodiceFiscale],[Denominazione],[Partita_Iva],[Sede_Via],[Sede_Comune]" & _
            ",[Sede_Provincia],[ID_ModalitaPag] ,[N_Mandato] ,[IBAN],[ID_Anagrafica],[Data_Operazione]" & _
            ",[Operatore],[IdSede],[IdConto],[CodiceSiope],[CodiceSiopeAggiuntivo],[CUP],[CIG]" & _
            ",[EsenzCommBonifico],[StampaAvviso],[Bollo],[ImponibileIrpef],[RitenuteIrpef] ,[RitenutePrevidenzialiBen] " & _
            ",[AltreRitenute],[ImponibilePrevidenziale],[RitenutePrevidenzialiEnte],[AddizionaleComunale],[AddizionaleRegionale],[IdContratto], [NumeroRepertorioContratto], [isDatoSensibile], [ProgFatturaLiq]) " & _
            " VALUES (@Id_Documento,@ID_Liquidazione,@N_liquidazione,@Importo_Spettante,@Importo_Pagato,@FlagPersonaFisica, @CodiceFiscale, " & _
            " @Denominazione, @Partita_Iva, @Sede_Via, @Sede_Comune, @Sede_Provincia, @ID_ModalitaPag, @N_Mandato, @IBAN, @ID_Anagrafica, @Data_Operazione, @Operatore, " & _
            " @IdSede,@IdConto,@CodiceSiope, @CodiceSiopeAggiuntivo,@CUP, @CIG , @EsenzCommBonifico, @StampaAvviso, @Bollo,@ImponibileIrpef, @RitenuteIrpef,@RitenutePrevidenzialiBen,   " & _
            " @AltreRitenute,@ImponibilePrevidenziale, @RitenutePrevidenzialiEnte,@AddizionaleComunale, @AddizionaleRegionale, @IdContratto, @NumeroRepertorioContratto, @isDatoSensibile, @ProgFatturaLiq )"

        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If
            Dim parms(41) As SqlParameter

            parms(0) = New SqlParameter("@Id_Documento", SqlDbType.VarChar)
            parms(0).Value = item.IdDocumento & ""
            parms(1) = New SqlParameter("@ID_Liquidazione", SqlDbType.BigInt)
            parms(1).Value = item.IDDocumentoContabile
            parms(2) = New SqlParameter("@N_liquidazione", SqlDbType.VarChar)
            parms(2).Value = item.NDocumentoContabile & ""
            parms(3) = New SqlParameter("@Importo_Spettante", SqlDbType.Float)
            parms(3).Value = item.ImportoSpettante
            parms(4) = New SqlParameter("@Importo_Pagato", SqlDbType.Float)
            parms(4).Value = item.ImportoPagato
            parms(5) = New SqlParameter("@FlagPersonaFisica", SqlDbType.Bit)
            parms(5).Value = item.FlagPersonaFisica
            parms(6) = New SqlParameter("@CodiceFiscale", SqlDbType.VarChar)
            parms(6).Value = item.CodiceFiscale & ""
            parms(7) = New SqlParameter("@ID_ModalitaPag", SqlDbType.Int)
            parms(7).Value = item.IdModalitaPag
            parms(8) = New SqlParameter("@EsenzCommBonifico", SqlDbType.Bit)
            parms(8).Value = item.EsenzCommBonifico
            parms(9) = New SqlParameter("@StampaAvviso", SqlDbType.Bit)
            parms(9).Value = item.StampaAvviso
            parms(10) = New SqlParameter("@Bollo", SqlDbType.Bit)
            parms(10).Value = item.Bollo
            parms(11) = New SqlParameter("@Data_Operazione", SqlDbType.DateTime)
            parms(11).Value = Now
            Dim indiceEffettivo As Integer = 11
            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@IBAN", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.Iban & ""
            Dim modalitaPagamento As Generic.List(Of DllDocumentale.TipoPagamentoInfo) = GetTipologiePagamentoSIC(item.IdModalitaPag)
            If modalitaPagamento.Count = 0 Then
                Throw New Exception("Modalità di pagamento non valida ")
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@Denominazione", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.Denominazione & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@Partita_Iva", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.PartitaIva & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@Sede_Via", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.SedeVia & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@Sede_Comune", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.SedeComune & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@Sede_Provincia", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.SedeProvincia & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@N_Mandato", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.NMandato & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@ID_Anagrafica", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.IdAnagrafica & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@Operatore", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.Operatore & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@IdSede", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.IdSede & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@IdConto", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.IdConto & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@CodiceSiopeAggiuntivo", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.CodiceSiopeAggiuntivo & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@CodiceSiope", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.CodiceSiope & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@CUP", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.Cup & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@CIG", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.Cig & ""


            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@ImponibileIrpef", SqlDbType.Float)
            If item.ImponibileIrpef > 0 Then
                parms(indiceEffettivo).Value = item.ImponibileIrpef
            Else
                parms(indiceEffettivo).Value = 0
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@RitenuteIrpef", SqlDbType.Float)
            If item.RitenuteIrpef > 0 Then
                parms(indiceEffettivo).Value = item.RitenuteIrpef
            Else
                parms(indiceEffettivo).Value = 0
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@RitenutePrevidenzialiBen", SqlDbType.Float)
            If item.RitenutePrevidenzialiBen > 0 Then
                parms(indiceEffettivo).Value = item.RitenutePrevidenzialiBen
            Else
                parms(indiceEffettivo).Value = 0
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@AltreRitenute", SqlDbType.Float)
            If item.AltreRitenute > 0 Then
                parms(indiceEffettivo).Value = item.AltreRitenute
            Else
                parms(indiceEffettivo).Value = 0
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@ImponibilePrevidenziale", SqlDbType.Float)
            If item.ImponibilePrevidenziale > 0 Then
                parms(indiceEffettivo).Value = item.ImponibilePrevidenziale
            Else
                parms(indiceEffettivo).Value = 0
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@RitenutePrevidenzialiEnte", SqlDbType.Float)
            If item.RitenutePrevidenzialiEnte > 0 Then
                parms(indiceEffettivo).Value = item.RitenutePrevidenzialiEnte
            Else
                parms(indiceEffettivo).Value = 0
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@AddizionaleComunale", SqlDbType.Float)
            If item.AddizionaleComunale > 0 Then
                parms(indiceEffettivo).Value = item.AddizionaleComunale
            Else
                parms(indiceEffettivo).Value = 0
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@AddizionaleRegionale", SqlDbType.Float)
            If item.AddizionaleRegionale > 0 Then
                parms(indiceEffettivo).Value = item.AddizionaleRegionale
            Else
                parms(indiceEffettivo).Value = 0
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@IdContratto", SqlDbType.NVarChar)
            If Not item.IdContratto Is Nothing AndAlso item.IdContratto.Trim() <> String.Empty Then
                parms(indiceEffettivo).Value = item.IdContratto
            Else
                parms(indiceEffettivo).Value = String.Empty
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@NumeroRepertorioContratto", SqlDbType.NVarChar)
            If Not item.NumeroRepertorioContratto Is Nothing AndAlso item.NumeroRepertorioContratto.Trim() <> String.Empty Then
                parms(indiceEffettivo).Value = item.NumeroRepertorioContratto
            Else
                parms(indiceEffettivo).Value = String.Empty
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@isDatoSensibile", SqlDbType.Bit)
            parms(indiceEffettivo).Value = item.IsDatoSensibile

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@ProgFatturaLiq", SqlDbType.BigInt)
            If item.ProgFatturaLiq = 0 Then
                parms(indiceEffettivo).Value = DBNull.Value
            Else
                parms(indiceEffettivo).Value = item.ProgFatturaLiq
            End If


            ReDim Preserve parms(indiceEffettivo)

            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, insert_documentoLiquidazioneBeneficiario, parms, -1)
            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(opOperazione.Codice & ":" & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(opOperazione.Codice & ":" & ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub
    ''' <summary>
    ''' Metodo che effettua la insert in Documento_Liquidazione_Beneficiario
    ''' </summary>
    ''' <param name="opOperazione">Operatore che effettua l'inserimento</param>
    ''' <param name="trans">transazione da utilizzare</param>
    ''' <remarks></remarks>
    Sub FO_Insert_DocumentoImpegnoBeneficiario(ByVal opOperazione As DllAmbiente.Operatore, ByVal item As ItemLiquidazioneImpegnoBeneficiarioInfo, Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim insert_documentoImpegnoBeneficiario As String = "INSERT INTO [Documento_Impegno_Beneficiario]  " &
            "([Id_Documento] ,[ID_Impegno],[N_Impegno],[Importo_Spettante]" &
            ",[FlagPersonaFisica],[CodiceFiscale],[Denominazione],[Partita_Iva],[Sede_Via],[Sede_Comune]" &
            ",[Sede_Provincia],[ID_ModalitaPag] ,[IBAN],[ID_Anagrafica],[Data_Operazione]" &
            ",[Operatore],[IdSede],[IdConto],[CodiceSiope],[CodiceSiopeAggiuntivo],[CUP],[CIG]" &
            ",[EsenzCommBonifico],[StampaAvviso],[Bollo],[ImponibileIrpef],[RitenuteIrpef] ,[RitenutePrevidenzialiBen] " &
            ",[AltreRitenute],[ImponibilePrevidenziale],[RitenutePrevidenzialiEnte],[AddizionaleComunale],[AddizionaleRegionale],[IdContratto], [NumeroRepertorioContratto], [isDatoSensibile]) " &
            " VALUES (@Id_Documento,@ID_Impegno,@N_Impegno,@Importo_Spettante,@FlagPersonaFisica, @CodiceFiscale, " &
            " @Denominazione, @Partita_Iva, @Sede_Via, @Sede_Comune, @Sede_Provincia, @ID_ModalitaPag, @IBAN, @ID_Anagrafica, @Data_Operazione, @Operatore, " &
            " @IdSede,@IdConto,@CodiceSiope, @CodiceSiopeAggiuntivo,@CUP, @CIG , @EsenzCommBonifico, @StampaAvviso, @Bollo,@ImponibileIrpef, @RitenuteIrpef,@RitenutePrevidenzialiBen,   " &
            " @AltreRitenute,@ImponibilePrevidenziale, @RitenutePrevidenzialiEnte,@AddizionaleComunale, @AddizionaleRegionale, @IdContratto, @NumeroRepertorioContratto, @isDatoSensibile )"

        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If
            Dim parms(41) As SqlParameter

            parms(0) = New SqlParameter("@Id_Documento", SqlDbType.VarChar)
            parms(0).Value = item.IdDocumento & ""
            parms(1) = New SqlParameter("@ID_Impegno", SqlDbType.BigInt)
            parms(1).Value = item.IDDocumentoContabile
            parms(2) = New SqlParameter("@N_Impegno", SqlDbType.VarChar)
            parms(2).Value = item.NDocumentoContabile & ""
            parms(3) = New SqlParameter("@Importo_Spettante", SqlDbType.Float)
            parms(3).Value = item.ImportoSpettante
            parms(4) = New SqlParameter("@FlagPersonaFisica", SqlDbType.Bit)
            parms(4).Value = item.FlagPersonaFisica
            parms(5) = New SqlParameter("@CodiceFiscale", SqlDbType.VarChar)
            parms(5).Value = item.CodiceFiscale & ""
            parms(6) = New SqlParameter("@ID_ModalitaPag", SqlDbType.Int)
            parms(6).Value = item.IdModalitaPag
            parms(7) = New SqlParameter("@EsenzCommBonifico", SqlDbType.Bit)
            parms(7).Value = item.EsenzCommBonifico
            parms(8) = New SqlParameter("@StampaAvviso", SqlDbType.Bit)
            parms(8).Value = item.StampaAvviso
            parms(9) = New SqlParameter("@Bollo", SqlDbType.Bit)
            parms(9).Value = item.Bollo
            parms(10) = New SqlParameter("@Data_Operazione", SqlDbType.DateTime)
            parms(10).Value = Now
            Dim indiceEffettivo As Integer = 10
            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@IBAN", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.Iban & ""
            Dim modalitaPagamento As Generic.List(Of DllDocumentale.TipoPagamentoInfo) = GetTipologiePagamentoSIC(item.IdModalitaPag)
            If modalitaPagamento.Count = 0 Then
                Throw New Exception("Modalità di pagamento non valida ")
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@Denominazione", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.Denominazione & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@Partita_Iva", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.PartitaIva & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@Sede_Via", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.SedeVia & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@Sede_Comune", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.SedeComune & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@Sede_Provincia", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.SedeProvincia & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@ID_Anagrafica", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.IdAnagrafica & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@Operatore", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.Operatore & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@IdSede", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.IdSede & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@IdConto", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.IdConto & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@CodiceSiopeAggiuntivo", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.CodiceSiopeAggiuntivo & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@CodiceSiope", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.CodiceSiope & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@CUP", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.Cup & ""

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@CIG", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.Cig & ""


            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@ImponibileIrpef", SqlDbType.Float)
            If item.ImponibileIrpef > 0 Then
                parms(indiceEffettivo).Value = item.ImponibileIrpef
            Else
                parms(indiceEffettivo).Value = 0
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@RitenuteIrpef", SqlDbType.Float)
            If item.RitenuteIrpef > 0 Then
                parms(indiceEffettivo).Value = item.RitenuteIrpef
            Else
                parms(indiceEffettivo).Value = 0
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@RitenutePrevidenzialiBen", SqlDbType.Float)
            If item.RitenutePrevidenzialiBen > 0 Then
                parms(indiceEffettivo).Value = item.RitenutePrevidenzialiBen
            Else
                parms(indiceEffettivo).Value = 0
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@AltreRitenute", SqlDbType.Float)
            If item.AltreRitenute > 0 Then
                parms(indiceEffettivo).Value = item.AltreRitenute
            Else
                parms(indiceEffettivo).Value = 0
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@ImponibilePrevidenziale", SqlDbType.Float)
            If item.ImponibilePrevidenziale > 0 Then
                parms(indiceEffettivo).Value = item.ImponibilePrevidenziale
            Else
                parms(indiceEffettivo).Value = 0
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@RitenutePrevidenzialiEnte", SqlDbType.Float)
            If item.RitenutePrevidenzialiEnte > 0 Then
                parms(indiceEffettivo).Value = item.RitenutePrevidenzialiEnte
            Else
                parms(indiceEffettivo).Value = 0
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@AddizionaleComunale", SqlDbType.Float)
            If item.AddizionaleComunale > 0 Then
                parms(indiceEffettivo).Value = item.AddizionaleComunale
            Else
                parms(indiceEffettivo).Value = 0
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@AddizionaleRegionale", SqlDbType.Float)
            If item.AddizionaleRegionale > 0 Then
                parms(indiceEffettivo).Value = item.AddizionaleRegionale
            Else
                parms(indiceEffettivo).Value = 0
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@IdContratto", SqlDbType.NVarChar)
            If Not item.IdContratto Is Nothing AndAlso item.IdContratto.Trim() <> String.Empty Then
                parms(indiceEffettivo).Value = item.IdContratto
            Else
                parms(indiceEffettivo).Value = String.Empty
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@NumeroRepertorioContratto", SqlDbType.NVarChar)
            If Not item.NumeroRepertorioContratto Is Nothing AndAlso item.NumeroRepertorioContratto.Trim() <> String.Empty Then
                parms(indiceEffettivo).Value = item.NumeroRepertorioContratto
            Else
                parms(indiceEffettivo).Value = String.Empty
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@isDatoSensibile", SqlDbType.Bit)
            parms(indiceEffettivo).Value = item.IsDatoSensibile

            ReDim Preserve parms(indiceEffettivo)

            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, insert_documentoImpegnoBeneficiario, parms, -1)
            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(opOperazione.Codice & ":" & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(opOperazione.Codice & ":" & ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub
    ''' <summary>
    ''' Metodo che effettua la insert in Documento_Liquidazione_Beneficiario
    ''' </summary>
    ''' <param name="opOperazione">Operatore che effettua l'inserimento</param>
    ''' <param name="trans">transazione da utilizzare</param>
    ''' <remarks></remarks>
    Sub FO_Delete_DocumentoLiquidazioneBeneficiario(ByVal opOperazione As DllAmbiente.Operatore, ByVal item As ItemLiquidazioneImpegnoBeneficiarioInfo, Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim delete_documentoLiquidazioneBeneficiario As String = "DELETE from [Documento_Liquidazione_Beneficiario]  " & _
        " where [Id_Documento] =@IdDocumento "
        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If
            Dim parms(6) As SqlParameter
            Dim indiceEffettivo As Integer = 0
            parms(0) = New SqlParameter("@IdDocumento", SqlDbType.VarChar)
            parms(0).Value = item.IdDocumento
            If item.NDocumentoContabile <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@N_liquidazione", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.NDocumentoContabile
                delete_documentoLiquidazioneBeneficiario = delete_documentoLiquidazioneBeneficiario & " AND N_liquidazione= @N_liquidazione "
            End If
            If item.CodiceFiscale <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@CodiceFiscale", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.CodiceFiscale
                delete_documentoLiquidazioneBeneficiario = delete_documentoLiquidazioneBeneficiario & " AND CodiceFiscale= @CodiceFiscale "
            End If
            If item.IdAnagrafica <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@ID_Anagrafica", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.IdAnagrafica
                delete_documentoLiquidazioneBeneficiario = delete_documentoLiquidazioneBeneficiario & " AND ID_Anagrafica= @ID_Anagrafica "

            End If
            If item.IDDocumentoContabile > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@IDLiquidazione", SqlDbType.Int)
                parms(indiceEffettivo).Value = item.IDDocumentoContabile
                delete_documentoLiquidazioneBeneficiario = delete_documentoLiquidazioneBeneficiario & " AND ID_Liquidazione= @IDLiquidazione "
            End If
            If item.ID > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@ID", SqlDbType.Int)
                parms(indiceEffettivo).Value = item.ID
                delete_documentoLiquidazioneBeneficiario = delete_documentoLiquidazioneBeneficiario & " AND ID= @ID "
            End If
            ReDim Preserve parms(indiceEffettivo)

            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, delete_documentoLiquidazioneBeneficiario, parms, -1)
            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(opOperazione.Codice & ":" & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(opOperazione.Codice & ":" & ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub
    Sub FO_Delete_DocumentoImpegnoBeneficiario(ByVal opOperazione As DllAmbiente.Operatore, ByVal item As ItemLiquidazioneImpegnoBeneficiarioInfo, Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim delete_documentoImpegnoBeneficiario As String = "DELETE from [Documento_Impegno_Beneficiario]  " &
        " where [Id_Documento] =@IdDocumento "
        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If
            Dim parms(6) As SqlParameter
            Dim indiceEffettivo As Integer = 0
            parms(0) = New SqlParameter("@IdDocumento", SqlDbType.VarChar)
            parms(0).Value = item.IdDocumento
            If item.NDocumentoContabile <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@N_impegno", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.NDocumentoContabile
                delete_documentoImpegnoBeneficiario = delete_documentoImpegnoBeneficiario & " AND N_impegno= @N_impegno "
            End If
            If item.CodiceFiscale <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@CodiceFiscale", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.CodiceFiscale
                delete_documentoImpegnoBeneficiario = delete_documentoImpegnoBeneficiario & " AND CodiceFiscale= @CodiceFiscale "
            End If
            If item.IdAnagrafica <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@ID_Anagrafica", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.IdAnagrafica
                delete_documentoImpegnoBeneficiario = delete_documentoImpegnoBeneficiario & " AND ID_Anagrafica= @ID_Anagrafica "

            End If
            If item.IDDocumentoContabile > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@IDImpegno", SqlDbType.Int)
                parms(indiceEffettivo).Value = item.IDDocumentoContabile
                delete_documentoImpegnoBeneficiario = delete_documentoImpegnoBeneficiario & " AND ID_Impegno= @IDImpegno "
            End If
            If item.ID > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@ID", SqlDbType.Int)
                parms(indiceEffettivo).Value = item.ID
                delete_documentoImpegnoBeneficiario = delete_documentoImpegnoBeneficiario & " AND ID= @ID "
            End If
            ReDim Preserve parms(indiceEffettivo)

            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, delete_documentoImpegnoBeneficiario, parms, -1)
            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(opOperazione.Codice & ":" & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(opOperazione.Codice & ":" & ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub
    ''' <summary>
    ''' Metodo che effettua la update in Documento_Liquidazione_Beneficiario
    ''' </summary>
    ''' <param name="opOperazione">Operatore che effettua l'inserimento</param>
    ''' <param name="trans">transazione da utilizzare</param>
    ''' <remarks></remarks>
    Sub FO_Update_DocumentoLiquidazioneBeneficiario(ByVal opOperazione As DllAmbiente.Operatore, ByVal item As ItemLiquidazioneImpegnoBeneficiarioInfo, Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim update_documentoLiquidazioneBeneficiario As String = "UPDATE [Documento_Liquidazione_Beneficiario]  "
        Dim sqlSetParametri As String = "SET"
        If item.ID <= 0 Then
            Log.Error("Aggiornamento non effettuato in quanto non è stata individuata la liquidazione ID non valorizzato")
            Throw New Exception("Aggiornamento non effettuato in quanto non è stata individuata la liquidazione")
        End If
        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If
            Dim indiceEffettivo As Integer = -1
            Dim parms(40) As SqlParameter

            If Not String.IsNullOrEmpty(item.IdDocumento) Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Id_Documento", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.IdDocumento
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Id_Documento] = @Id_Documento", " , [Id_Documento] = @Id_Documento ")
            End If
            If Not String.IsNullOrEmpty(item.NDocumentoContabile) Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@N_liquidazione", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.NDocumentoContabile
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [N_liquidazione]= @N_liquidazione ", " ,[N_liquidazione]= @N_liquidazione  ")
            End If
            If item.ImportoSpettante > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Importo_Spettante", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.ImportoSpettante
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Importo_Spettante]= @Importo_Spettante  ", " ,[Importo_Spettante]= @Importo_Spettante   ")
            End If
            If item.ImportoPagato > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Importo_Pagato", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.ImportoPagato
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Importo_Pagato]= @Importo_Pagato  ", " ,[Importo_Pagato]= @Importo_Pagato   ")
            End If
            If Not String.IsNullOrEmpty(item.IdAnagrafica) Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@FlagPersonaFisica", SqlDbType.Bit)
                parms(indiceEffettivo).Value = item.FlagPersonaFisica
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [FlagPersonaFisica] = @FlagPersonaFisica  ", " ,[FlagPersonaFisica] = @FlagPersonaFisica   ")
            End If
            If Not String.IsNullOrEmpty(item.CodiceFiscale) Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@CodiceFiscale", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.CodiceFiscale
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), "  [CodiceFiscale] = @CodiceFiscale  ", "  ,[CodiceFiscale] = @CodiceFiscale ")
            End If
            If item.IdModalitaPag > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@ID_ModalitaPag", SqlDbType.Int)
                parms(indiceEffettivo).Value = item.IdModalitaPag
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [ID_ModalitaPag] =  @ID_ModalitaPag", " ,[ID_ModalitaPag] =  @ID_ModalitaPag  ")
            End If
            If item.IDDocumentoContabile > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@ID_Liquidazione", SqlDbType.BigInt)
                parms(indiceEffettivo).Value = item.IDDocumentoContabile
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [ID_Liquidazione] =  @ID_Liquidazione", " ,[ID_Liquidazione] =  @ID_Liquidazione  ")
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@Data_Operazione", SqlDbType.DateTime)
            parms(indiceEffettivo).Value = Now
            sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Data_Operazione] = @Data_Operazione  ", " ,[Data_Operazione] = @Data_Operazione   ")

            If Not String.IsNullOrEmpty(item.IdAnagrafica) Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@EsenzCommBonifico", SqlDbType.Bit)
                parms(indiceEffettivo).Value = item.EsenzCommBonifico
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [EsenzCommBonifico] = @EsenzCommBonifico   ", " ,[EsenzCommBonifico] = @EsenzCommBonifico   ")

                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@StampaAvviso", SqlDbType.Bit)
                parms(indiceEffettivo).Value = item.StampaAvviso
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [StampaAvviso] = @StampaAvviso  ", " ,[StampaAvviso] = @StampaAvviso   ")
            End If
            If Not String.IsNullOrEmpty(item.IdSede) Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Bollo", SqlDbType.Bit)
                parms(indiceEffettivo).Value = item.Bollo
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Bollo] = @Bollo ", " ,[Bollo] = @Bollo   ")

                Dim modalitaPagamento As Generic.List(Of DllDocumentale.TipoPagamentoInfo) = GetTipologiePagamentoSIC(item.IdModalitaPag)
                If modalitaPagamento.Count > 0 Then
                    Dim tipoPagamento As DllDocumentale.TipoPagamentoInfo = modalitaPagamento.Item(0)
                    If tipoPagamento.ObbligoIBAN Then
                        If item.Iban = "" Then
                            Throw New Exception("IBAN Obbligatorio ")
                        End If
                    End If
                Else
                    Throw New Exception("Modalità di pagamento non valida ")
                End If
            End If
            If Not String.IsNullOrEmpty(item.Iban) Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@IBAN", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.Iban
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [IBAN] = @IBAN ", " ,[IBAN] = @IBAN  ")
            End If
            If item.Denominazione <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Denominazione", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.Denominazione
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Denominazione] = @Denominazione ", " ,[Denominazione] = @Denominazione")
            End If
            If item.PartitaIva <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Partita_Iva", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.PartitaIva
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Partita_Iva] = @Partita_Iva ", " ,[Partita_Iva] = @Partita_Iva ")
            End If
            If item.SedeVia <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Sede_Via", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.SedeVia
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Sede_Via]= @Sede_Via ", " ,[Sede_Via]= @Sede_Via ")
            End If
            If item.SedeComune <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Sede_Comune", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.SedeComune
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Sede_Comune]= @Sede_Comune ", " ,[Sede_Comune]= @Sede_Comune ")
            End If
            If item.SedeProvincia <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Sede_Provincia", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.SedeProvincia
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Sede_Provincia]= @Sede_Provincia ", " ,[Sede_Provincia]= @Sede_Provincia ")
            End If
            If item.NMandato <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@N_Mandato", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.NMandato
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [N_Mandato]= @N_Mandato ", " ,[N_Mandato]= @N_Mandato ")
            End If
            If item.IdAnagrafica <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@ID_Anagrafica", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.IdAnagrafica
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [ID_Anagrafica]= @ID_Anagrafica ", " ,[ID_Anagrafica]= @ID_Anagrafica ")
            End If
            If item.Operatore <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Operatore", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.Operatore
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Operatore]= @Operatore ", " ,[Operatore]= @Operatore ")
            End If
            If item.IdSede <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@IdSede", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.IdSede
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [IdSede]= @IdSede ", " ,[IdSede]= @IdSede ")
            End If
            If item.IdConto <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@IdConto", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.IdConto
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [IdConto]= @IdConto ", " ,[IdConto]= @IdConto ")
            End If
            If item.CodiceSiope <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@CodiceSiope", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.CodiceSiope
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [CodiceSiope]= @CodiceSiope ", " ,[CodiceSiope]= @CodiceSiope ")
            End If
            If item.CodiceSiopeAggiuntivo <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@CodiceSiopeAggiuntivo", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.CodiceSiopeAggiuntivo
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [CodiceSiopeAggiuntivo]= @CodiceSiopeAggiuntivo ", " ,[CodiceSiopeAggiuntivo]= @CodiceSiopeAggiuntivo ")
            End If
            If item.Cup <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Cup", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.Cup
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Cup]= @Cup ", " ,[Cup]= @Cup ")
            End If
            If item.Cig <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Cig", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.Cig
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Cig]= @Cig ", " ,[Cig]= @Cig ")
            End If
            If item.ImponibileIrpef > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@ImponibileIrpef", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.ImponibileIrpef
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [ImponibileIrpef]= @ImponibileIrpef ", " ,[ImponibileIrpef]= @ImponibileIrpef ")
            End If
            If item.RitenuteIrpef > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@RitenuteIrpef", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.RitenuteIrpef
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [RitenuteIrpef]= @RitenuteIrpef ", " ,[RitenuteIrpef]= @RitenuteIrpef ")
            End If
            If item.RitenutePrevidenzialiBen > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@RitenutePrevidenzialiBen", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.RitenutePrevidenzialiBen
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [RitenutePrevidenzialiBen]= @RitenutePrevidenzialiBen ", " ,[RitenutePrevidenzialiBen]= @RitenutePrevidenzialiBen ")
            End If
            If item.AltreRitenute > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@AltreRitenute", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.AltreRitenute
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [AltreRitenute]= @AltreRitenute ", " ,[AltreRitenute]= @AltreRitenute ")
            End If
            If item.ImponibilePrevidenziale > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@ImponibilePrevidenziale", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.ImponibilePrevidenziale
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [ImponibilePrevidenziale]= @ImponibilePrevidenziale ", " ,[ImponibilePrevidenziale]= @ImponibilePrevidenziale ")
            End If
            If item.RitenutePrevidenzialiEnte > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@RitenutePrevidenzialiEnte", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.RitenutePrevidenzialiEnte
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [RitenutePrevidenzialiEnte]= @RitenutePrevidenzialiEnte ", " ,[RitenutePrevidenzialiEnte]= @RitenutePrevidenzialiEnte ")
            End If
            If item.AddizionaleComunale > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@AddizionaleComunale", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.AddizionaleComunale
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [AddizionaleComunale]= @AddizionaleComunale ", " ,[AddizionaleComunale]= @AddizionaleComunale ")
            End If
            If item.AddizionaleRegionale > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@AddizionaleRegionale", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.AddizionaleRegionale
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [AddizionaleRegionale]= @AddizionaleRegionale ", " ,[AddizionaleRegionale]= @AddizionaleRegionale ")
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@IdContratto", SqlDbType.NVarChar)
            parms(indiceEffettivo).Value = IIf(Not item.IdContratto Is Nothing AndAlso item.IdContratto.Trim() <> String.Empty, item.IdContratto, String.Empty)
            sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [IdContratto]= @IdContratto ", " ,[IdContratto]= @IdContratto ")

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@NumeroRepertorioContratto", SqlDbType.NVarChar)
            parms(indiceEffettivo).Value = IIf(Not item.NumeroRepertorioContratto Is Nothing AndAlso item.NumeroRepertorioContratto.Trim() <> String.Empty, item.NumeroRepertorioContratto, String.Empty)
            sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [NumeroRepertorioContratto]= @NumeroRepertorioContratto ", " ,[NumeroRepertorioContratto]= @NumeroRepertorioContratto ")

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@isDatoSensibile", SqlDbType.Bit)
            parms(indiceEffettivo).Value = item.IsDatoSensibile
            sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [isDatoSensibile]= @isDatoSensibile ", " ,[isDatoSensibile]= @isDatoSensibile ")

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@ProgFatturaLiq", SqlDbType.BigInt)
            If item.ProgFatturaLiq = 0 Then
                parms(indiceEffettivo).Value = DBNull.Value
            Else
                parms(indiceEffettivo).Value = item.ProgFatturaLiq
            End If
            sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [ProgFatturaLiq]= @ProgFatturaLiq ", " ,[ProgFatturaLiq]= @ProgFatturaLiq ")

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@Id", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.ID
            update_documentoLiquidazioneBeneficiario = update_documentoLiquidazioneBeneficiario & sqlSetParametri & " WHERE ID= @ID "
            ReDim Preserve parms(indiceEffettivo)
            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, update_documentoLiquidazioneBeneficiario, parms, -1)
            If chiudereConn Then
                trans.Commit()
            End If
            Log.Debug("iddoc:" & item.IdDocumento & " op:" & opOperazione.Codice & " update beneficiario:" & item.IdAnagrafica & " id:" & item.ID)

        Catch ex As Exception
            Log.Error(opOperazione.Codice & ":" & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(opOperazione.Codice & ":" & ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try

    End Sub
    ''' <summary>
    ''' Metodo che effettua la update in Documento_Liquidazione_Beneficiario
    ''' </summary>
    ''' <param name="opOperazione">Operatore che effettua l'inserimento</param>
    ''' <param name="trans">transazione da utilizzare</param>
    ''' <remarks></remarks>
    Sub FO_Update_DocumentoImpegnoBeneficiario(ByVal opOperazione As DllAmbiente.Operatore, ByVal item As ItemLiquidazioneImpegnoBeneficiarioInfo, Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim update_documentoImpegnoBeneficiario As String = "UPDATE [Documento_Impegno_Beneficiario]  "
        Dim sqlSetParametri As String = "SET"
        If item.ID <= 0 Then
            Log.Error("Aggiornamento non effettuato in quanto non è stata individuata la liquidazione ID non valorizzato")
            Throw New Exception("Aggiornamento non effettuato in quanto non è stata individuata la liquidazione")
        End If
        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If
            Dim indiceEffettivo As Integer = -1
            Dim parms(40) As SqlParameter

            If Not String.IsNullOrEmpty(item.IdDocumento) Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Id_Documento", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.IdDocumento
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Id_Documento] = @Id_Documento", " , [Id_Documento] = @Id_Documento ")
            End If
            If Not String.IsNullOrEmpty(item.NDocumentoContabile) Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@N_impegno", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.NDocumentoContabile
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [N_impegno]= @N_impegno ", " ,[N_impegno]= @N_impegno  ")
            End If
            If item.ImportoSpettante > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Importo_Spettante", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.ImportoSpettante
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Importo_Spettante]= @Importo_Spettante  ", " ,[Importo_Spettante]= @Importo_Spettante   ")
            End If
            If Not String.IsNullOrEmpty(item.IdAnagrafica) Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@FlagPersonaFisica", SqlDbType.Bit)
                parms(indiceEffettivo).Value = item.FlagPersonaFisica
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [FlagPersonaFisica] = @FlagPersonaFisica  ", " ,[FlagPersonaFisica] = @FlagPersonaFisica   ")
            End If
            If Not String.IsNullOrEmpty(item.CodiceFiscale) Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@CodiceFiscale", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.CodiceFiscale
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), "  [CodiceFiscale] = @CodiceFiscale  ", "  ,[CodiceFiscale] = @CodiceFiscale ")
            End If
            If item.IdModalitaPag > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@ID_ModalitaPag", SqlDbType.Int)
                parms(indiceEffettivo).Value = item.IdModalitaPag
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [ID_ModalitaPag] =  @ID_ModalitaPag", " ,[ID_ModalitaPag] =  @ID_ModalitaPag  ")
            End If
            If item.IDDocumentoContabile > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@ID_Impegno", SqlDbType.BigInt)
                parms(indiceEffettivo).Value = item.IDDocumentoContabile
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [ID_Impegno] =  @ID_Impegno", " ,[ID_Impegno] =  @ID_Impegno  ")
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@Data_Operazione", SqlDbType.DateTime)
            parms(indiceEffettivo).Value = Now
            sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Data_Operazione] = @Data_Operazione  ", " ,[Data_Operazione] = @Data_Operazione   ")

            If Not String.IsNullOrEmpty(item.IdAnagrafica) Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@EsenzCommBonifico", SqlDbType.Bit)
                parms(indiceEffettivo).Value = item.EsenzCommBonifico
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [EsenzCommBonifico] = @EsenzCommBonifico   ", " ,[EsenzCommBonifico] = @EsenzCommBonifico   ")

                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@StampaAvviso", SqlDbType.Bit)
                parms(indiceEffettivo).Value = item.StampaAvviso
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [StampaAvviso] = @StampaAvviso  ", " ,[StampaAvviso] = @StampaAvviso   ")
            End If
            If Not String.IsNullOrEmpty(item.IdSede) Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Bollo", SqlDbType.Bit)
                parms(indiceEffettivo).Value = item.Bollo
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Bollo] = @Bollo ", " ,[Bollo] = @Bollo   ")

                Dim modalitaPagamento As Generic.List(Of DllDocumentale.TipoPagamentoInfo) = GetTipologiePagamentoSIC(item.IdModalitaPag)
                If modalitaPagamento.Count > 0 Then
                    Dim tipoPagamento As DllDocumentale.TipoPagamentoInfo = modalitaPagamento.Item(0)
                    If tipoPagamento.ObbligoIBAN Then
                        If item.Iban = "" Then
                            Throw New Exception("IBAN Obbligatorio ")
                        End If
                    End If
                Else
                    Throw New Exception("Modalità di pagamento non valida ")
                End If
            End If
            If Not String.IsNullOrEmpty(item.Iban) Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@IBAN", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.Iban
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [IBAN] = @IBAN ", " ,[IBAN] = @IBAN  ")
            End If
            If item.Denominazione <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Denominazione", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.Denominazione
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Denominazione] = @Denominazione ", " ,[Denominazione] = @Denominazione")
            End If
            If item.PartitaIva <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Partita_Iva", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.PartitaIva
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Partita_Iva] = @Partita_Iva ", " ,[Partita_Iva] = @Partita_Iva ")
            End If
            If item.SedeVia <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Sede_Via", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.SedeVia
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Sede_Via]= @Sede_Via ", " ,[Sede_Via]= @Sede_Via ")
            End If
            If item.SedeComune <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Sede_Comune", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.SedeComune
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Sede_Comune]= @Sede_Comune ", " ,[Sede_Comune]= @Sede_Comune ")
            End If
            If item.SedeProvincia <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Sede_Provincia", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.SedeProvincia
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Sede_Provincia]= @Sede_Provincia ", " ,[Sede_Provincia]= @Sede_Provincia ")
            End If
            If item.IdAnagrafica <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@ID_Anagrafica", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.IdAnagrafica
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [ID_Anagrafica]= @ID_Anagrafica ", " ,[ID_Anagrafica]= @ID_Anagrafica ")
            End If
            If item.Operatore <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Operatore", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.Operatore
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Operatore]= @Operatore ", " ,[Operatore]= @Operatore ")
            End If
            If item.IdSede <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@IdSede", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.IdSede
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [IdSede]= @IdSede ", " ,[IdSede]= @IdSede ")
            End If
            If item.IdConto <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@IdConto", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.IdConto
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [IdConto]= @IdConto ", " ,[IdConto]= @IdConto ")
            End If
            If item.CodiceSiope <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@CodiceSiope", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.CodiceSiope
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [CodiceSiope]= @CodiceSiope ", " ,[CodiceSiope]= @CodiceSiope ")
            End If
            If item.CodiceSiopeAggiuntivo <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@CodiceSiopeAggiuntivo", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.CodiceSiopeAggiuntivo
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [CodiceSiopeAggiuntivo]= @CodiceSiopeAggiuntivo ", " ,[CodiceSiopeAggiuntivo]= @CodiceSiopeAggiuntivo ")
            End If
            If item.Cup <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Cup", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.Cup
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Cup]= @Cup ", " ,[Cup]= @Cup ")
            End If
            If item.Cig <> "" Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Cig", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = item.Cig
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [Cig]= @Cig ", " ,[Cig]= @Cig ")
            End If
            If item.ImponibileIrpef > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@ImponibileIrpef", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.ImponibileIrpef
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [ImponibileIrpef]= @ImponibileIrpef ", " ,[ImponibileIrpef]= @ImponibileIrpef ")
            End If
            If item.RitenuteIrpef > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@RitenuteIrpef", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.RitenuteIrpef
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [RitenuteIrpef]= @RitenuteIrpef ", " ,[RitenuteIrpef]= @RitenuteIrpef ")
            End If
            If item.RitenutePrevidenzialiBen > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@RitenutePrevidenzialiBen", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.RitenutePrevidenzialiBen
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [RitenutePrevidenzialiBen]= @RitenutePrevidenzialiBen ", " ,[RitenutePrevidenzialiBen]= @RitenutePrevidenzialiBen ")
            End If
            If item.AltreRitenute > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@AltreRitenute", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.AltreRitenute
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [AltreRitenute]= @AltreRitenute ", " ,[AltreRitenute]= @AltreRitenute ")
            End If
            If item.ImponibilePrevidenziale > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@ImponibilePrevidenziale", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.ImponibilePrevidenziale
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [ImponibilePrevidenziale]= @ImponibilePrevidenziale ", " ,[ImponibilePrevidenziale]= @ImponibilePrevidenziale ")
            End If
            If item.RitenutePrevidenzialiEnte > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@RitenutePrevidenzialiEnte", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.RitenutePrevidenzialiEnte
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [RitenutePrevidenzialiEnte]= @RitenutePrevidenzialiEnte ", " ,[RitenutePrevidenzialiEnte]= @RitenutePrevidenzialiEnte ")
            End If
            If item.AddizionaleComunale > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@AddizionaleComunale", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.AddizionaleComunale
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [AddizionaleComunale]= @AddizionaleComunale ", " ,[AddizionaleComunale]= @AddizionaleComunale ")
            End If
            If item.AddizionaleRegionale > 0 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@AddizionaleRegionale", SqlDbType.Float)
                parms(indiceEffettivo).Value = item.AddizionaleRegionale
                sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [AddizionaleRegionale]= @AddizionaleRegionale ", " ,[AddizionaleRegionale]= @AddizionaleRegionale ")
            End If

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@IdContratto", SqlDbType.NVarChar)
            parms(indiceEffettivo).Value = IIf(Not item.IdContratto Is Nothing AndAlso item.IdContratto.Trim() <> String.Empty, item.IdContratto, String.Empty)
            sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [IdContratto]= @IdContratto ", " ,[IdContratto]= @IdContratto ")

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@NumeroRepertorioContratto", SqlDbType.NVarChar)
            parms(indiceEffettivo).Value = IIf(Not item.NumeroRepertorioContratto Is Nothing AndAlso item.NumeroRepertorioContratto.Trim() <> String.Empty, item.NumeroRepertorioContratto, String.Empty)
            sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [NumeroRepertorioContratto]= @NumeroRepertorioContratto ", " ,[NumeroRepertorioContratto]= @NumeroRepertorioContratto ")

            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@isDatoSensibile", SqlDbType.Bit)
            parms(indiceEffettivo).Value = item.IsDatoSensibile
            sqlSetParametri = sqlSetParametri & IIf(sqlSetParametri.EndsWith("SET"), " [isDatoSensibile]= @isDatoSensibile ", " ,[isDatoSensibile]= @isDatoSensibile ")


            indiceEffettivo = indiceEffettivo + 1
            parms(indiceEffettivo) = New SqlParameter("@Id", SqlDbType.VarChar)
            parms(indiceEffettivo).Value = item.ID
            update_documentoImpegnoBeneficiario = update_documentoImpegnoBeneficiario & sqlSetParametri & " WHERE ID= @ID "
            ReDim Preserve parms(indiceEffettivo)
            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, update_documentoImpegnoBeneficiario, parms, -1)
            If chiudereConn Then
                trans.Commit()
            End If
            Log.Debug("iddoc:" & item.IdDocumento & " op:" & opOperazione.Codice & " update beneficiario:" & item.IdAnagrafica & " id:" & item.ID)

        Catch ex As Exception
            Log.Error(opOperazione.Codice & ":" & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(opOperazione.Codice & ":" & ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try

    End Sub
    Function FO_IsBeneficiarioInLiquidazione(ByVal opOperazione As DllAmbiente.Operatore, ByVal idDocumento As String, ByVal idLiquidazione As String, ByVal idAnagrafica As String, ByVal idSede As String) As String

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            Dim isBeneficiarioLiquidazioneSql As String = "SELECT ID FROM [Documento_Liquidazione_Beneficiario] "

            Dim SqlqWhere As String = ""
            Dim param(2) As SqlClient.SqlParameter
            Dim indiceParametriEffettivi As Integer = -1

            If Not String.IsNullOrEmpty(idDocumento) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@Id_Documento", SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = idDocumento
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND Id_Documento=@Id_Documento", " WHERE Id_Documento=@Id_Documento")
            End If
            ReDim Preserve param(indiceParametriEffettivi + 1)
            If Not String.IsNullOrEmpty(idLiquidazione) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@IDliquidazione", SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = idLiquidazione
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND ID_liquidazione=@IDliquidazione", " WHERE ID_liquidazione=@IDliquidazione")
            End If
            ReDim Preserve param(indiceParametriEffettivi + 1)
            If Not String.IsNullOrEmpty(idAnagrafica) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@ID_Anagrafica", SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = idAnagrafica
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND ID_Anagrafica=@ID_Anagrafica", " WHERE ID_Anagrafica=@ID_Anagrafica")
            End If
            ReDim Preserve param(indiceParametriEffettivi + 1)
            If Not String.IsNullOrEmpty(idSede) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@IdSede", SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = idSede
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND IdSede=@IdSede", " WHERE IdSede=@IdSede")
            End If
            ReDim Preserve param(indiceParametriEffettivi)

            isBeneficiarioLiquidazioneSql = isBeneficiarioLiquidazioneSql & SqlqWhere

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, isBeneficiarioLiquidazioneSql, param)
            Dim retValue As String = Nothing

            While rdr.Read()
                retValue = rdr.GetInt32(0).ToString()
            End While

            rdr.Close()
            Return retValue
        Catch ex As Exception
            If Not rdr Is Nothing Then
                rdr.Close()
            End If
            Log.Error(opOperazione.Codice & ":" & ex.Message)
            Throw New Exception(opOperazione.Codice & ":" & ex.Message)
        End Try
    End Function
    ''' <summary>
    ''' Metodo che effettua una select in Documento_Liquidazione_Beneficiario con parametri iddocumento o n_liquidazione
    ''' </summary>
    ''' <param name="opOperazione">Operatore che effettua l'inserimento</param>
    ''' <param name="idDocumento">identificativo Documento </param>
    ''' <param name="nliquidazione">Numero liquidazione </param>
    ''' <remarks></remarks>
    Public Function FO_Get_ListaBeneficiariLiquidazione(ByVal opOperazione As DllAmbiente.Operatore, Optional ByVal idDocumento As String = "", Optional ByVal Nliquidazione As String = "", Optional ByVal idLiquidazione As String = "", Optional ByVal id As String = "", Optional ByVal idContratto As String = "", Optional ByVal includiSoloBeneficiariConContratto As Boolean = False) As Collections.Generic.List(Of ItemLiquidazioneImpegnoBeneficiarioInfo)

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try
            If String.IsNullOrEmpty(idDocumento) And String.IsNullOrEmpty(Nliquidazione) And String.IsNullOrEmpty(idLiquidazione) And String.IsNullOrEmpty(id) Then
                Log.Error("Criteri di ricerca non presenti per routine FO_Get_ListaBeneficiariLiquidazione")
                Throw New Exception("Criteri di ricerca non presenti per routine FO_Get_ListaBeneficiariLiquidazione")
            End If
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            Dim selectdocumentoLiquidazioneBeneficiario As String = "SELECT Documento_Liquidazione_Beneficiario.ID ,[Id_Documento],[ID_liquidazione],[N_liquidazione],[Importo_Spettante],[Importo_Pagato] ,[FlagPersonaFisica],[CodiceFiscale],[Denominazione]" & _
            "   ,[Partita_Iva],[Sede_Via],[Sede_Comune],[Sede_Provincia],[ID_ModalitaPag], Tab_TipoPagamentoSIC.Descrizione,[N_Mandato],[IBAN],[ID_Anagrafica],[Data_Operazione],[Operatore], " & _
            "   [IdSede] ,[IdConto] ,[CodiceSiope] ,[CodiceSiopeAggiuntivo] " & _
            " ,[CUP],[CIG] ,[EsenzCommBonifico],[StampaAvviso],[Bollo],[ImponibileIrpef]" & _
            " ,[RitenuteIrpef],[RitenutePrevidenzialiBen] ,[AltreRitenute],[ImponibilePrevidenziale]" & _
            " ,[RitenutePrevidenzialiEnte],[AddizionaleComunale],[AddizionaleRegionale]" & _
            " ,Tab_TipoPagamentoSIC.ObbligoCC, Tab_TipoPagamentoSIC.ObbligoIBAN, [IdContratto], [NumeroRepertorioContratto], [isDatoSensibile], [ProgFatturaLiq] " & _
            "   FROM [Documento_Liquidazione_Beneficiario] inner join dbo.Tab_TipoPagamentoSIC on [ID_ModalitaPag]= Tab_TipoPagamentoSIC.Id "

            Dim SqlqWhere As String = ""
            Dim param(2) As SqlClient.SqlParameter
            Dim indiceParametriEffettivi As Integer = -1

            If Not String.IsNullOrEmpty(idDocumento) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@Id_Documento", SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = idDocumento
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND Id_Documento=@Id_Documento", " WHERE Id_Documento=@Id_Documento")
            End If
            If Not String.IsNullOrEmpty(Nliquidazione) AndAlso Integer.Parse(Nliquidazione) <> 0 Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@Nliquidazione", SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = Nliquidazione
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND N_liquidazione=@Nliquidazione", " WHERE N_liquidazione=@Nliquidazione")
            End If
            If Not String.IsNullOrEmpty(idLiquidazione) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@IDliquidazione", SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = idLiquidazione
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND ID_liquidazione=@IDliquidazione", " WHERE ID_liquidazione=@IDliquidazione")
            End If
            If Not String.IsNullOrEmpty(id) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@Id", SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = id
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND Documento_Liquidazione_Beneficiario.ID=@Id", " WHERE Documento_Liquidazione_Beneficiario.ID=@Id")
            End If
            If Not String.IsNullOrEmpty(idContratto) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@IdContratto", SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = idContratto
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND Documento_Liquidazione_Beneficiario.IdContratto=@IdContratto", " WHERE Documento_Liquidazione_Beneficiario.IdContratto=@IdContratto")
            End If
            If includiSoloBeneficiariConContratto Then
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND (Documento_Liquidazione_Beneficiario.IdContratto<>'' and Documento_Liquidazione_Beneficiario.IdContratto is not null)", " WHERE (Documento_Liquidazione_Beneficiario.IdContratto<>'' and Documento_Liquidazione_Beneficiario.IdContratto is not null)")
            End If

            ReDim Preserve param(indiceParametriEffettivi)
            selectdocumentoLiquidazioneBeneficiario = selectdocumentoLiquidazioneBeneficiario & SqlqWhere

            Dim listaBenef As New Collections.Generic.List(Of ItemLiquidazioneImpegnoBeneficiarioInfo)

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, selectdocumentoLiquidazioneBeneficiario, param)
            Dim ben As DllDocumentale.ItemLiquidazioneImpegnoBeneficiarioInfo

            While rdr.Read()
                ben = New DllDocumentale.ItemLiquidazioneImpegnoBeneficiarioInfo
                ben.ID = rdr.GetInt32(0)
                ben.IdDocumento = rdr.GetString(1)
                ben.IDDocumentoContabile = rdr.GetInt64(2)
                ben.NDocumentoContabile = rdr.GetString(3)

                If Not rdr.IsDBNull(4) Then ben.ImportoSpettante = rdr.GetDouble(4)
                If Not rdr.IsDBNull(5) Then ben.ImportoPagato = rdr.GetDouble(5)
                If Not rdr.IsDBNull(6) Then ben.FlagPersonaFisica = rdr.GetBoolean(6)
                If Not rdr.IsDBNull(7) Then ben.CodiceFiscale = rdr.GetString(7)
                If Not rdr.IsDBNull(8) Then ben.Denominazione = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then ben.PartitaIva = "" & rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then ben.SedeVia = "" & rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then ben.SedeComune = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then ben.SedeProvincia = rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then ben.IdModalitaPag = rdr.GetInt32(13)
                If Not rdr.IsDBNull(14) Then ben.DescrizioneModalitaPag = rdr.GetString(14)
                If Not rdr.IsDBNull(15) Then ben.NMandato = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then ben.Iban = rdr.GetString(16)
                If Not rdr.IsDBNull(17) Then ben.IdAnagrafica = rdr.GetString(17)
                If Not rdr.IsDBNull(18) Then ben.DataRegistrazione = rdr.GetDateTime(18)
                If Not rdr.IsDBNull(19) Then ben.Operatore = rdr.GetString(19)
                If Not rdr.IsDBNull(20) Then ben.IdSede = rdr.GetString(20)
                If Not rdr.IsDBNull(21) Then ben.IdConto = rdr.GetString(21)
                If Not rdr.IsDBNull(22) Then ben.CodiceSiope = rdr.GetString(22)
                If Not rdr.IsDBNull(23) Then ben.CodiceSiopeAggiuntivo = rdr.GetString(23)
                If Not rdr.IsDBNull(24) Then ben.Cup = rdr.GetString(24)
                If Not rdr.IsDBNull(25) Then ben.Cig = rdr.GetString(25)
                If Not rdr.IsDBNull(26) Then ben.EsenzCommBonifico = rdr.GetBoolean(26)
                If Not rdr.IsDBNull(27) Then ben.StampaAvviso = rdr.GetBoolean(27)
                If Not rdr.IsDBNull(28) Then ben.Bollo = rdr.GetBoolean(28)
                If Not rdr.IsDBNull(29) Then ben.ImponibileIrpef = rdr.GetDouble(29)
                If Not rdr.IsDBNull(30) Then ben.RitenuteIrpef = rdr.GetDouble(30)
                If Not rdr.IsDBNull(31) Then ben.RitenutePrevidenzialiBen = rdr.GetDouble(31)
                If Not rdr.IsDBNull(32) Then ben.AltreRitenute = rdr.GetDouble(32)
                If Not rdr.IsDBNull(33) Then ben.ImponibilePrevidenziale = rdr.GetDouble(33)
                If Not rdr.IsDBNull(34) Then ben.RitenutePrevidenzialiEnte = rdr.GetDouble(34)
                If Not rdr.IsDBNull(35) Then ben.AddizionaleComunale = rdr.GetDouble(35)
                If Not rdr.IsDBNull(36) Then ben.AddizionaleRegionale = rdr.GetDouble(36)


                Dim obbligoCC As Boolean
                Dim obbligoIBAN As Boolean

                If Not rdr.IsDBNull(37) Then obbligoCC = rdr.GetBoolean(37)
                If Not rdr.IsDBNull(38) Then obbligoIBAN = rdr.GetBoolean(38)

                ben.HasDatiBancari = obbligoCC Or obbligoCC

                If Not rdr.IsDBNull(39) Then ben.IdContratto = rdr.GetString(39)
                If Not rdr.IsDBNull(40) Then ben.NumeroRepertorioContratto = rdr.GetString(40)

                ben.IsDatoSensibile = rdr.GetBoolean(41)
                If Not rdr.IsDBNull(42) Then ben.ProgFatturaLiq = rdr.GetInt64(42)
                listaBenef.Add(ben)
            End While
            rdr.Close()
            Return listaBenef
        Catch ex As Exception
            If Not rdr Is Nothing Then
                rdr.Close()
            End If
            If Not opOperazione Is Nothing Then
                Log.Error(opOperazione.Codice & ":" & ex.Message)
                Throw New Exception(opOperazione.Codice & ":" & ex.Message)
            Else
                Throw New Exception(ex.Message)
            End If
        End Try
    End Function
    ''' <summary>
    ''' Metodo che effettua una select in Documento_Impegno_Beneficiario con parametri iddocumento o NImpegno
    ''' </summary>
    ''' <param name="opOperazione">Operatore che effettua l'inserimento</param>
    ''' <param name="idDocumento">identificativo Documento </param>
    ''' <param name="NImpegno">Numero liquidazione </param>
    ''' <remarks></remarks>
    Public Function FO_Get_ListaBeneficiariImpegno(ByVal opOperazione As DllAmbiente.Operatore, Optional ByVal idDocumento As String = "", Optional ByVal NImpegno As String = "", Optional ByVal idImpegno As String = "", Optional ByVal id As String = "", Optional ByVal idContratto As String = "", Optional ByVal includiSoloBeneficiariConContratto As Boolean = False) As List(Of ItemLiquidazioneImpegnoBeneficiarioInfo)

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Dim listaBeneficiario As New List(Of ItemLiquidazioneImpegnoBeneficiarioInfo)
        Try
            If String.IsNullOrEmpty(idDocumento) And String.IsNullOrEmpty(NImpegno) And String.IsNullOrEmpty(idImpegno) And String.IsNullOrEmpty(id) Then
                Log.Error("Criteri di ricerca non presenti per routine FO_Get_BeneficiarioLiquidazione")
                Throw New Exception("Criteri di ricerca non presenti per routine FO_Get_BeneficiarioLiquidazione")
            End If
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            Dim selectdocumentoImpegnoBeneficiario As String = "SELECT Documento_Impegno_Beneficiario.ID ,[Id_Documento],[ID_Impegno],[N_impegno],[Importo_Spettante], [FlagPersonaFisica],[CodiceFiscale],[Denominazione]" &
            "   ,[Partita_Iva],[Sede_Via],[Sede_Comune],[Sede_Provincia],[ID_ModalitaPag], Tab_TipoPagamentoSIC.Descrizione, [IBAN],[ID_Anagrafica],[Data_Operazione],[Operatore], " &
            "   [IdSede] ,[IdConto] ,[CodiceSiope] ,[CodiceSiopeAggiuntivo] " &
            " ,[CUP],[CIG] ,[EsenzCommBonifico],[StampaAvviso],[Bollo],[ImponibileIrpef]" &
            " ,[RitenuteIrpef],[RitenutePrevidenzialiBen] ,[AltreRitenute],[ImponibilePrevidenziale]" &
            " ,[RitenutePrevidenzialiEnte],[AddizionaleComunale],[AddizionaleRegionale]" &
            " ,Tab_TipoPagamentoSIC.ObbligoCC, Tab_TipoPagamentoSIC.ObbligoIBAN, [IdContratto], [NumeroRepertorioContratto], [isDatoSensibile] " &
            "   FROM [Documento_Impegno_Beneficiario] inner join dbo.Tab_TipoPagamentoSIC on [ID_ModalitaPag]= Tab_TipoPagamentoSIC.Id "

            Dim SqlqWhere As String = ""
            Dim param(2) As SqlClient.SqlParameter
            Dim indiceParametriEffettivi As Integer = -1

            If Not String.IsNullOrEmpty(idDocumento) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@Id_Documento", SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = idDocumento
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND Id_Documento=@Id_Documento", " WHERE Id_Documento=@Id_Documento")
            End If
            If Not String.IsNullOrEmpty(NImpegno) AndAlso Integer.Parse(NImpegno) <> 0 Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@Nimpegno", SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = NImpegno
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND N_impegno=@Nimpegno", " WHERE N_impegno=@Nimpegno")
            End If
            If Not String.IsNullOrEmpty(idImpegno) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@IDimpegno", SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = idImpegno
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND ID_impegno=@IDimpegno", " WHERE ID_impegno=@IDimpegno")
            End If
            If Not String.IsNullOrEmpty(id) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@Id", SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = id
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND Documento_Impegno_Beneficiario.ID=@Id", " WHERE Documento_Impegno_Beneficiario.ID=@Id")
            End If
            If Not String.IsNullOrEmpty(idContratto) Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@IdContratto", SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = idContratto
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND Documento_Impegno_Beneficiario.IdContratto=@IdContratto", " WHERE Documento_Impegno_Beneficiario.IdContratto=@IdContratto")
            End If
            If includiSoloBeneficiariConContratto Then
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND (Documento_Impegno_Beneficiario.IdContratto<>'' and Documento_Impegno_Beneficiario.IdContratto is not null)", " WHERE (Documento_Impegno_Beneficiario.IdContratto<>'' and Documento_Impegno_Beneficiario.IdContratto is not null)")
            End If

            ReDim Preserve param(indiceParametriEffettivi)
            selectdocumentoImpegnoBeneficiario = selectdocumentoImpegnoBeneficiario & SqlqWhere

            Dim beneficiarioImpegno As New ItemLiquidazioneImpegnoBeneficiarioInfo

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, selectdocumentoImpegnoBeneficiario, param)
            Dim ben As DllDocumentale.ItemLiquidazioneImpegnoBeneficiarioInfo = Nothing

            While rdr.Read()
                ben = New DllDocumentale.ItemLiquidazioneImpegnoBeneficiarioInfo
                ben.ID = rdr.GetInt32(0)
                ben.IdDocumento = rdr.GetString(1)
                ben.IDDocumentoContabile = rdr.GetInt64(2)
                ben.NDocumentoContabile = rdr.GetString(3)

                If Not rdr.IsDBNull(4) Then ben.ImportoSpettante = rdr.GetDouble(4)
                If Not rdr.IsDBNull(5) Then ben.FlagPersonaFisica = rdr.GetBoolean(5)
                If Not rdr.IsDBNull(6) Then ben.CodiceFiscale = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then ben.Denominazione = rdr.GetString(7)
                If Not rdr.IsDBNull(8) Then ben.PartitaIva = "" & rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then ben.SedeVia = "" & rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then ben.SedeComune = rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then ben.SedeProvincia = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then ben.IdModalitaPag = rdr.GetInt32(12)
                If Not rdr.IsDBNull(13) Then ben.DescrizioneModalitaPag = rdr.GetString(13)
                If Not rdr.IsDBNull(14) Then ben.Iban = rdr.GetString(14)
                If Not rdr.IsDBNull(15) Then ben.IdAnagrafica = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then ben.DataRegistrazione = rdr.GetDateTime(16)
                If Not rdr.IsDBNull(17) Then ben.Operatore = rdr.GetString(17)
                If Not rdr.IsDBNull(18) Then ben.IdSede = rdr.GetString(18)
                If Not rdr.IsDBNull(19) Then ben.IdConto = rdr.GetString(19)
                If Not rdr.IsDBNull(20) Then ben.CodiceSiope = rdr.GetString(20)
                If Not rdr.IsDBNull(21) Then ben.CodiceSiopeAggiuntivo = rdr.GetString(21)
                If Not rdr.IsDBNull(22) Then ben.Cup = rdr.GetString(22)
                If Not rdr.IsDBNull(23) Then ben.Cig = rdr.GetString(23)
                If Not rdr.IsDBNull(24) Then ben.EsenzCommBonifico = rdr.GetBoolean(24)
                If Not rdr.IsDBNull(25) Then ben.StampaAvviso = rdr.GetBoolean(25)
                If Not rdr.IsDBNull(26) Then ben.Bollo = rdr.GetBoolean(26)
                If Not rdr.IsDBNull(27) Then ben.ImponibileIrpef = rdr.GetDouble(27)
                If Not rdr.IsDBNull(28) Then ben.RitenuteIrpef = rdr.GetDouble(28)
                If Not rdr.IsDBNull(29) Then ben.RitenutePrevidenzialiBen = rdr.GetDouble(29)
                If Not rdr.IsDBNull(30) Then ben.AltreRitenute = rdr.GetDouble(30)
                If Not rdr.IsDBNull(31) Then ben.ImponibilePrevidenziale = rdr.GetDouble(31)
                If Not rdr.IsDBNull(32) Then ben.RitenutePrevidenzialiEnte = rdr.GetDouble(32)
                If Not rdr.IsDBNull(33) Then ben.AddizionaleComunale = rdr.GetDouble(33)
                If Not rdr.IsDBNull(34) Then ben.AddizionaleRegionale = rdr.GetDouble(34)


                Dim obbligoCC As Boolean
                Dim obbligoIBAN As Boolean

                If Not rdr.IsDBNull(35) Then obbligoCC = rdr.GetBoolean(35)
                If Not rdr.IsDBNull(36) Then obbligoIBAN = rdr.GetBoolean(36)

                ben.HasDatiBancari = obbligoCC Or obbligoCC

                If Not rdr.IsDBNull(37) Then ben.IdContratto = rdr.GetString(37)
                If Not rdr.IsDBNull(38) Then ben.NumeroRepertorioContratto = rdr.GetString(38)

                ben.IsDatoSensibile = rdr.GetBoolean(39)

                listaBeneficiario.Add(ben)
            End While
            rdr.Close()
            Return listaBeneficiario
        Catch ex As Exception
            If Not rdr Is Nothing Then
                rdr.Close()
            End If
            If Not opOperazione Is Nothing Then
                Log.Error(opOperazione.Codice & ":" & ex.Message)
                Throw New Exception(opOperazione.Codice & ":" & ex.Message)
            Else
                Throw New Exception(ex.Message)
            End If
        End Try
    End Function
    Public Sub FO_Registra_LiquidazioneBeneficiario(ByVal liquidazioneBeneficiario As ItemLiquidazioneImpegnoBeneficiarioInfo, ByVal operatore As DllAmbiente.Operatore, Optional ByRef trans As SqlTransaction = Nothing)
        Const SFunzione As String = "FO_Registra_LiquidazioneBeneficiario"

        Try
            If liquidazioneBeneficiario Is Nothing Then
                Throw New Exception("Parametri insufficienti")
            End If

            Log.Debug(operatore.Codice & " - Inizio" & SFunzione)
            Dim dettagliLiquidazione As Generic.List(Of ItemLiquidazioneInfo) = FO_Get_DatiLiquidazione(, liquidazioneBeneficiario.IDDocumentoContabile)
            Dim dettaglioLiquidazione As ItemLiquidazioneInfo

            If dettagliLiquidazione.Count > 0 Then
                dettaglioLiquidazione = dettagliLiquidazione.Item(0)
                liquidazioneBeneficiario.IdDocumento = dettaglioLiquidazione.Dli_Documento
                Dim listaBenRegistrati As Generic.List(Of DllDocumentale.ItemLiquidazioneImpegnoBeneficiarioInfo) = FO_Get_ListaBeneficiariLiquidazione(oOperatore, dettaglioLiquidazione.Dli_Documento, , dettaglioLiquidazione.Dli_prog)

                Dim totaleAssegnato As Decimal = 0
                For Each benRegistato As DllDocumentale.ItemLiquidazioneImpegnoBeneficiarioInfo In listaBenRegistrati
                    totaleAssegnato = totaleAssegnato + benRegistato.ImportoPagato
                Next

                If dettaglioLiquidazione.Dli_Costo < (liquidazioneBeneficiario.ImportoPagato + totaleAssegnato) Then
                    Throw New Exception("Valore non consentito, il residuo è di :" & (dettaglioLiquidazione.Dli_Costo - totaleAssegnato))
                End If
            End If
            If (liquidazioneBeneficiario.ID = 0) Then
                FO_Insert_DocumentoLiquidazioneBeneficiario(operatore, liquidazioneBeneficiario, trans)
            Else
                FO_Update_DocumentoLiquidazioneBeneficiario(operatore, liquidazioneBeneficiario, trans)
            End If

        Catch ex As Exception
            Log.Error(operatore.Codice & ":" & ex.Message)

            Throw New Exception(operatore.Codice & ":" & ex.Message)
        Finally

        End Try
    End Sub
    Public Function FO_Registra_ImpegnoBeneficiario(ByVal impegnoBeneficiario As ItemLiquidazioneImpegnoBeneficiarioInfo, ByVal operatore As DllAmbiente.Operatore, Optional ByRef trans As SqlTransaction = Nothing) As String
        Const SFunzione As String = "FO_Registra_ImpegnoBeneficiario"
        Dim messaggioErrore As String = ""
        Try
            If impegnoBeneficiario Is Nothing Then
                'Throw New Exception("Parametri insufficienti")
                messaggioErrore = "Parametri insufficienti"
            End If

            Log.Debug(operatore.Codice & " - Inizio" & SFunzione)
            Dim dettagliImpegni As Generic.List(Of ItemImpegnoInfo) = FO_Get_DatiImpegni(impegnoBeneficiario.IdDocumento, impegnoBeneficiario.IDDocumentoContabile)
            Dim dettaglioImpegno As ItemImpegnoInfo

            If dettagliImpegni.Count > 0 Then
                dettaglioImpegno = dettagliImpegni.Item(0)

                If dettaglioImpegno.Dli_Costo <> impegnoBeneficiario.ImportoSpettante Then
                    'Throw New Exception("Valore non consentito: l'importo spettante del beneficiario deve essere lo stesso dell'impegno")
                    messaggioErrore = "Valore non consentito: l\'importo spettante del beneficiario deve essere lo stesso dell\'impegno"
                End If


            End If
            If messaggioErrore = "" Then
                If (impegnoBeneficiario.ID = 0) Then
                    FO_Insert_DocumentoImpegnoBeneficiario(operatore, impegnoBeneficiario, trans)
                Else
                    FO_Update_DocumentoImpegnoBeneficiario(operatore, impegnoBeneficiario, trans)
                End If
            End If


        Catch ex As Exception
            Log.Error(operatore.Codice & ":" & ex.Message)

            Throw New Exception(operatore.Codice & ":" & ex.Message)
        Finally

        End Try
        Return messaggioErrore
    End Function
    'aggiorno il numero di liquidazione sui beneficiari collegati
    Function FO_Update_Ben_NumLiquidazione(ByVal item As ItemLiquidazioneInfo, Optional ByRef trans As SqlTransaction = Nothing) As Integer
        Dim flagTransEsterna As Boolean = False
        If trans Is Nothing Then
            flagTransEsterna = False
        Else
            flagTransEsterna = True
        End If
        Dim update_ben As String = " Update   [Documento_Liquidazione_Beneficiario] " & _
        " Set [N_liquidazione] = @N_liquidazione " & _
        " WHERE [Id_Documento] = @Id_Documento " & _
        " AND [ID_Liquidazione] = @ID_Liquidazione "

        Dim parms(2) As SqlParameter
        If Not String.IsNullOrEmpty(item.Dli_NLiquidazione) Then
            parms(0) = New SqlParameter("@N_liquidazione", SqlDbType.VarChar)
            parms(0).Value = item.Dli_NLiquidazione
        End If
        If Not String.IsNullOrEmpty(item.Dli_Documento) Then
            parms(1) = New SqlParameter("@Id_Documento", SqlDbType.VarChar)
            parms(1).Value = item.Dli_Documento
        End If
        If Not String.IsNullOrEmpty(item.Dli_prog) Then
            parms(2) = New SqlParameter("@ID_Liquidazione", SqlDbType.VarChar)
            parms(2).Value = item.Dli_prog
        End If

        Log.Debug("iddoc:" & item.Dli_Documento & " op:" & item.Dli_Operatore)

        Dim returnValue As Integer = 0
        If flagTransEsterna Then
            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, update_ben, parms, -1)
            registra_AttivitaContabile(item.Dli_Documento, "UPBENLIQ", oOperatore, trans)
        Else


            Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
            conn.Open()
            Dim transInterna As SqlClient.SqlTransaction = conn.BeginTransaction
            Try


                returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(transInterna, CommandType.Text, update_ben, parms, -1)
                registra_AttivitaContabile(item.Dli_Documento, "UPLIQIMPACC", oOperatore, transInterna)
                transInterna.Commit()

            Catch ex As Exception
                Log.Error(ex.Message)

                If Not transInterna Is Nothing Then
                    transInterna.Rollback()
                End If
                Throw New Exception(ex.Message)
            Finally
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End Try


        End If
        Return returnValue
    End Function

    Public Function FO_Insert_Liquidazione_Fatture_E_Beneficiari(ByVal opOperazione As DllAmbiente.Operatore, ByVal liquidazione As ItemLiquidazioneInfo, Optional ByVal transaction As SqlTransaction = Nothing) As Boolean
        Dim functionName As String = "FO_Insert_Liquidazione_E_Beneficiari"

        Dim connection As SqlClient.SqlConnection = Nothing
        Try
            If transaction Is Nothing Then
                connection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                connection.Open()

                transaction = connection.BeginTransaction
            End If

            Dim itemLiquidazioneInfo As ItemLiquidazioneInfo = FO_Insert_Liquidazione(liquidazione, transaction)


            For Each beneficiario As ItemLiquidazioneImpegnoBeneficiarioInfo In itemLiquidazioneInfo.ListaBeneficiari
                beneficiario.IDDocumentoContabile = itemLiquidazioneInfo.Dli_prog
                If Not beneficiario.ListaFatture Is Nothing Then
                    For Each fattura As DllDocumentale.ItemFatturaInfoHeader In beneficiario.ListaFatture
                        ' devo leggere prima il fattura.Prog dalla tabella Fattura
                        Dim progFatturaAtto As Integer = FO_Get_ListaFatture(itemLiquidazioneInfo.Dli_Documento, , fattura.IdUnivoco)(0).Prog

                        Dim progFatturaLiquidazione As Integer = FO_Insert_Liquidazione_Fattura(itemLiquidazioneInfo.Dli_Documento, itemLiquidazioneInfo.Dli_prog, fattura.IdUnivoco, fattura.ImportoFattDaLiquidare, progFatturaAtto)
                        beneficiario.ProgFatturaLiq = progFatturaLiquidazione
                    Next
                End If
                FO_Insert_DocumentoLiquidazioneBeneficiario(opOperazione, beneficiario, transaction)
            Next

            If Not connection Is Nothing Then
                transaction.Commit()
            End If

        Catch ex As Exception
            Log.Error(functionName & ":" & ex.Message)

            If Not connection Is Nothing AndAlso Not transaction Is Nothing Then
                transaction.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not connection Is Nothing Then
                connection.Close()
            End If
        End Try

    End Function

    Function FO_GetListaTipologieDocumento(Optional ByVal idTipologiaDocumento As Integer = -1) As Generic.List(Of ItemTipologiaDocumento)

        Dim Sqlq As String = " SELECT [Id] " & _
                             ",[Tipologia] " & _
                             ",[HasDestinatari] " & _
                             ",[HasDestinatariObbligatori] " & _
                             "FROM [Tab_Tipologia_Documenti] "

        If idTipologiaDocumento > -1 Then
            Sqlq = Sqlq + " WHERE [Id] = " & idTipologiaDocumento.ToString()
        End If

        Dim retValue As New Generic.List(Of ItemTipologiaDocumento)
        Try
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
            Using rdr As SqlClient.SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, Nothing)

                Dim itemTipologiaDocumento As ItemTipologiaDocumento
                While rdr.Read()
                    itemTipologiaDocumento = New ItemTipologiaDocumento

                    itemTipologiaDocumento.Id = rdr.GetInt32(0)
                    itemTipologiaDocumento.Tipologia = rdr.GetString(1)
                    itemTipologiaDocumento.HasDestinatari = rdr.GetBoolean(2)
                    itemTipologiaDocumento.HasDestinatariObbligatori = rdr.GetBoolean(3)

                    retValue.Add(itemTipologiaDocumento)
                End While
                rdr.Close()
            End Using
        Catch ex As SqlClient.SqlException
        Catch ex As Exception
            retValue = Nothing
            Log.Error(ex.Message)
        End Try

        Return retValue
    End Function

    Sub FO_Insert_DocumentoDestinatari(ByVal opOperazione As DllAmbiente.Operatore, ByVal item As ItemDestinatarioInfo, Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim insert_documentoBeneficiario As String = "INSERT INTO [Documento_Destinatari]  " & _
            "([IdDocumento],[IdSIC]" & _
            ",[isPersonaFisica],[CodiceFiscale],[Denominazione],[PartitaIva],[DataNascita],[LuogoNascita]" & _
            ",[LegaleRappresentante],[IdContratto],[NumeroRepertorioContratto],[Operatore],[DataOperazione],[isDatoSensibile], [ImportoSpesa]) " & _
            " VALUES (@IdDocumento,@IdSIC,@isPersonaFisica,@CodiceFiscale, " & _
            " @Denominazione, @PartitaIva, @DataNascita, @LuogoNascita, @LegaleRappresentante, @IdContratto, @NumeroRepertorioContratto, @Operatore, @DataOperazione, @isDatoSensibile, @ImportoSpesa)"

        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If
            Dim parms(14) As SqlParameter

            parms(0) = New SqlParameter("@IdDocumento", SqlDbType.VarChar)
            parms(0).Value = item.IdDocumento
            parms(1) = New SqlParameter("@IdSIC", SqlDbType.NVarChar)
            parms(1).Value = item.IdSIC
            parms(2) = New SqlParameter("@isPersonaFisica", SqlDbType.Bit)
            parms(2).Value = item.isPersonaFisica
            parms(3) = New SqlParameter("@CodiceFiscale", SqlDbType.NVarChar)
            parms(3).Value = item.CodiceFiscale
            parms(4) = New SqlParameter("@Denominazione", SqlDbType.NVarChar)
            parms(4).Value = item.Denominazione
            parms(5) = New SqlParameter("@PartitaIva", SqlDbType.NVarChar)
            parms(5).Value = item.PartitaIva
            parms(6) = New SqlParameter("@DataNascita", SqlDbType.DateTime)
            parms(6).Value = IIf(item.DataNascita Is Nothing, DBNull.Value, item.DataNascita)
            parms(7) = New SqlParameter("@LuogoNascita", SqlDbType.NVarChar)
            parms(7).Value = item.LuogoNascita
            parms(8) = New SqlParameter("@LegaleRappresentante", SqlDbType.NVarChar)
            parms(8).Value = item.LegaleRappresentante
            parms(9) = New SqlParameter("@IdContratto", SqlDbType.NVarChar)
            parms(9).Value = item.IdContratto
            parms(10) = New SqlParameter("@NumeroRepertorioContratto", SqlDbType.NVarChar)
            parms(10).Value = item.NumeroRepertorioContratto
            parms(11) = New SqlParameter("@Operatore", SqlDbType.NVarChar)
            parms(11).Value = opOperazione.Codice
            parms(12) = New SqlParameter("@DataOperazione", SqlDbType.DateTime)
            parms(12).Value = Now
            parms(13) = New SqlParameter("@isDatoSensibile", SqlDbType.Bit)
            parms(13).Value = item.isDatoSensibile
            parms(14) = New SqlParameter("@ImportoSpesa", SqlDbType.Decimal)
            parms(14).Value = item.ImportoSpettante


            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, insert_documentoBeneficiario, parms, -1)
            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(opOperazione.Codice & ":" & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(opOperazione.Codice & ":" & ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub

    Sub FO_Delete_DocumentoDestinatari(ByVal opOperazione As DllAmbiente.Operatore, ByVal idDocumento As String, Optional ByVal idDestinatario As Long = -1, Optional ByVal idSIC As String = "", Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim delete_documentoBeneficiario As String = "DELETE from [Documento_Destinatari] WHERE "
        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If
            Dim parms(2) As SqlParameter
            Dim indiceEffettivo As Integer = 0
            If Not idDocumento Is Nothing AndAlso idDocumento.Trim() <> String.Empty Then
                parms(0) = New SqlParameter("@IdDocumento", SqlDbType.VarChar)
                parms(0).Value = idDocumento
                delete_documentoBeneficiario = delete_documentoBeneficiario & " IdDocumento = @IdDocumento "
            Else
                Throw New Exception("IdDocumento non specificato.")
            End If
            If Not idSIC Is Nothing AndAlso idSIC.Trim() <> String.Empty Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@IdSIC", SqlDbType.VarChar)
                parms(indiceEffettivo).Value = idSIC
                delete_documentoBeneficiario = delete_documentoBeneficiario & " AND IdSIC = @IdSIC "
            End If
            If idDestinatario > -1 Then
                indiceEffettivo = indiceEffettivo + 1
                parms(indiceEffettivo) = New SqlParameter("@Id", SqlDbType.Int)
                parms(indiceEffettivo).Value = idDestinatario
                delete_documentoBeneficiario = delete_documentoBeneficiario & " AND Id = @Id "
            End If
            ReDim Preserve parms(indiceEffettivo)

            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, delete_documentoBeneficiario, parms, -1)
            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(opOperazione.Codice & ":" & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw New Exception(opOperazione.Codice & ":" & ex.Message)
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub

    Public Function FO_Get_ListaDestinatari(ByVal opOperazione As DllAmbiente.Operatore, Optional ByVal idDocumento As String = "", Optional ByVal idDestinatario As Long = -1, Optional ByVal idSIC As String = "") As Collections.Generic.List(Of ItemDestinatarioInfo)

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try
            If String.IsNullOrEmpty(idDocumento) AndAlso idDestinatario < 0 AndAlso String.IsNullOrEmpty(idSIC) Then
                Log.Error("Criteri di ricerca non presenti per routine FO_Get_ListaDestinatari")
                Throw New Exception("Criteri di ricerca non presenti per routine FO_Get_ListaDestinatari")
            End If
            Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

            Dim selectdocumentoBeneficiari As String = "SELECT [Id],[IdDocumento],[IdSIC],[isPersonaFisica],[CodiceFiscale],[Denominazione]" & _
            " ,[PartitaIva],[DataNascita],[LuogoNascita],[LegaleRappresentante],[IdContratto],[NumeroRepertorioContratto],[Operatore]" & _
            " ,[DataOperazione],[isDatoSensibile], [ImportoSpesa]" & _
            " FROM [Documento_Destinatari] "

            Dim SqlqWhere As String = ""
            Dim param(2) As SqlClient.SqlParameter
            Dim indiceParametriEffettivi As Integer = -1

            If Not idDocumento Is Nothing AndAlso idDocumento.Trim() <> String.Empty Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@IdDocumento", SqlDbType.VarChar)
                param(indiceParametriEffettivi).Value = idDocumento
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND IdDocumento=@IdDocumento", " WHERE IdDocumento=@IdDocumento")
            End If
            If Not idSIC Is Nothing AndAlso idSIC.Trim() <> String.Empty Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@IdSIC", SqlDbType.NVarChar)
                param(indiceParametriEffettivi).Value = idSIC
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND IdSIC=@IdSIC", " WHERE IdSIC=@IdSIC")
            End If
            If idDestinatario > -1 Then
                indiceParametriEffettivi = indiceParametriEffettivi + 1
                param(indiceParametriEffettivi) = New SqlClient.SqlParameter("@Id", SqlDbType.Int)
                param(indiceParametriEffettivi).Value = idDestinatario
                SqlqWhere = SqlqWhere & IIf(SqlqWhere.Contains(" WHERE "), " AND Id=@Id", " WHERE Id=@Id")
            End If

            ReDim Preserve param(indiceParametriEffettivi)
            selectdocumentoBeneficiari = selectdocumentoBeneficiari & SqlqWhere

            Dim listaBenef As New Collections.Generic.List(Of ItemDestinatarioInfo)

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, selectdocumentoBeneficiari, param)
            Dim destinatario As DllDocumentale.ItemDestinatarioInfo

            While rdr.Read()
                destinatario = New DllDocumentale.ItemDestinatarioInfo
                destinatario.Id = rdr.GetInt32(0)
                destinatario.IdDocumento = rdr.GetString(1)
                destinatario.IdSIC = rdr.GetString(2)
                destinatario.isPersonaFisica = rdr.GetBoolean(3)

                If Not rdr.IsDBNull(4) Then destinatario.CodiceFiscale = rdr.GetString(4)
                destinatario.Denominazione = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then destinatario.PartitaIva = "" & rdr.GetString(6)

                If Not rdr.IsDBNull(7) Then destinatario.DataNascita = "" & rdr.GetDateTime(7)
                If Not rdr.IsDBNull(8) Then destinatario.LuogoNascita = "" & rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then destinatario.LegaleRappresentante = "" & rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then destinatario.IdContratto = "" & rdr.GetString(10)
                If Not rdr.IsDBNull(11) Then destinatario.NumeroRepertorioContratto = "" & rdr.GetString(11)

                destinatario.Operatore = rdr.GetString(12)
                destinatario.DataOperazione = rdr.GetDateTime(13)
                destinatario.isDatoSensibile = rdr.GetBoolean(14)
                If Not rdr.IsDBNull(15) Then destinatario.ImportoSpettante = rdr.GetDecimal(15)
                listaBenef.Add(destinatario)
            End While
            rdr.Close()
            Return listaBenef
        Catch ex As Exception
            If Not rdr Is Nothing Then
                rdr.Close()
            End If
            If Not opOperazione Is Nothing Then
                Log.Error(opOperazione.Codice & ":" & ex.Message)
                Throw New Exception(opOperazione.Codice & ":" & ex.Message)
            Else
                Throw New Exception(ex.Message)
            End If
        End Try
    End Function


    Function FO_Get_SchedaContrattiFattureInfo(ByVal oOperatore As DllAmbiente.Operatore, ByVal idDocumento As String) As ItemSchedaContrattiFattureInfo

        Dim itemSchedaContrattiFatture As ItemSchedaContrattiFattureInfo = Nothing

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Dim rdr As SqlClient.SqlDataReader = Nothing

        Try
            Dim contratti As Generic.List(Of ItemContrattoInfoHeader) = FO_Get_ListaContratti(idDocumento)
            Dim fatture As Generic.List(Of ItemFatturaInfoHeader) = FO_Get_ListaFatture(idDocumento)
            Dim allegatiFattura As New Generic.List(Of ItemFatturaAllegato)
            If contratti.Count > 0 Then
                itemSchedaContrattiFatture = New ItemSchedaContrattiFattureInfo

                itemSchedaContrattiFatture.Contratti = contratti
                If fatture.Count > 0 Then
                    itemSchedaContrattiFatture.Fatture = fatture

                    For Each fattura As ItemFatturaInfoHeader In fatture
                        allegatiFattura = FO_Get_ListaAllegatiFattura(fattura.Prog)
                    Next
                End If

            End If

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not (rdr Is Nothing) Then
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
            End If
            itemSchedaContrattiFatture = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            itemSchedaContrattiFatture = Nothing
        End Try
        Return itemSchedaContrattiFatture

    End Function

    Function FO_Get_ListaFattureNonAssegnate(ByVal idDocumento As String) As Generic.List(Of ItemFatturaInfoHeader)

        Dim listaFatture As New Generic.List(Of ItemFatturaInfoHeader)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT * FROM (Select * From Fatture Where Fatture.id_documento=@idDocumento) As FattureDoc Where FattureDoc.id_fattura_SIC NOT IN(  " & _
    "   SELECT  distinct   Fatture.[id_fattura_SIC]  FROM Fatture INNER Join  Documento_Liquidazione_Fattura ON Fatture.Prog = Documento_Liquidazione_Fattura.prog_fattura " & _
    "   WHERE Documento_Liquidazione_Fattura.id_TabDocLiquidazione IS NOT NULL AND  Documento_Liquidazione_Fattura.id_Documento=@idDocumento" & _
    "   UNION " & _
    "   SELECT  distinct   Fatture.[id_fattura_SIC]  FROM Fatture INNER Join  Documento_Impegno_Fattura ON Fatture.Prog = Documento_Liquidazione_Fattura.prog_fattura " & _
    "   WHERE Documento_Impegno_Fattura.id_TabDocImpegno IS NOT NULL AND  Documento_Impegno_Fattura.id_Documento=@idDocumento)"


        Dim param(0) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@idDocumento", SqlDbType.VarChar)
        param(0).Value = idDocumento

        Dim rdr As SqlClient.SqlDataReader

        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)

            While rdr.Read()

                Dim fattura As ItemFatturaInfoHeader = New ItemFatturaInfoHeader()

                If Not rdr.IsDBNull(0) Then fattura.IdUnivoco = rdr.GetString(0)
                If Not rdr.IsDBNull(1) Then fattura.IdDocumento = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then fattura.Contratto.IdContratto = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then fattura.Contratto.NumeroRepertorioContratto = rdr.GetString(3)
                fattura.Contratto.IdDocumento = fattura.IdDocumento

                If Not rdr.IsDBNull(4) Then fattura.NumeroFatturaBeneficiario = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then fattura.DataFatturaBeneficiario = rdr.GetDateTime(5)
                If Not rdr.IsDBNull(6) Then fattura.AnagraficaInfo.IdAnagrafica = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then fattura.AnagraficaInfo.Denominazione = rdr.GetString(7)
                If Not rdr.IsDBNull(8) Then fattura.AnagraficaInfo.CodiceFiscale = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then fattura.AnagraficaInfo.PartitaIva = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then fattura.AnagraficaInfo.FlagPersonaFisica = rdr.GetBoolean(10)
                If Not rdr.IsDBNull(11) Then fattura.AnagraficaInfo.IdSede = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then fattura.AnagraficaInfo.SedeVia = rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then fattura.AnagraficaInfo.IdModalitaPag = rdr.GetInt32(13)
                If Not rdr.IsDBNull(14) Then fattura.AnagraficaInfo.DescrizioneModalitaPag = rdr.GetString(14)
                If Not rdr.IsDBNull(15) Then fattura.AnagraficaInfo.Iban = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then fattura.DescrizioneFattura = rdr.GetString(16)
                If Not rdr.IsDBNull(17) Then fattura.ImportoTotaleFattura = rdr.GetDecimal(17)
                If Not rdr.IsDBNull(18) Then fattura.AnagraficaInfo.IdConto = rdr.GetInt32(18)

                listaFatture.Add(fattura)

            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try

        Return listaFatture

    End Function


    Function FO_Get_ListaFattureNonAssegnateLiquidazione(ByVal idDocumento As String) As Generic.List(Of ItemFatturaInfoHeader)

        Dim listaFatture As New Generic.List(Of ItemFatturaInfoHeader)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT * FROM (Select * From Fatture Where Fatture.id_documento=@idDocumento) As FattureDoc Where FattureDoc.id_fattura_SIC NOT IN(  " & _
    "   SELECT  distinct   Fatture.[id_fattura_SIC]  FROM Fatture INNER Join  Documento_Liquidazione_Fattura ON Fatture.id_fattura_SIC = Documento_Liquidazione_Fattura.id_Fattura_SIC " & _
    "   WHERE Documento_Liquidazione_Fattura.id_TabDocLiquidazione IS NOT NULL AND  Documento_Liquidazione_Fattura.id_Documento=@idDocumento)"

        Dim param(0) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@idDocumento", SqlDbType.VarChar)
        param(0).Value = idDocumento

        Dim rdr As SqlClient.SqlDataReader

        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)

            While rdr.Read()

                Dim fattura As ItemFatturaInfoHeader = New ItemFatturaInfoHeader()

                If Not rdr.IsDBNull(0) Then fattura.IdUnivoco = rdr.GetString(0)
                If Not rdr.IsDBNull(1) Then fattura.IdDocumento = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then fattura.Contratto.IdContratto = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then fattura.Contratto.NumeroRepertorioContratto = rdr.GetString(3)
                fattura.Contratto.IdDocumento = fattura.IdDocumento

                If Not rdr.IsDBNull(4) Then fattura.NumeroFatturaBeneficiario = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then fattura.DataFatturaBeneficiario = rdr.GetDateTime(5)
                If Not rdr.IsDBNull(6) Then fattura.AnagraficaInfo.IdAnagrafica = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then fattura.AnagraficaInfo.Denominazione = rdr.GetString(7)
                If Not rdr.IsDBNull(8) Then fattura.AnagraficaInfo.CodiceFiscale = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then fattura.AnagraficaInfo.PartitaIva = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then fattura.AnagraficaInfo.FlagPersonaFisica = rdr.GetBoolean(10)
                If Not rdr.IsDBNull(11) Then fattura.AnagraficaInfo.IdSede = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then fattura.AnagraficaInfo.SedeVia = rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then fattura.AnagraficaInfo.IdModalitaPag = rdr.GetInt32(13)
                If Not rdr.IsDBNull(14) Then fattura.AnagraficaInfo.DescrizioneModalitaPag = rdr.GetString(14)
                If Not rdr.IsDBNull(15) Then fattura.AnagraficaInfo.Iban = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then fattura.DescrizioneFattura = rdr.GetString(16)
                If Not rdr.IsDBNull(17) Then fattura.ImportoTotaleFattura = rdr.GetDecimal(17)
                If Not rdr.IsDBNull(18) Then fattura.AnagraficaInfo.IdConto = rdr.GetInt32(18)

                listaFatture.Add(fattura)

            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try

        Return listaFatture

    End Function
    Function FO_Get_ListaFattureNonAssegnateLiquidazioneOrResidue(ByVal idDocumento As String) As Generic.List(Of ItemFatturaInfoHeader)

        Dim listaFatture As New Generic.List(Of ItemFatturaInfoHeader)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")


        'Dim Sqlq As String = "SELECT     Fatture.id_fattura_SIC, Fatture.id_documento, Fatture.id_contratto, Fatture.numeroRepertorio, Fatture.numeroFatturaBeneficiario, Fatture.dataFatturaBeneficiario, " & _
        '              " Fatture.id_anagrafica, Fatture.denominazioneBeneficiario, Fatture.codiceFiscaleBeneficiario, Fatture.partitaIvaBeneficiario, Fatture.flagPersonaFisicaBeneficiario, " & _
        '              " Fatture.id_sede, Fatture.sede, Fatture.id_metodo_pagamento, Fatture.metodoPagamento, Fatture.iban, Fatture.descrizioneFattura, Fatture.importo_totale_fattura, " & _
        '              " CASE WHEN Documento_Liquidazione_Fattura.importoLiquidato IS NULL " & _
        '              " THEN 0 ELSE Documento_Liquidazione_Fattura.importoLiquidato END AS ImpLiquidato " & _
        '              "   FROM         Documento_Liquidazione_Fattura RIGHT OUTER JOIN " & _
        '              " Fatture ON Documento_Liquidazione_Fattura.id_Fattura_SIC = Fatture.id_fattura_SIC AND " & _
        '              " Documento_Liquidazione_Fattura.id_Documento = Fatture.id_documento " & _
        '                " WHERE     (Fatture.id_documento = @idDocumento) AND (Fatture.importo_totale_fattura > (CASE WHEN Documento_Liquidazione_Fattura.importoLiquidato IS NULL " & _
        '              " THEN 0 ELSE Documento_Liquidazione_Fattura.importoLiquidato END)) "


        Dim Sqlq As String = "SELECT     Fatture.id_fattura_SIC, Fatture.id_documento, Fatture.id_contratto, Fatture.numeroRepertorio, Fatture.numeroFatturaBeneficiario, Fatture.dataFatturaBeneficiario, " & _
                             " Fatture.id_anagrafica, Fatture.denominazioneBeneficiario, Fatture.codiceFiscaleBeneficiario, Fatture.partitaIvaBeneficiario, Fatture.flagPersonaFisicaBeneficiario, " & _
                             " Fatture.id_sede, Fatture.sede, Fatture.id_metodo_pagamento, Fatture.metodoPagamento, Fatture.iban, Fatture.descrizioneFattura, Fatture.importo_totale_fattura, Fatture.id_conto, " & _
                             " ImpLiquidato, Fatture.Prog " & _
                             " FROM         Fatture INNER JOIN " & _
                             "  (SELECT     Fatture_1.id_fattura_SIC, Fatture_1.id_documento, SUM(Documento_Liquidazione_Fattura_1.importoLiquidato) AS ImpLiquidato " & _
                             "   FROM          Fatture AS Fatture_1 LEFT OUTER JOIN " & _
                             "                        Documento_Liquidazione_Fattura AS Documento_Liquidazione_Fattura_1 ON  " & _
                              "                      Fatture_1.id_documento = Documento_Liquidazione_Fattura_1.id_Documento AND  " & _
                            " Fatture_1.id_fattura_SIC = Documento_Liquidazione_Fattura_1.id_Fattura_SIC " & _
                            "                   WHERE      (Fatture_1.id_documento = @idDocumento) " & _
                            " GROUP BY Fatture_1.id_fattura_SIC, Fatture_1.id_documento) AS a ON Fatture.id_fattura_SIC = a.id_fattura_SIC AND Fatture.id_documento = a.id_documento "



        '    Dim Sqlq As String = ""
        '    Sqlq = "SELECT * FROM (Select * From Fatture Where Fatture.id_documento=@idDocumento) As FattureDoc Where FattureDoc.id_fattura_SIC NOT IN(  " & _
        '"   SELECT  distinct   Fatture.[id_fattura_SIC]  FROM Fatture INNER Join  Documento_Liquidazione_Fattura ON Fatture.id_fattura_SIC = Documento_Liquidazione_Fattura.id_Fattura_SIC " & _
        '"   WHERE Documento_Liquidazione_Fattura.id_TabDocLiquidazione IS NOT NULL AND  Documento_Liquidazione_Fattura.id_Documento=@idDocumento)"

        Dim param(0) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@idDocumento", SqlDbType.VarChar)
        param(0).Value = idDocumento

        Dim rdr As SqlClient.SqlDataReader

        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)

            While rdr.Read()

                Dim fattura As ItemFatturaInfoHeader = New ItemFatturaInfoHeader()

                If Not rdr.IsDBNull(0) Then fattura.IdUnivoco = rdr.GetString(0)
                If Not rdr.IsDBNull(1) Then fattura.IdDocumento = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then fattura.Contratto.IdContratto = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then fattura.Contratto.NumeroRepertorioContratto = rdr.GetString(3)
                fattura.Contratto.IdDocumento = fattura.IdDocumento

                If Not rdr.IsDBNull(4) Then fattura.NumeroFatturaBeneficiario = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then fattura.DataFatturaBeneficiario = rdr.GetDateTime(5)
                If Not rdr.IsDBNull(6) Then fattura.AnagraficaInfo.IdAnagrafica = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then fattura.AnagraficaInfo.Denominazione = rdr.GetString(7)
                If Not rdr.IsDBNull(8) Then fattura.AnagraficaInfo.CodiceFiscale = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then fattura.AnagraficaInfo.PartitaIva = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then fattura.AnagraficaInfo.FlagPersonaFisica = rdr.GetBoolean(10)
                If Not rdr.IsDBNull(11) Then fattura.AnagraficaInfo.IdSede = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then fattura.AnagraficaInfo.SedeVia = rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then fattura.AnagraficaInfo.IdModalitaPag = rdr.GetInt32(13)
                If Not rdr.IsDBNull(14) Then fattura.AnagraficaInfo.DescrizioneModalitaPag = rdr.GetString(14)
                If Not rdr.IsDBNull(15) Then fattura.AnagraficaInfo.Iban = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then fattura.DescrizioneFattura = rdr.GetString(16)
                If Not rdr.IsDBNull(17) Then fattura.ImportoTotaleFattura = rdr.GetDecimal(17)
                If Not rdr.IsDBNull(18) Then fattura.AnagraficaInfo.IdConto = rdr.GetInt32(18)
                If Not rdr.IsDBNull(19) Then fattura.ImportoLiquidato = rdr.GetDecimal(19)
                fattura.ImportoResiduo = fattura.ImportoTotaleFattura - fattura.ImportoLiquidato
                If Not rdr.IsDBNull(20) Then fattura.Prog = rdr.GetInt64(20)

                listaFatture.Add(fattura)

            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try

        Return listaFatture

    End Function
    Function FO_Get_ListaFattureNonAssegnateImpegno(ByVal idDocumento As String) As Generic.List(Of ItemFatturaInfoHeader)

        Dim listaFatture As New Generic.List(Of ItemFatturaInfoHeader)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT * FROM (Select * From Fatture Where Fatture.id_documento=@idDocumento) As FattureDoc Where FattureDoc.id_fattura_SIC NOT IN(  " & _
"   SELECT  distinct   Fatture.[id_fattura_SIC]  FROM Fatture INNER Join  Documento_Impegno_Fattura ON Fatture.id_fattura_SIC = Documento_Impegno_Fattura.id_Fattura_SIC " & _
"   WHERE Documento_Impegno_Fattura.id_TabDocImpegno IS NOT NULL AND  Documento_Impegno_Fattura.id_Documento=@idDocumento)"


        Dim param(0) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@idDocumento", SqlDbType.VarChar)
        param(0).Value = idDocumento

        Dim rdr As SqlClient.SqlDataReader

        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)

            While rdr.Read()

                Dim fattura As ItemFatturaInfoHeader = New ItemFatturaInfoHeader()

                If Not rdr.IsDBNull(0) Then fattura.IdUnivoco = rdr.GetString(0)
                If Not rdr.IsDBNull(1) Then fattura.IdDocumento = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then fattura.Contratto.IdContratto = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then fattura.Contratto.NumeroRepertorioContratto = rdr.GetString(3)
                fattura.Contratto.IdDocumento = fattura.IdDocumento

                If Not rdr.IsDBNull(4) Then fattura.NumeroFatturaBeneficiario = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then fattura.DataFatturaBeneficiario = rdr.GetDateTime(5)
                If Not rdr.IsDBNull(6) Then fattura.AnagraficaInfo.IdAnagrafica = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then fattura.AnagraficaInfo.Denominazione = rdr.GetString(7)
                If Not rdr.IsDBNull(8) Then fattura.AnagraficaInfo.CodiceFiscale = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then fattura.AnagraficaInfo.PartitaIva = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then fattura.AnagraficaInfo.FlagPersonaFisica = rdr.GetBoolean(10)
                If Not rdr.IsDBNull(11) Then fattura.AnagraficaInfo.IdSede = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then fattura.AnagraficaInfo.SedeVia = rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then fattura.AnagraficaInfo.IdModalitaPag = rdr.GetInt32(13)
                If Not rdr.IsDBNull(14) Then fattura.AnagraficaInfo.DescrizioneModalitaPag = rdr.GetString(14)
                If Not rdr.IsDBNull(15) Then fattura.AnagraficaInfo.Iban = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then fattura.DescrizioneFattura = rdr.GetString(16)
                If Not rdr.IsDBNull(17) Then fattura.ImportoTotaleFattura = rdr.GetDecimal(17)
                If Not rdr.IsDBNull(18) Then fattura.AnagraficaInfo.IdConto = rdr.GetInt32(18)

                listaFatture.Add(fattura)

            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try

        Return listaFatture

    End Function

    Function FO_Get_ListaFatture(ByVal idDocumento As String, Optional ByVal idContratto As String = Nothing, Optional ByVal idFatturaSIC As String = Nothing) As Generic.List(Of ItemFatturaInfoHeader)
        Dim fatture As Generic.List(Of ItemFatturaInfoHeader) = New Generic.List(Of ItemFatturaInfoHeader)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = " SELECT [id_documento]" & _
            ",[id_fattura_SIC]" & _
            ",[id_contratto]" & _
            ",[numeroRepertorio]" & _
            ",[numeroFatturaBeneficiario]" & _
            ",[dataFatturaBeneficiario]" & _
            ",[id_anagrafica]" & _
            ",[denominazioneBeneficiario]" & _
            ",[codiceFiscaleBeneficiario]" & _
            ",[partitaIvaBeneficiario]" & _
            ",[flagPersonaFisicaBeneficiario]" & _
            ",[id_sede]" & _
            ",[sede]" & _
            ",[id_metodo_pagamento]" & _
            ",[metodoPagamento]" & _
            ",[iban]" & _
            ",[descrizioneFattura]" & _
            ",[importo_totale_fattura] " & _
            ",[id_conto] " & _
            ",[Prog] " & _
            " FROM  [Fatture] "

        Dim contaParam As Integer = 0
        Dim param(contaParam) As SqlClient.SqlParameter

        param(contaParam) = New SqlClient.SqlParameter("@id_documento", SqlDbType.VarChar)
        param(contaParam).Value = idDocumento



        If Not idContratto Is Nothing AndAlso idContratto.Trim() <> String.Empty Then
            contaParam = contaParam + 1
            ReDim Preserve param(contaParam)
            param(contaParam) = New SqlClient.SqlParameter("@id_contratto", SqlDbType.VarChar)
            param(contaParam).Value = idContratto
        End If

        If Not idFatturaSIC Is Nothing AndAlso idFatturaSIC.Trim() <> String.Empty Then
            contaParam = contaParam + 1
            ReDim Preserve param(contaParam)
            param(contaParam) = New SqlClient.SqlParameter("@id_Fattura_SIC", SqlDbType.VarChar)
            param(contaParam).Value = idFatturaSIC
        End If

        Sqlq = Sqlq & " WHERE id_documento=@id_documento " & IIf(Not idContratto Is Nothing AndAlso idContratto.Trim() <> String.Empty, "and id_contratto=@id_contratto", String.Empty) & IIf(Not idFatturaSIC Is Nothing AndAlso idFatturaSIC.Trim() <> String.Empty, "and id_Fattura_SIC=@id_Fattura_SIC", String.Empty)

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()
                Dim fattura As ItemFatturaInfoHeader = New ItemFatturaInfoHeader()

                If Not rdr.IsDBNull(0) Then fattura.IdDocumento = rdr.GetString(0)
                If Not rdr.IsDBNull(1) Then fattura.IdUnivoco = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then fattura.Contratto.IdContratto = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then fattura.Contratto.NumeroRepertorioContratto = rdr.GetString(3)
                fattura.Contratto.IdDocumento = fattura.IdDocumento

                If Not rdr.IsDBNull(4) Then fattura.NumeroFatturaBeneficiario = rdr.GetString(4)
                If Not rdr.IsDBNull(5) Then fattura.DataFatturaBeneficiario = rdr.GetDateTime(5)
                If Not rdr.IsDBNull(6) Then fattura.AnagraficaInfo.IdAnagrafica = rdr.GetString(6)
                If Not rdr.IsDBNull(7) Then fattura.AnagraficaInfo.Denominazione = rdr.GetString(7)
                If Not rdr.IsDBNull(8) Then fattura.AnagraficaInfo.CodiceFiscale = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then fattura.AnagraficaInfo.PartitaIva = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then fattura.AnagraficaInfo.FlagPersonaFisica = rdr.GetBoolean(10)
                If Not rdr.IsDBNull(11) Then fattura.AnagraficaInfo.IdSede = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then fattura.AnagraficaInfo.SedeVia = rdr.GetString(12)
                If Not rdr.IsDBNull(13) Then fattura.AnagraficaInfo.IdModalitaPag = rdr.GetInt32(13)
                If Not rdr.IsDBNull(14) Then fattura.AnagraficaInfo.DescrizioneModalitaPag = rdr.GetString(14)
                If Not rdr.IsDBNull(15) Then fattura.AnagraficaInfo.Iban = rdr.GetString(15)
                If Not rdr.IsDBNull(16) Then fattura.DescrizioneFattura = rdr.GetString(16)
                If Not rdr.IsDBNull(17) Then fattura.ImportoTotaleFattura = rdr.GetDecimal(17)
                If Not rdr.IsDBNull(18) Then fattura.AnagraficaInfo.IdConto= rdr.GetInt32(18)
                If Not rdr.IsDBNull(19) Then fattura.Prog = rdr.GetInt64(19)

                fatture.Add(fattura)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not (rdr Is Nothing) Then
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
            End If
            fatture = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            fatture = Nothing
        End Try
        Return fatture

    End Function
    Function FO_Get_ListaAllegatiFattura(ByVal progFattura As String) As Generic.List(Of ItemFatturaAllegato)
        Dim allegati As Generic.List(Of ItemFatturaAllegato) = New Generic.List(Of ItemFatturaAllegato)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = " SELECT [Prog]" &
            ",[prog_fattura]" &
            ",[nome]" &
            ",[formato]" &
            ",[url]" &
            " FROM  [Fatture_Allegato] "

        Dim param(0) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@prog_fattura", SqlDbType.VarChar)
        param(0).Value = progFattura


        Sqlq = Sqlq & " WHERE prog_fattura=@prog_fattura "

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()
                Dim allegato As ItemFatturaAllegato = New ItemFatturaAllegato()

                If Not rdr.IsDBNull(0) Then allegato.Prog = rdr.GetInt64(0)
                If Not rdr.IsDBNull(1) Then allegato.ProgFattura = rdr.GetInt64(1)
                If Not rdr.IsDBNull(2) Then allegato.Nome = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then allegato.Formato = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then allegato.Url = rdr.GetString(4)
                allegati.Add(allegato)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not (rdr Is Nothing) Then
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
            End If
            allegati = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            allegati = Nothing
        End Try
        Return allegati

    End Function


    Function FO_Get_Allegato_Firma(ByVal idAllegato As String) As AllegatoInfo
        Dim allegato As AllegatoInfo = New AllegatoInfo()

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT     All_autore, All_dataRegistrazione " &
          " FROM         Allegati " &
          " WHERE (All_idAllegato = @idallegato) "

        Dim param(0) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@idallegato", SqlDbType.VarChar)
        param(0).Value = idAllegato

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()

                If Not rdr.IsDBNull(0) Then allegato.All_autore = rdr.GetString(0)
                If Not rdr.IsDBNull(1) Then allegato.All_dataRegistrazione = rdr.GetDateTime(1)


            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not (rdr Is Nothing) Then
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
            End If
            allegato = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            allegato = Nothing
        End Try
        Return allegato

    End Function

    Function FO_GetDocumentoConservazione_Operatore(ByVal idDocumento As String, ByVal codiceOperatore As String) As ItemDocumentoConservazione
        Dim documentoConservazione As ItemDocumentoConservazione = New ItemDocumentoConservazione()

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT    id " &
          " FROM         Documento_Conservazione " &
          " WHERE (id_documento = @iddocumento) and  (codice_operatore_allegato = @codice_operatore_allegato) "

        Dim param(1) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@iddocumento", SqlDbType.VarChar)
        param(0).Value = idDocumento
        param(1) = New SqlClient.SqlParameter("@codice_operatore_allegato", SqlDbType.VarChar)
        param(1).Value = codiceOperatore

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()

                If Not rdr.IsDBNull(0) Then documentoConservazione.Id = rdr.GetInt64(0)

            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not (rdr Is Nothing) Then
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
            End If
            documentoConservazione = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            documentoConservazione = Nothing
        End Try
        Return documentoConservazione

    End Function

    Function FO_Get_Stato_Conservazione(ByVal stato As String) As Integer
        Dim idStato As Integer = -1
        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT    id " &
          " FROM         Tab_Conservazione_Stato " &
          " WHERE (descrizione = @descrizione)"

        Dim param(0) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@descrizione", SqlDbType.VarChar)
        param(0).Value = stato

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()

                If Not rdr.IsDBNull(0) Then idStato = rdr.GetInt32(0)

            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not (rdr Is Nothing) Then
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
            End If
            idStato = -1
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            idStato = -1
        End Try
        Return idStato

    End Function
    Function FO_Get_ListaAllegatiFatture(ByVal listaFatture As Generic.List(Of ItemFatturaInfoHeader)) As Generic.List(Of ItemFatturaAllegato)
        Dim allegati As Generic.List(Of ItemFatturaAllegato) = New Generic.List(Of ItemFatturaAllegato)

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = " SELECT distinct " & _
            " [prog_fattura]" & _
            ",[nome]" & _
            ",[formato]" & _
            ",[url]" & _
            ",[numeroFatturaBeneficiario]" & _
            ",[dataFatturaBeneficiario]" & _
            ",[denominazioneBeneficiario]" & _
            " FROM  [Fatture_Allegato] join Fatture on prog_fattura = Fatture.Prog "

        Dim param(0) As SqlClient.SqlParameter
        Dim stringaInsieme As String = "("
        If listaFatture.Count = 0 Then
            stringaInsieme = stringaInsieme & "'')"
        Else
            For i As Integer = 0 To listaFatture.Count - 2
                stringaInsieme = stringaInsieme & "'" & listaFatture(i).Prog & "',"
            Next
            stringaInsieme = stringaInsieme & "'" & listaFatture(listaFatture.Count - 1).Prog & "'"
            stringaInsieme = stringaInsieme & ")"
        End If


        'param(0) = New SqlClient.SqlParameter("@prog_fattura", SqlDbType.Int)
        'param(0).Value = stringaInsieme

        param(0) = New SqlClient.SqlParameter("", SqlDbType.VarChar)
        param(0).Value = ""

        Sqlq = Sqlq & " WHERE prog_fattura IN  " & stringaInsieme

        Dim rdr As SqlClient.SqlDataReader = Nothing
        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)
            While rdr.Read()
                Dim allegato As ItemFatturaAllegato = New ItemFatturaAllegato()

                'If Not rdr.IsDBNull(0) Then allegato.Prog = rdr.GetInt64(0)
                If Not rdr.IsDBNull(0) Then allegato.ProgFattura = rdr.GetInt64(0)
                If Not rdr.IsDBNull(1) Then allegato.Nome = rdr.GetString(1)
                If Not rdr.IsDBNull(2) Then allegato.Formato = rdr.GetString(2)
                If Not rdr.IsDBNull(3) Then allegato.Url = rdr.GetString(3)
                If Not rdr.IsDBNull(4) Then allegato.NumeroFatturaBeneficiario = rdr.GetString(4)
                If Not rdr.IsDBNull(6) Then allegato.DataFatturaBeneficiario = rdr.GetDateTime(5)
                If Not rdr.IsDBNull(6) Then allegato.DenominazioneBeneficiario = rdr.GetString(6)
                allegati.Add(allegato)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not (rdr Is Nothing) Then
                If Not rdr.IsClosed Then
                    rdr.Close()
                End If
                rdr = Nothing
            End If
            allegati = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
            allegati = Nothing
        End Try
        Return allegati

    End Function
    Sub FO_Insert_Info_Scheda_Contratti_Fatture(ByVal opOperazione As DllAmbiente.Operatore, ByVal ItemSchedaContrattiFattureInfo As DllDocumentale.ItemSchedaContrattiFattureInfo, Optional ByVal trans As SqlTransaction = Nothing)
        Dim conn As SqlClient.SqlConnection = Nothing

        Dim chiudereConn As Boolean = False
        Try

            For Each contratto As ItemContrattoInfoHeader In ItemSchedaContrattiFattureInfo.Contratti
                FO_Insert_Contratto(contratto, trans)
            Next

            For Each fattura As ItemFatturaInfoHeader In ItemSchedaContrattiFattureInfo.Fatture
                FO_Insert_Fattura(fattura, trans)
            Next

            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'inserimento delle informazione della scheda 'Contratti Fatture' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub


    Function FO_Update_Scheda_Liquidazione_Fatture(ByVal liquidazione As DllDocumentale.ItemLiquidazioneInfo, ByVal statoOperazione As String, ByVal idDocumento As String, ByVal listaFatture As System.Collections.Generic.List(Of DllDocumentale.ItemFatturaInfoHeader), Optional ByVal trans As SqlTransaction = Nothing) As Integer
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim chiudereConn As Boolean = False
        Dim progFatturaInLiquidazione As Integer = 0
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            If (statoOperazione = "I") Then
                For Each fattura As ItemFatturaInfoHeader In listaFatture
                    progFatturaInLiquidazione = FO_Insert_Liquidazione_Fattura(idDocumento, liquidazione.Dli_prog, fattura.IdUnivoco, fattura.ImportoFattDaLiquidare, fattura.Prog, trans)
                Next
            End If
            If (statoOperazione = "C") Then
                For Each fattura As ItemFatturaInfoHeader In listaFatture
                    FO_Delete_Liquidazione_Fattura(idDocumento, liquidazione.Dli_prog, fattura.IdUnivoco, trans)
                Next
            End If

            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'aggiornamento delle informazione sulla liquidazione '" + liquidazione.Dli_prog + "' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try

    End Function

    Sub FO_Update_Scheda_Impegno_Fatture(ByVal ProgPreImpegno As String, ByVal statoOperazione As String, ByVal idDocumento As String, ByVal listaFatture As System.Collections.Generic.List(Of ItemFatturaInfoHeader), Optional ByVal trans As SqlTransaction = Nothing)
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then
                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If

            If (statoOperazione = "I") Then
                For Each fattura As ItemFatturaInfoHeader In listaFatture
                    FO_Insert_Impegno_Fattura(idDocumento, ProgPreImpegno, fattura.IdUnivoco, fattura.ImportoLiquidato, fattura.Prog, trans)
                Next
            End If
            If (statoOperazione = "C") Then
                For Each fattura As ItemFatturaInfoHeader In listaFatture
                    FO_Delete_Impegno_Fattura(idDocumento, ProgPreImpegno, fattura.IdUnivoco, trans)
                Next
            End If

            If chiudereConn Then
                trans.Commit()
            End If
        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'aggiornamento delle informazione sull'impegno '" + ProgPreImpegno + "' - " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try

    End Sub



    Function FO_Insert_Liquidazione_Fattura(ByVal idDocumento As String, ByVal idLiquidazione As Integer, ByVal idFattura As String, ByVal importoLiquidato As Decimal, ByVal progFattura As Long, Optional ByVal trans As SqlTransaction = Nothing) As Integer

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim insert_liquidazione_fattura As String = "INSERT INTO [Documento_Liquidazione_Fattura] " & _
            "([id_Documento]" & _
            ",[id_TabDocLiquidazione] " & _
            ",[id_Fattura_SIC] " & _
            ",[importoLiquidato] " & _
            ",[prog_fattura]) OUTPUT Inserted.id" & _
            " VALUES (@id_Documento,@id_TabDocLiquidazione,@id_Fattura, @importoLiquidato, @prog_fattura)"


        Dim returnValue As Integer = 0
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then

                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If
            Dim parms(4) As SqlParameter

            parms(0) = New SqlParameter("@id_Documento", SqlDbType.VarChar)
            parms(0).Value = idDocumento & ""
            parms(1) = New SqlParameter("@id_TabDocLiquidazione", SqlDbType.Int)
            parms(1).Value = idLiquidazione & ""
            parms(2) = New SqlParameter("@id_Fattura", SqlDbType.VarChar)
            parms(2).Value = idFattura & ""
            parms(3) = New SqlParameter("@importoLiquidato", SqlDbType.Decimal)
            parms(3).Value = importoLiquidato
            parms(4) = New SqlParameter("@prog_fattura", SqlDbType.Int)
            parms(4).Value = progFattura


            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, insert_liquidazione_fattura, parms, -1)

            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'inserimento della fattura della liquidazione " & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
        Return returnValue
    End Function

    Sub FO_Insert_Impegno_Fattura(ByVal idDocumento As String, ByVal idImpegno As Integer, ByVal idFattura As String, ByVal importoLiquidato As Decimal, ByVal progFattura As Long, Optional ByVal trans As SqlTransaction = Nothing)

        Dim conn As SqlClient.SqlConnection = Nothing
        Dim insert_liquidazione_fattura As String = "INSERT INTO [Documento_Impegno_Fattura] " & _
            "([id_Documento]" & _
            ",[id_TabDocImpegno] " & _
            ",[id_Fattura_SIC]" & _
            ", [importoLiquidato]" & _
            ", [prog_fattura])" & _
            " VALUES (@id_Documento,@id_TabDocImpegno,@id_Fattura, @importoLiquidato, @prog_fattura)"

        Dim returnValue As Integer
        Dim chiudereConn As Boolean = False
        Try
            If trans Is Nothing Then

                conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
                conn.Open()
                trans = conn.BeginTransaction
                chiudereConn = True
            End If
            Dim parms(4) As SqlParameter

            parms(0) = New SqlParameter("@id_Documento", SqlDbType.VarChar)
            parms(0).Value = idDocumento & ""
            parms(1) = New SqlParameter("@id_TabDocImpegno", SqlDbType.Int)
            parms(1).Value = idImpegno & ""
            parms(2) = New SqlParameter("@id_Fattura", SqlDbType.VarChar)
            parms(2).Value = idFattura & ""
            parms(3) = New SqlParameter("@importoLiquidato", SqlDbType.Decimal)
            parms(3).Value = importoLiquidato
            parms(4) = New SqlParameter("@prog_fattura", SqlDbType.Int)
            parms(4).Value = progFattura


            returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, insert_liquidazione_fattura, parms, -1)

            If chiudereConn Then
                trans.Commit()
            End If

        Catch ex As Exception
            Log.Error(Now & " - Errore durante l'inserimento della fattura dell impegno" & ex.Message)
            If chiudereConn Then
                If Not trans Is Nothing Then
                    trans.Rollback()
                End If
            End If
            Throw ex
        Finally
            If chiudereConn Then
                If Not conn Is Nothing Then
                    conn.Close()
                End If
            End If
        End Try
    End Sub


    Function FO_GetDocumentoConservazioneAllegati(ByVal idDocumento As String,Optional ByVal stato As String = Nothing) As Collections.Generic.List(Of ItemDocumentoConservazione)
        Dim lista As New Generic.List(Of ItemDocumentoConservazione)
        Dim itemDocumentoConservazione As New ItemDocumentoConservazione

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")

        Dim Sqlq As String = "SELECT T1.[id] " &
            " ,T1.[numero_definitivo]" &
            " ,T1.[id_documento]" &
            " ,T1.[data_archivio]" &
            " ,T1.[estensione_allegato]" &
            " ,T1.[codice_operatore_allegato]" &
            " ,T1.[nominativo_operatore_allegato]" &
            " ,T1.[data_registrazione_allegato]" &
            " ,T1.[id_alfresco]" &
            " ,T1.[path_alfresco]" &
            " ,T1.[id_stato]" &
            " ,T1.[descrizione_errore]" &
            " ,T1.[data_aggiornamento]" &
            " ,[Tab_Conservazione_Stato].[descrizione] " &
            " FROM [DOCUMENTALE].[dbo].[Documento_Conservazione] T1 INNER JOIN Tab_Conservazione_Stato ON T1.id_stato = Tab_Conservazione_Stato.id" &
            " WHERE (T1.estensione_allegato = 'P7M' or T1.estensione_allegato = 'pdf') AND T1.id_documento = @id_documento "
        If Not stato Is Nothing Then
            Sqlq = Sqlq & " AND [Tab_Conservazione_Stato].[descrizione] = '" & stato & "'"
        End If

        Dim param(0) As SqlClient.SqlParameter

        param(0) = New SqlClient.SqlParameter("@id_documento", SqlDbType.VarChar)
        param(0).Value = idDocumento

        'Sqlq = Sqlq & " Order By Di_Documento,Di_prog"

        Dim rdr As SqlClient.SqlDataReader

        Try
            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)

            While rdr.Read()
                itemDocumentoConservazione = New ItemDocumentoConservazione
                itemDocumentoConservazione.Id = rdr.GetInt64(0)
                itemDocumentoConservazione.Numero_Definitivo = rdr.GetString(1)
                itemDocumentoConservazione.Id_Documento = rdr.GetString(2)

                If Not rdr.IsDBNull(3) Then itemDocumentoConservazione.Data_Archivio = rdr.GetDateTime(3)
                If Not rdr.IsDBNull(4) Then itemDocumentoConservazione.Estensione_Allegato = rdr.GetString(4)              
                If Not rdr.IsDBNull(5) Then itemDocumentoConservazione.Codice_Operatore_Allegato = rdr.GetString(5)
                If Not rdr.IsDBNull(6) Then itemDocumentoConservazione.Nominativo_Operatore_Allegato = rdr.GetString(6)

                If Not rdr.IsDBNull(7) Then itemDocumentoConservazione.Data_Registrazione_Allegato = rdr.GetDateTime(7)
                If Not rdr.IsDBNull(8) Then itemDocumentoConservazione.Id_Alfresco = rdr.GetString(8)
                If Not rdr.IsDBNull(9) Then itemDocumentoConservazione.Path_Alfresco = rdr.GetString(9)
                If Not rdr.IsDBNull(10) Then itemDocumentoConservazione.Id_Stato = rdr.GetInt32(10)
                If Not rdr.IsDBNull(11) Then itemDocumentoConservazione.Descrizione_Errore = rdr.GetString(11)
                If Not rdr.IsDBNull(12) Then itemDocumentoConservazione.Data_Aggiornamento = rdr.GetDateTime(12)

                If Not rdr.IsDBNull(13) Then itemDocumentoConservazione.Stato = rdr.GetString(13)
                
                lista.Add(itemDocumentoConservazione)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try

        Return lista
    End Function
      Function FO_Insert_ListDocumentoBeneficiarioExcel(ByVal listaBeneficiarioExcels As List(Of ItemDocumentoBeneficiarioExcel)) As List(Of ItemDocumentoBeneficiarioExcel)
        Log.Info("Inizio FO_Insert_ListDocumentoBeneficiarioExcel")
        Dim query As String = "INSERT INTO  [Documento_beneficiari_excel] " &
            " ([excel_riga] " &
        "   ,[groupedBy] " &
        "   ,[id_documento] " &
        "   ,[anno] " &
        "   ,[capitolo] " &
        "   ,[preimpegno] " &
        "   ,[importo] " &
        "   ,[cod_ob_gestionale] " &
        "   ,[pcf] " &
        "   ,[genera_liquidazione_contestuale] " &
        "   ,[id_anagrafica_sic] " &
        "   ,[denominazione] " &
        "   ,[flag_persona_fisica] " &
        "   ,[partita_iva] " &
        "   ,[cognome_lr] " &
        "   ,[nome_lr] " &
        "   ,[sesso_lr] " &
        "   ,[comune_nascita_lr] " &
        "   ,[data_nascita_lr] " &
        "   ,[indirizzo_residenza_lr] " &
        "   ,[comune_residenza_lr] " &
        "   ,[cap_residenza_lr] " &
        "   ,[codice_fiscale_lr] " &
        "   ,[codice_fiscale] " &
        "   ,[sesso] " &
        "   ,[estero] " &
        "   ,[comune_nascita] " &
        "   ,[data_nascita] " &
        "   ,[id_sede_sic] " &
        "   ,[indirizzo_sede] " &
        "   ,[comune_sede] " &
        "   ,[cap_sede] " &
        "   ,[nome_sede] " &
        "   ,[id_tipologia_pagamento_sic] " &
        "   ,[tipologia_pagamento_nome] " &
        "   ,[id_conto_corrente_sic] " &
        "   ,[is_modalita_principale] " &
        "   ,[iban] " &
        "   ,[is_dato_sensibile] " &
        "   ,[cup] " &
        "   ,[cig] " &
        "   ,[data_caricamento] " &
        "   ,[operatore_caricamento]) " &
        "    VALUES " &
         "           (" & param_excel_riga &
         "          ," & param_grouped_by &
        "           ," & param_id_Documento &
        "           ," & param_Esercizio &
        "           ," & param_Cap &
        "           ," & param_NPreImp &
        "           ," & param_Importo &
        "           ," & param_CodObGest &
        "           ," & param_PCF &
        "           ," & param_genera_liquidazione_contestuale &
        "           ," & param_id_anagrafica_sic &
        "           ," & param_denominazione &
        "           ," & param_flag_persona_fisica &
        "           ," & param_partita_iva &
        "           ," & param_cognome_lr &
        "           ," & param_nome_lr &
        "           ," & param_sesso_lr &
        "           ," & param_comune_nascita_lr &
        "           ," & param_data_nascita_lr &
        "           ," & param_indirizzo_residenza_lr &
        "           ," & param_comune_residenza_lr &
        "           ," & param_cap_residenza_lr &
        "           ," & param_codice_fiscale_lr &
        "           ," & param_codice_fiscale &
        "           ," & param_sesso &
        "           ," & param_estero &
        "           ," & param_comune_nascita &
        "           ," & param_data_nascita &
        "           ," & param_id_sede_sic &
        "           ," & param_indirizzo_sede &
        "           ," & param_comune_sede &
        "           ," & param_cap_sede &
        "           ," & param_nome_sede &
        "           ," & param_id_modalita_pagamento &
        "           ," & param_tiplogia_pagamento_nome &
        "           ," & param_id_conto_corrente_sic &
        "           ," & param_is_modalita_principale &
        "           ," & param_iban &
        "           ," & param_is_dato_sensibile &
        "           ," & param_cup &
        "           ," & param_cig &
        "           ," & param_data_caricamento &
        "           ," & param_Operatore &
        " )Select @@identity"

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlClient.SqlTransaction = conn.BeginTransaction
        Try
            For Each item As ItemDocumentoBeneficiarioExcel In listaBeneficiarioExcels
                Dim parms(42) As SqlParameter
                Dim indexParam As Integer = 0

                parms(indexParam) = New SqlParameter(param_excel_riga, SqlDbType.Int)
                parms(indexParam).Value = item.ExcelRiga
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_grouped_by, SqlDbType.Int)
                parms(indexParam).Value = item.GroupedBy
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
                parms(indexParam).Value = item.IdDocumento
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_Esercizio, SqlDbType.Int)
                parms(indexParam).Value = item.Anno
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_Cap, SqlDbType.VarChar)
                parms(indexParam).Value = "" & item.Capitolo
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.Preimpegno Is Nothing, "", item.Preimpegno)
                indexParam = indexParam + 1


                parms(indexParam) = New SqlParameter(param_Importo, SqlDbType.Decimal)
                parms(indexParam).Value = item.Importo
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_CodObGest, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.CodObGestionale Is Nothing, "", item.CodObGestionale)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_PCF, SqlDbType.VarChar)
                parms(indexParam).Value = item.Pcf
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_genera_liquidazione_contestuale, SqlDbType.Bit)
                parms(indexParam).Value = item.GeneraLiquidazioneContestuale
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_id_anagrafica_sic, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.IdAnagraficaSic Is Nothing, "", item.Anagrafica.IdAnagraficaSic)
                indexParam = indexParam + 1

                'Persona giuridica
                parms(indexParam) = New SqlParameter(param_denominazione, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.Denominazione Is Nothing, "", item.Anagrafica.Denominazione)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_flag_persona_fisica, SqlDbType.Bit)
                parms(indexParam).Value = item.Anagrafica.FlagPersonaFisica
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_partita_iva, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.PartitaIva Is Nothing, "", item.Anagrafica.PartitaIva)
                indexParam = indexParam + 1

                'Legale rappresentante
                parms(indexParam) = New SqlParameter(param_cognome_lr, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.CognomeLR Is Nothing, "", item.Anagrafica.CognomeLR)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_nome_lr, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.NomeLR Is Nothing, "", item.Anagrafica.NomeLR)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_sesso_lr, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.SessoLR Is Nothing, "", item.Anagrafica.SessoLR)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_comune_nascita_lr, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.ComuneNascitaLR Is Nothing, "", item.Anagrafica.ComuneNascitaLR)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_data_nascita_lr, SqlDbType.Date)
                parms(indexParam).Value = item.Anagrafica.DataNascitaLR
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_indirizzo_residenza_lr, SqlDbType.VarChar) 'indexParam 17
                parms(indexParam).Value = IIf(item.Anagrafica.IndirizzoResidenzaLR Is Nothing, "", item.Anagrafica.IndirizzoResidenzaLR)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_comune_residenza_lr, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.ComuneResidenzaLR Is Nothing, "", item.Anagrafica.ComuneResidenzaLR)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_cap_residenza_lr, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.CapResidenzaLR Is Nothing, "", item.Anagrafica.CapResidenzaLR)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_codice_fiscale_lr, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.CodiceFiscaleLR Is Nothing, "", item.Anagrafica.CodiceFiscaleLR)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_codice_fiscale, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.CodiceFiscale Is Nothing, "", item.Anagrafica.CodiceFiscale)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_sesso, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.Sesso Is Nothing, "", item.Anagrafica.Sesso)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_estero, SqlDbType.Bit)
                parms(indexParam).Value = item.Anagrafica.IsEstero
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_comune_nascita, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.ComuneNascita Is Nothing, "", item.Anagrafica.ComuneNascita)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_data_nascita, SqlDbType.Date)
                parms(indexParam).Value = item.Anagrafica.DataNascita
                indexParam = indexParam + 1
                'Sede
                parms(indexParam) = New SqlParameter(param_id_sede_sic, SqlDbType.NVarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.IdSedeSic Is Nothing, "", item.Anagrafica.IdSedeSic)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_indirizzo_sede, SqlDbType.NVarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.IndirizzoSede Is Nothing, "", item.Anagrafica.IndirizzoSede)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_comune_sede, SqlDbType.NVarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.ComuneSede Is Nothing, "", item.Anagrafica.ComuneSede)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_cap_sede, SqlDbType.NVarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.CapSede Is Nothing, "", item.Anagrafica.CapSede)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_nome_sede, SqlDbType.NVarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.NomeSede Is Nothing, "", item.Anagrafica.NomeSede)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_id_modalita_pagamento, SqlDbType.NVarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.IdTipologiaPagamentoSic Is Nothing, "", item.Anagrafica.IdTipologiaPagamentoSic)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_tiplogia_pagamento_nome, SqlDbType.NVarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.TipologiaPagamentoNome Is Nothing, "", item.Anagrafica.TipologiaPagamentoNome)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_id_conto_corrente_sic, SqlDbType.NVarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.IdContoCorrenteSic Is Nothing, "", item.Anagrafica.IdContoCorrenteSic)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_is_modalita_principale, SqlDbType.Bit)
                parms(indexParam).Value = item.Anagrafica.IsModalitaPrincipale
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_iban, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.Iban Is Nothing, "", item.Anagrafica.Iban)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_is_dato_sensibile, SqlDbType.Bit)
                parms(indexParam).Value = item.Anagrafica.IsDatoSensibile
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_cup, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.Cup Is Nothing, "", item.Anagrafica.Cup)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_cig, SqlDbType.VarChar)
                parms(indexParam).Value = IIf(item.Anagrafica.Cig Is Nothing, "", item.Anagrafica.Cig)
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_data_caricamento, SqlDbType.DateTime)
                parms(indexParam).Value = Now
                indexParam = indexParam + 1

                parms(indexParam) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
                parms(indexParam).Value = item.OperatoreCaricamento  'indexParam = 39
                indexParam = indexParam + 1


                Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, query, parms, -1)

              

                item.Prog = returnValue
            Next
              trans.Commit()
            Log.Info("Fine FO_Insert_ListDocumentoBeneficiarioExcel")
        Catch ex As Exception
            Log.Error("FO_Insert_DocumentoBeneficiarioExcel" & ":" & ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try
        Return listaBeneficiarioExcels

    End Function


   Function FO_Insert_DocumentoBeneficiarioExcel(ByVal item As ItemDocumentoBeneficiarioExcel) As ItemDocumentoBeneficiarioExcel
        Dim query As String = "INSERT INTO  [Documento_beneficiari_excel] " & _
            " ([excel_riga] " & 
        "   ,[groupedBy] " & _
        "   ,[id_documento] " & _
        "   ,[anno] " & _
        "   ,[capitolo] " & _
        "   ,[preimpegno] " & _
        "   ,[importo] " & _
        "   ,[cod_ob_gestionale] " & _
        "   ,[pcf] " & _
        "   ,[genera_liquidazione_contestuale] " & _
        "   ,[id_anagrafica_sic] " & _
        "   ,[denominazione] " & _
        "   ,[flag_persona_fisica] " & _
        "   ,[partita_iva] " & _
        "   ,[cognome_lr] " & _
        "   ,[nome_lr] " & _
        "   ,[sesso_lr] " & _
        "   ,[comune_nascita_lr] " & _
        "   ,[data_nascita_lr] " & _
        "   ,[indirizzo_residenza_lr] " & _
        "   ,[comune_residenza_lr] " & _
        "   ,[cap_residenza_lr] " & _
        "   ,[codice_fiscale_lr] " & 
        "   ,[codice_fiscale] " & _
        "   ,[sesso] " & _
        "   ,[estero] " & 
        "   ,[comune_nascita] " & _
        "   ,[data_nascita] " & _
        "   ,[id_sede_sic] " & _
        "   ,[indirizzo_sede] " & _
        "   ,[comune_sede] " & _
        "   ,[cap_sede] " & _
        "   ,[nome_sede] " & _
        "   ,[id_tipologia_pagamento_sic] " & _
        "   ,[tipologia_pagamento_nome] " & _
        "   ,[id_conto_corrente_sic] " & _
        "   ,[is_modalita_principale] " & _
        "   ,[iban] " & _
        "   ,[is_dato_sensibile] " & _
        "   ,[cup] " & _
        "   ,[cig] " & _
        "   ,[data_caricamento] " & _
        "   ,[operatore_caricamento]) " & _
        "    VALUES " & _
         "           (" & param_excel_riga & _
         "          ," & param_grouped_by & _
        "           ," & param_id_Documento & _
        "           ," & param_Esercizio  & _
        "           ," & param_Cap & _
        "           ," & param_NPreImp & _
        "           ," & param_Importo & _
        "           ," & param_CodObGest & _
        "           ," & param_PCF & _
        "           ," & param_genera_liquidazione_contestuale & _
        "           ," & param_id_anagrafica_sic & _
        "           ," & param_denominazione & _
        "           ," & param_flag_persona_fisica & _
        "           ," & param_partita_iva & _
        "           ," & param_cognome_lr & _
        "           ," & param_nome_lr & _
        "           ," & param_sesso_lr & _
        "           ," & param_comune_nascita_lr & _
        "           ," & param_data_nascita_lr & _
        "           ," & param_indirizzo_residenza_lr & _
        "           ," & param_comune_residenza_lr & _
        "           ," & param_cap_residenza_lr & _
        "           ," & param_codice_fiscale_lr & _
        "           ," & param_codice_fiscale & _
        "           ," & param_sesso & _
        "           ," & param_estero & _
        "           ," & param_comune_nascita & _
        "           ," & param_data_nascita & _
        "           ," & param_id_sede_sic & _
        "           ," & param_indirizzo_sede & _
        "           ," & param_comune_sede & _
        "           ," & param_cap_sede & _
        "           ," & param_nome_sede & _
        "           ," & param_id_modalita_pagamento & _
        "           ," & param_tiplogia_pagamento_nome & _
        "           ," & param_id_conto_corrente_sic & _
        "           ," & param_is_modalita_principale & _
        "           ," & param_iban & _
        "           ," & param_is_dato_sensibile & _
        "           ," & param_cup & _
        "           ," & param_cig & _
        "           ," & param_data_caricamento & _
        "           ," & param_Operatore & _
        " )Select @@identity"

        Dim parms(42) As SqlParameter
        Dim indexParam as Integer = 0

        parms(indexParam) = New SqlParameter(param_excel_riga, SqlDbType.Int)
        parms(indexParam).Value = item.ExcelRiga
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_grouped_by, SqlDbType.Int)
        parms(indexParam).Value = item.GroupedBy
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
        parms(indexParam).Value = item.IdDocumento
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_Esercizio, SqlDbType.Int)
        parms(indexParam).Value = item.Anno
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_Cap, SqlDbType.VarChar)
        parms(indexParam).Value = "" & item.Capitolo
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_NPreImp, SqlDbType.VarChar)
        parms(indexParam).Value = IIf(item.Preimpegno Is Nothing, "", item.Preimpegno)
        indexParam = indexParam +1
       

       parms(indexParam) = New SqlParameter(param_Importo, SqlDbType.Decimal)
        parms(indexParam).Value = item.Importo
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_CodObGest, SqlDbType.VarChar)
        parms(indexParam).Value = IIf(item.CodObGestionale Is Nothing, "", item.CodObGestionale)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_PCF, SqlDbType.VarChar)
        parms(indexParam).Value = item.PCF
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_genera_liquidazione_contestuale, SqlDbType.Bit)
        parms(indexParam).Value = item.GeneraLiquidazioneContestuale
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_id_anagrafica_sic, SqlDbType.VarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.IdAnagraficaSic Is Nothing, "", item.Anagrafica.IdAnagraficaSic)
        indexParam = indexParam +1

        'Persona giuridica
        parms(indexParam) = New SqlParameter(param_denominazione, SqlDbType.VarChar)
        parms(indexParam).Value =  IIf(item.Anagrafica.Denominazione Is Nothing,"", item.Anagrafica.Denominazione)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_flag_persona_fisica, SqlDbType.Bit)
        parms(indexParam).Value =  item.Anagrafica.FlagPersonaFisica
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_partita_iva, SqlDbType.VarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.PartitaIva Is Nothing,"", item.Anagrafica.PartitaIva)
        indexParam = indexParam +1

        'Legale rappresentante
        parms(indexParam) = New SqlParameter(param_cognome_lr, SqlDbType.VarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.CognomeLr Is Nothing,"", item.Anagrafica.CognomeLr)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_nome_lr, SqlDbType.VarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.NomeLr Is Nothing,"", item.Anagrafica.NomeLr)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_sesso_lr, SqlDbType.VarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.SessoLr Is Nothing,"", item.Anagrafica.SessoLr)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_comune_nascita_lr, SqlDbType.VarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.ComuneNascitaLr Is Nothing,"", item.Anagrafica.ComuneNascitaLr)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_data_nascita_lr, SqlDbType.Date)
        parms(indexParam).Value = item.Anagrafica.DataNascitaLr
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_indirizzo_residenza_lr, SqlDbType.VarChar) 'indexParam 17
        parms(indexParam).Value = IIf(item.Anagrafica.IndirizzoResidenzaLr Is Nothing,"", item.Anagrafica.IndirizzoResidenzaLr)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_comune_residenza_lr, SqlDbType.VarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.ComuneResidenzaLr Is Nothing,"", item.Anagrafica.ComuneResidenzaLr)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_cap_residenza_lr, SqlDbType.VarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.CapResidenzaLr Is Nothing,"", item.Anagrafica.CapResidenzaLr)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_codice_fiscale_lr, SqlDbType.VarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.CodiceFiscaleLr Is Nothing,"", item.Anagrafica.CodiceFiscaleLr)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_codice_fiscale, SqlDbType.VarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.CodiceFiscale Is Nothing,"", item.Anagrafica.CodiceFiscale)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_sesso, SqlDbType.VarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.Sesso Is Nothing,"", item.Anagrafica.Sesso)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_estero, SqlDbType.Bit)
        parms(indexParam).Value = item.Anagrafica.IsEstero
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_comune_nascita, SqlDbType.VarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.ComuneNascita Is Nothing, "", item.Anagrafica.ComuneNascita)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_data_nascita, SqlDbType.Date)
        parms(indexParam).Value = item.Anagrafica.DataNascita
        indexParam = indexParam +1
        'Sede
        parms(indexParam) = New SqlParameter(param_id_sede_sic, SqlDbType.NVarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.IdSedeSic Is Nothing, "", item.Anagrafica.IdSedeSic)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_indirizzo_sede, SqlDbType.NVarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.IndirizzoSede Is Nothing, "", item.Anagrafica.IndirizzoSede)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_comune_sede, SqlDbType.NVarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.ComuneSede Is Nothing, "", item.Anagrafica.ComuneSede)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_cap_sede, SqlDbType.NVarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.capSede Is Nothing, "", item.Anagrafica.capSede)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_nome_sede, SqlDbType.NVarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.NomeSede Is Nothing, "", item.Anagrafica.NomeSede)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_id_modalita_pagamento, SqlDbType.NVarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.IdTipologiaPagamentoSic Is Nothing, "", item.Anagrafica.IdTipologiaPagamentoSic)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_tiplogia_pagamento_nome, SqlDbType.NVarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.TipologiaPagamentoNome Is Nothing, "", item.Anagrafica.TipologiaPagamentoNome)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_id_conto_corrente_sic, SqlDbType.NVarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.IdContoCorrenteSic Is Nothing, "", item.Anagrafica.IdContoCorrenteSic)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_is_modalita_principale, SqlDbType.Bit)
        parms(indexParam).Value =item.Anagrafica.IsModalitaPrincipale
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_iban, SqlDbType.VarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.Iban Is Nothing, "", item.Anagrafica.Iban)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_is_dato_sensibile, SqlDbType.Bit)
        parms(indexParam).Value = item.Anagrafica.IsDatoSensibile
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_cup, SqlDbType.VarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.Cup Is Nothing, "", item.Anagrafica.Cup)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_cig, SqlDbType.VarChar)
        parms(indexParam).Value = IIf(item.Anagrafica.Cig Is Nothing, "", item.Anagrafica.Cig)
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_data_caricamento, SqlDbType.DateTime)
        parms(indexParam).Value = Now
        indexParam = indexParam +1

        parms(indexParam) = New SqlParameter(param_Operatore, SqlDbType.VarChar)
        parms(indexParam).Value = item.OperatoreCaricamento  'indexParam = 39
        indexParam = indexParam +1

          Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlClient.SqlTransaction = conn.BeginTransaction
        Try
         
            Dim returnValue As Integer = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, query, parms, -1)

           
            trans.Commit()

            item.Prog = returnValue

        Catch ex As Exception
            Log.Error("FO_Insert_DocumentoBeneficiarioExcel" & ":" & ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try
        Return item

    End Function

    Function FO_Update_DocumentoBeneficiarioExcel(ByVal progressivo As String, ByVal idDocumento As String, ByVal idAnagraficaSIC As String, ByVal  idSedeSIC As String, ByVal  idTipologiaPagamentoSIC As String, ByVal  idContoCorrenteSIC As String, ByVal  descrizioneOperazioneSIC As String, ByVal  missioneProgrammaCapitolo As String) As Object
        
        Dim conn As SqlClient.SqlConnection = Nothing
        Dim trans As SqlClient.SqlTransaction = Nothing
        Dim returnValue As Integer
       
        Try

            conn = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
            conn.Open()
            trans = conn.BeginTransaction
            

             Dim query As String = " UPDATE [Documento_beneficiari_excel]" &
                " SET [id_anagrafica_sic] = " & param_id_anagrafica_sic &
                " ,[id_sede_sic] = " & param_id_sede_sic &
                " ,[id_tipologia_pagamento_sic] = " & param_id_modalita_pagamento &
                " ,[id_conto_corrente_sic] = " & param_id_conto_corrente_sic &
                " ,[descrizione_operazione_sic] = " & param_desrizione_operazione_sic &
                " ,[missione_programma] = " & param_MissioneProgramma &
                " where [id_documento] =" & param_id_Documento & "   AND [prog] = " & param_progressivo

            Dim parms(7) As SqlParameter

            parms(0) = New SqlParameter(param_id_anagrafica_sic, SqlDbType.VarChar)
            parms(0).Value = idAnagraficaSIC
            parms(1) = New SqlParameter(param_id_sede_sic, SqlDbType.VarChar)
            parms(1).Value = idSedeSIC
            parms(2) = New SqlParameter(param_id_modalita_pagamento, SqlDbType.VarChar)
            parms(2).Value = idTipologiaPagamentoSIC
            parms(3) = New SqlParameter(param_id_conto_corrente_sic, SqlDbType.VarChar)
            parms(3).Value = idContoCorrenteSIC
            parms(4) = New SqlParameter(param_desrizione_operazione_sic, SqlDbType.VarChar)
            parms(4).Value = descrizioneOperazioneSIC

            parms(5) = New SqlParameter(param_MissioneProgramma, SqlDbType.VarChar)
            If String.IsNullOrEmpty(missioneProgrammaCapitolo)  then
                parms(5).Value = DBNull.Value
            Else 
                parms(5).Value = missioneProgrammaCapitolo
            End If
            
            parms(6) = New SqlParameter(param_id_Documento, SqlDbType.VarChar)
            parms(6).Value = idDocumento
            parms(7) = New SqlParameter(param_progressivo, SqlDbType.VarChar)
            parms(7).Value = progressivo

            Try
                returnValue = Intema.DBUtility.SqlHelper.ExecuteScalar(trans, CommandType.Text, query, parms, -1)
            Catch ex As Exception
                'se si genera un'eccezione, continua con le modifiche di specifico in generico
                Log.Error(ex.Message)
            End Try


            trans.Commit()


        Catch ex As Exception
            Log.Error(ex.Message)
            If Not trans Is Nothing Then
                trans.Rollback()
            End If

            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try

        Return returnValue
    End Function

    Public Function getDocumentoBeneficiariExcelMaxGroupedBy(ByVal idDocumento as String) As Integer

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlClient.SqlTransaction = conn.BeginTransaction

        Dim Sqlq as String = "  SELECT     max (groupedBy)  " & _
                             "        " & _
                             " FROM         Documento_beneficiari_excel " & _
                             " WHERE id_documento = '" & idDocumento & "' "
        Dim maxGroupedBy as Integer = 0


        Dim rdr As SqlDataReader = Intema.DBUtility.SqlHelper.ExecuteReader(trans, CommandType.Text, Sqlq, Nothing)

        While rdr.Read()
            
            Try
                maxGroupedBy = rdr.GetInt32(0)
            Catch ex As SqlNullValueException
                maxGroupedBy = 0
            End Try

            
            
        End While
        rdr.Close()

        trans.Commit()
        conn.Close()

        return maxGroupedBy
    End Function

    Function FO_GetTotaleImportoByAnnoCapitolo(ByVal idDocumento As String, ByVal groupedBy As String) As Collections.Generic.List(Of ItemDaImpegnare)
        Dim lista As New Generic.List(Of ItemDaImpegnare)
        Dim con As New ItemDaImpegnare

        Dim strConn As String = Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE")
        Dim Sqlq As String = ""
        Sqlq = "SELECT anno, capitolo, preimpegno, SUM(importo) FROM Documento_beneficiari_excel "
         Sqlq = Sqlq & " WHERE id_documento = " & idDocumento
         Sqlq = Sqlq & " AND groupedBy = " & groupedBy
        Sqlq = Sqlq & " GROUP BY anno, capitolo, preimpegno "
        

        Dim param() As SqlClient.SqlParameter


        ReDim Preserve param(0)
        Dim par As New SqlClient.SqlParameter(Dic_FODocumentale.param_id_Documento, SqlDbType.VarChar)
        par.Value = idDocumento
        param(0) = par

        Dim rdr As SqlClient.SqlDataReader

        Try

            rdr = Intema.DBUtility.SqlHelper.ExecuteReader(strConn, CommandType.Text, Sqlq, param)


            While rdr.Read()
                con = New ItemDaImpegnare
                con.Anno = rdr.GetInt32(0)
                con.Capitolo = rdr.GetString(1)
                con.Preimpegno = rdr.GetString(2)
                con.Totale = rdr.GetDecimal(3)
                

                lista.Add(con)
            End While
            rdr.Close()

        Catch ex As SqlClient.SqlException
            Err.Number = ex.Number
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        Catch ex As Exception
            Err.Description = ex.Message
            If Not rdr.IsClosed Then
                rdr.Close()
            End If
            rdr = Nothing
        End Try




        Return lista
    End Function

    Function FO_DeleteDocumentoBeneficiarioExcel(ByVal progressivo As Integer) 
         Dim query As String = "DELETE FROM [Documento_beneficiari_excel] WHERE [prog] in ( @Progressivo ) "

        Dim parms(0) As SqlParameter

        parms(0) = New SqlParameter("@Progressivo", SqlDbType.VarChar)
        parms(0).Value = progressivo

        Dim conn As SqlClient.SqlConnection = New SqlClient.SqlConnection(Intema.DBUtility.SqlHelper.ConnectionString("DOCUMENTALE"))
        conn.Open()
        Dim trans As SqlTransaction = Nothing

        trans = conn.BeginTransaction
        Dim returnValue As Integer = 0
        Try


            returnValue = Intema.DBUtility.SqlHelper.ExecuteNonQuery(trans, CommandType.Text, query, parms, -1)
            
            trans.Commit()

        Catch ex As Exception
            Log.Error(ex.Message)

            If Not trans Is Nothing Then
                trans.Rollback()
            End If
            Throw New Exception(ex.Message)
        Finally
            If Not conn Is Nothing Then
                conn.Close()
            End If
        End Try

        Return returnValue
    End Function


End Class